
<!------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by ServiceMatrix.
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
------------------------------------------------------------------------------>
@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta charset="utf-8">
    <meta name="X-UA-Compatible" content="IE=edge,chrome=1">
    <meta name="viewport" content="width=device-width" />


    <title>Particular Software | Enterprise-Grade Service Platform for .NET - ServiceMatrix | Test Messages</title>

    <link href="/Content/Css.css" rel="stylesheet" type="text/css">
    <link href="/Content/Site.css" rel="stylesheet" type="text/css">
    <link href="/Content/Content.css" rel="stylesheet" type="text/css">
    <link href="/Content/TestMessages.css" rel="stylesheet" type="text/css">
	 <link href="/Content/highlight.css" rel="stylesheet" type="text/css">
	 <link href="/Content/guidance.css" rel="stylesheet" type="text/css">

	<script src="~/Scripts/jquery-1.7.1.min.js"></script>
	<script src="~/Scripts/jquery.unobtrusive-ajax.js" type="text/javascript"></script>
	<script src="~/Scripts/highlight.js"></script>	
    <script src="~/Scripts/jquery.signalR-1.0.0.min.js"></script>
    <script src="~/signalr/hubs"  type="text/javascript"></script>
	<script>
	$(function() {

	//initialise code snippet highlighting
    hljs.initHighlightingOnLoad();

    //initalise info tabs 
    $('.tabs-menu a').click(function (event) {
        $(this).parent().addClass("current");
        $(this).parent().siblings().removeClass("current");
        var tab = $(this).attr("href");
        $(".tab").not(tab).css("display", "none");
        $(tab).show();
        event.preventDefault();
    });

	//Wire up events to SignalR Hub Broadcasts

	 var billingCompletedHub = $.connection.billingCompletedHub;

	 billingCompletedHub.client.billingCompleted = function (data) {
        console.log('Received event : BillingCompleted ');       
		 var jsonBillingCompleted = JSON.stringify(data);
         $('#signalrmessages').append('<div><div class="text-lato-16">BillingCompleted</div><div>' + jsonBillingCompleted + '</div></div>');
    };

    
	//Start listening to SignalR Hubs
    $.connection.hub.start().done(function () {
        console.log('Connection established!, ConnectionId = ' + $.connection.hub.id);
           });
});
</script>
	
    <link href="/Images/favicon.ico" rel="shortcut icon" type="image/x-icon">
</head>
<body>
    <div id="layout-wrapper">
        <div class="container">
            <div class="logo">
                <div class="zone zone-header">
                    <article class="widget-header widget-html-widget widget">

                        <div>
                            <a href="http://particular.net/">
                                <img src="/Images/logo.png" alt="logo"></a>
                        </div>
                    </article>
                </div>
            </div>
            
            <div id="layout-main" class="group">
                <div id="layout-content">
                    <div class="main-content" style="min-height: 0px; margin-bottom: 50px;">
                        <div class="zone zone-content">
                            <article class="content-item page">
                                <header>
                                    <h1>Test Messages:</h1>
                                </header>

                                <p>You can send test Commands/Events directly from here. This page is auto-generated based on the Publisher/Sender components deployed on this endpoint.</p>

                                <div class="sidebar text-lato-16">
		
                                <div class="sendMessage">
                                    <h2 class="text-lato-16">SubmitOrder</h2>
									@using (Ajax.BeginForm( "SendMessageSubmitOrder", new AjaxOptions { HttpMethod = "POST",  UpdateTargetId = "SubmitOrderResult", InsertionMode = InsertionMode.InsertAfter }))
                                    {
                                      <div>
                                        <table style="margin: 0px auto;">
                                          @foreach (var field in typeof(OnlineSales.Internal.Commands.Sales.SubmitOrder).GetProperties())
                                          {
                                          <tr>
                                            <td>@field.Name</td>
                                            <td>
                                              <input type="text" id="@field.Name" name="@field.Name" />
                                            </td>
                                          </tr>
                                          }
                                        </table>
                                      </div>
									  <input type="submit" value="Send">
                                    }
									<div id="SubmitOrderResult" class="label text-dosis-16"></div>
                                </div>

		
                            </article>
                        </div>
				<script>

				


			</script> 

						 <div class="sidebar text-lato-16">
                            <div class="zone zone-content">
                                <article class="content-item page">
                                    <div class="sendMessage">
                                        <h2 class="text-lato-16">SignalR Broadcasts:</h2>
                                        <div id="signalrmessages" />
                                    </div>
                                </article>
                            </div>
                        </div>

						<div class="zone zone-content">
                            <p>SignalR integration - How To</p>
                            <!-- Tab Menu -->
                            <ul class="tabs-menu sidebar text-lato-16">
                                <li class="current"><a href="#tab1">Introduction</a></li>
                                <li><a href="#tab2">Gettting Started</a></li>
                                <li><a href="#tab3">Handling the Broadcast</a></li>
                            </ul>

                            <div class="tab show" id="tab1">
                                <div class="tab-content">
                                    <h3>SignalR and ServiceMatrix</h3>
                                    <p> ASP.NET SignalR is a Microsoft library for ASP.NET developers that simplifies the process of adding real-time web functionality to applications. 
                                        Real-time web functionality is the ability to have server code push content to connected clients instantly as it becomes available, rather than having the server wait for a client to request new data.
                                        When "Publish via SignalR" is chosen on an NServiceBus event ServiceMatrix generates a new handler and a class which derives from the the SignalR Hub class.  
                                        When new event are handled the Hub code is triggered and the event is broadcast to any listening clients.</p>
                                    <p> Basic instructions on how to wire up your application to recieve these broadcasts are provided in the subsequent tabs.</p>
                                    <p> More detailed documentation regarding integrating SignalR into your MVC 4 project can be found on the Microsoft's <a href="http://www.asp.net/signalr/overview/signalr-1x/getting-started-with-aspnet-signalr/tutorial-getting-started-with-signalr-and-mvc-4">ASP.NET SignalR Site</a></p>
                                </div>
                            </div>

                            <div class="tab" id="tab2">
                                <div class="tab-content">
                                    <h3>Reviewing the code</h3>
                                    <p>This page can be used as a sample of how to wire up a simple client. The page makes use of the following JavaScript libaries to enable SignalR.</p>
                                    <div class="snippet">

                                        <pre><code>&lt;script src=&quot;~/Scripts/jquery-1.7.1.min.js&quot; type=&quot;text/javascript&quot&gt;&lt;/script&gt;
&lt;script src=&quot;~/Scripts/jquery.signalR-1.0.0.min.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</code></pre>
                                        <p>This script reference must also be included,  the script is dynamically generated by SignalR at runtime and does not appear in the solution</p>
                                        <pre><code>&lt;script src=&quot;~/signalr/hubs&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</code></pre>
                                        <p> This page uses AJAX forms rather than a full postback to the controller to submit. This was done to avoid a postback which would drop the connection to SignalR during the page reload. To use AJAX forms we've included the following JavaScript library:</p>
										<pre><code>&lt;script src=&quot;~/Scripts/jquery.unobtrusive-ajax.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</code></pre>
                                    </div>
                                </div>
                            </div>

                            <div class="tab" id="tab3">
                                <div class="tab-content">
                                    <h3>Example</h3> 
                                    <p>The following example shows a JavaScript function that listens for SignalR broadcast of an <b>OrderReceived</b> event. The function will be similiar to one found in the source for this page. In this example the JSON payload from the event is converted to a string and show in a DIV tag.</p>
                                    <div class="snippet">
										<pre><code>$(function () {
        // orderReceivedHub 
        var orderReceivedHub = $.connection.orderReceivedHub;
        orderReceivedHub.client.orderReceived = function (message) {
            var jsonOrderReceived = JSON.stringify(message);
            $(&#39;#signalrmessages&#39;).prepend(&#39;&lt;div&gt;&lt;div&gt;OrderReceived&lt;/div&gt;&lt;div&gt;&#39; + jsonOrderReceived + &#39;&lt;/div&gt;&lt;/div&gt;&#39;);
        };
        //Start the Hub Connection
        $.connection.hub.start();
    });
</code></pre>
                                        <p><b>Note:</b> SignalR will convert event and classes name to camelcase by default, so in this example "orderReceived" may correspond to OrderReceived in the server code</p> 
                                    </div>
                                </div>
                            </div>
                        </div>
						</div>
                </div>
            </div>
        </div>
    </div>
</body>
</html>