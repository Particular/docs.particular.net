//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by ServiceMatrix.
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using NServiceBus;
using OnlineSales.Internal.Commands.Billing;
using OnlineSales.Contracts.Sales;
using OnlineSales.Internal.Messages.Billing;
using NServiceBus.Saga;


namespace OnlineSales.Billing
{
    public partial class OrderAcceptedHandler : Saga<OrderAcceptedHandlerSagaData>, IOrderAcceptedHandler, ServiceMatrix.Shared.INServiceBusComponent, IAmStartedByMessages<OrderAccepted>, IHandleMessages<SubmitPaymentResponse>
    {
		
		public void Handle(OrderAccepted message)
		{
			// Store message in Saga Data for later use
			this.Data.OrderAccepted = message;
			// Handle message on partial class
			this.HandleImplementation(message);

			// Check if Saga is Completed 
			CheckIfAllMessagesReceived();
		}

		partial void HandleImplementation(OrderAccepted message);

        public void Send(SubmitPayment message)
        {
            ConfigureSubmitPayment(message);
            Bus.Send(message);
        }

        partial void ConfigureSubmitPayment(SubmitPayment message);

        public void Handle(SubmitPaymentResponse message)
        {
            // Store message in Saga Data for later use
            this.Data.SubmitPaymentResponse = message;

            // Handle message on partial class
            this.HandleImplementation(message);

            // Check if Saga is Completed 
            CheckIfAllMessagesReceived();
        }

        partial void HandleImplementation(SubmitPaymentResponse message);

        public void CheckIfAllMessagesReceived()
        {
            if (this.Data.OrderAccepted != null && this.Data.SubmitPaymentResponse != null)
            {
                AllMessagesReceived();
            }
        }

        partial void AllMessagesReceived();
     }

     public partial class OrderAcceptedHandlerSagaData : IContainSagaData
     {
           public virtual Guid Id { get; set; }
           public virtual string Originator { get; set; }
           public virtual string OriginalMessageId { get; set; }

           public virtual OrderAccepted OrderAccepted { get; set; }
           public virtual SubmitPaymentResponse SubmitPaymentResponse { get; set; }

    }

	
	public partial interface IOrderAcceptedHandler
    {
        
        void Send(SubmitPayment message);

	}

	
}
