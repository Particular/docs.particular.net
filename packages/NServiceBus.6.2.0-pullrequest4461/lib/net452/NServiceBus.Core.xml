<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NServiceBus.Core</name>
    </assembly>
    <members>
        <member name="T:NServiceBus.AuditConfigReader">
            <summary>
            Utility class to find the configured audit queue for an endpoint.
            </summary>
        </member>
        <member name="M:NServiceBus.AuditConfigReader.TryGetAuditQueueAddress(NServiceBus.Settings.ReadOnlySettings,System.String@)">
            <summary>
            Finds the configured audit queue for an endpoint.
            The audit queue can be configured using 'EndpointConfiguration.AuditProcessedMessagesTo()',
            via the 'QueueName' attribute of the 'Audit' config section
            or by using the 'HKEY_LOCAL_MACHINE\SOFTWARE\ParticularSoftware\ServiceBus\AuditQueue' registry key.
            </summary>
            <param name="settings">The configuration settings for the endpoint.</param>
            <param name="address">The configured audit queue address for the endpoint.</param>
            <returns>True if a configured audit address can be found, false otherwise.</returns>
        </member>
        <member name="T:NServiceBus.Pipeline.IAuditContext">
            <summary>
            Provide context to behaviors on the audit pipeline.
            </summary>
        </member>
        <member name="P:NServiceBus.Pipeline.IAuditContext.Message">
            <summary>
            The message to be audited.
            </summary>
        </member>
        <member name="P:NServiceBus.Pipeline.IAuditContext.AuditAddress">
            <summary>
            Address of the audit queue.
            </summary>
        </member>
        <member name="M:NServiceBus.Pipeline.IAuditContext.AddAuditData(System.String,System.String)">
            <summary>
            Adds information about the current message that should be audited.
            </summary>
            <param name="key">The audit key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:NServiceBus.Pipeline.ForkConnector`2">
            <summary>
            Forks into another independent pipeline.
            </summary>
            <typeparam name="TFromContext">The context to connect from.</typeparam>
            <typeparam name="TForkContext">The context to fork an independent pipeline to.</typeparam>
        </member>
        <member name="M:NServiceBus.Pipeline.ForkConnector`2.Invoke(`0,System.Func{System.Threading.Tasks.Task},System.Func{`1,System.Threading.Tasks.Task})">
            <inheritdoc />
        </member>
        <member name="M:NServiceBus.Pipeline.ForkConnector`2.Invoke(`0,System.Func{System.Threading.Tasks.Task})">
            <inheritdoc />
        </member>
        <member name="T:NServiceBus.Pipeline.StageForkConnector`3">
            <summary>
            Connects two stages of a pipeline and forks into an independent pipeline.
            </summary>
            <typeparam name="TFromContext">The context to connect from.</typeparam>
            <typeparam name="TToContext">The context to connect to.</typeparam>
            <typeparam name="TForkContext">The context to fork an independent pipeline to.</typeparam>
        </member>
        <member name="M:NServiceBus.Pipeline.StageForkConnector`3.Invoke(`0,System.Func{`1,System.Threading.Tasks.Task})">
            <inheritdoc />
        </member>
        <member name="M:NServiceBus.Pipeline.StageForkConnector`3.Invoke(`0,System.Func{`1,System.Threading.Tasks.Task},System.Func{`2,System.Threading.Tasks.Task})">
            <inheritdoc />
        </member>
        <member name="T:NServiceBus.Pipeline.IOutgoingContext">
            <summary>
            The base interface for everything inside the outgoing pipeline.
            </summary>
        </member>
        <member name="P:NServiceBus.Pipeline.IOutgoingContext.MessageId">
            <summary>
            The id of the outgoing message.
            </summary>
        </member>
        <member name="P:NServiceBus.Pipeline.IOutgoingContext.Headers">
            <summary>
            The headers of the outgoing message.
            </summary>
        </member>
        <member name="T:NServiceBus.Pipeline.TransportMessageContextExtensions">
            <summary>
            Context extension to provide access to the incoming physical message.
            </summary>
        </member>
        <member name="M:NServiceBus.Pipeline.TransportMessageContextExtensions.TryGetIncomingPhysicalMessage(NServiceBus.Pipeline.IOutgoingReplyContext,NServiceBus.Transport.IncomingMessage@)">
            <summary>
            Returns the incoming physical message if there is one currently processed.
            </summary>
        </member>
        <member name="M:NServiceBus.Pipeline.TransportMessageContextExtensions.TryGetIncomingPhysicalMessage(NServiceBus.Pipeline.IOutgoingLogicalMessageContext,NServiceBus.Transport.IncomingMessage@)">
            <summary>
            Returns the incoming physical message if there is one currently processed.
            </summary>
        </member>
        <member name="M:NServiceBus.Pipeline.TransportMessageContextExtensions.TryGetIncomingPhysicalMessage(NServiceBus.Pipeline.IOutgoingPhysicalMessageContext,NServiceBus.Transport.IncomingMessage@)">
            <summary>
            Returns the incoming physical message if there is one currently processed.
            </summary>
        </member>
        <member name="T:NServiceBus.Pipeline.IInvokeHandlerContext">
            <summary>
            A context of handling a logical message by a handler.
            </summary>
        </member>
        <member name="P:NServiceBus.Pipeline.IInvokeHandlerContext.MessageHandler">
            <summary>
            The current <see cref="T:NServiceBus.IHandleMessages`1" /> being executed.
            </summary>
        </member>
        <member name="P:NServiceBus.Pipeline.IInvokeHandlerContext.Headers">
            <summary>
            Message headers.
            </summary>
        </member>
        <member name="P:NServiceBus.Pipeline.IInvokeHandlerContext.MessageBeingHandled">
            <summary>
            The message instance being handled.
            </summary>
        </member>
        <member name="P:NServiceBus.Pipeline.IInvokeHandlerContext.HandleCurrentMessageLaterWasCalled">
            <summary>
            Indicates whether <see cref="M:NServiceBus.IMessageHandlerContext.HandleCurrentMessageLater" /> has been called.
            </summary>
        </member>
        <member name="P:NServiceBus.Pipeline.IInvokeHandlerContext.HandlerInvocationAborted">
            <summary>
            <code>true</code> if <see cref="M:NServiceBus.IMessageHandlerContext.DoNotContinueDispatchingCurrentMessageToHandlers" /> or
            <see cref="M:NServiceBus.IMessageHandlerContext.HandleCurrentMessageLater" /> has been called.
            </summary>
        </member>
        <member name="P:NServiceBus.Pipeline.IInvokeHandlerContext.MessageMetadata">
            <summary>
            Metadata for the incoming message.
            </summary>
        </member>
        <member name="T:NServiceBus.Pipeline.IIncomingLogicalMessageContext">
            <summary>
            A context of behavior execution in logical message processing stage.
            </summary>
        </member>
        <member name="P:NServiceBus.Pipeline.IIncomingLogicalMessageContext.Message">
            <summary>
            Message being handled.
            </summary>
        </member>
        <member name="P:NServiceBus.Pipeline.IIncomingLogicalMessageContext.Headers">
            <summary>
            Headers for the incoming message.
            </summary>
        </member>
        <member name="P:NServiceBus.Pipeline.IIncomingLogicalMessageContext.MessageHandled">
            <summary>
            Tells if the message has been handled.
            </summary>
        </member>
        <member name="M:NServiceBus.Pipeline.IIncomingLogicalMessageContext.UpdateMessageInstance(System.Object)">
            <summary>
            Updates the message instance contained in <see cref="T:NServiceBus.Pipeline.LogicalMessage"/>.
            </summary>
            <param name="newInstance">The new instance.</param>
        </member>
        <member name="T:NServiceBus.Pipeline.IIncomingPhysicalMessageContext">
            <summary>
            A context of behavior execution in physical message processing stage.
            </summary>
        </member>
        <member name="P:NServiceBus.Pipeline.IIncomingPhysicalMessageContext.Message">
            <summary>
            The physical message being processed.
            </summary>
        </member>
        <member name="M:NServiceBus.Pipeline.IIncomingPhysicalMessageContext.UpdateMessage(System.Byte[])">
            <summary>
            Updates the message with the given body.
            </summary>
        </member>
        <member name="T:NServiceBus.Pipeline.IBatchDispatchContext">
            <summary>
            Pipeline context for dispatching pending transport operations captured during message processing.
            </summary>
        </member>
        <member name="P:NServiceBus.Pipeline.IBatchDispatchContext.Operations">
            <summary>
            The captured transport operations to dispatch.
            </summary>
        </member>
        <member name="T:NServiceBus.Pipeline.IOutgoingPhysicalMessageContext">
            <summary>
            Represent the part of the outgoing pipeline where the message has been serialized to a byte[].
            </summary>
        </member>
        <member name="P:NServiceBus.Pipeline.IOutgoingPhysicalMessageContext.Body">
            <summary>
            The serialized body of the outgoing message.
            </summary>
            <summary>
            A <see cref="T:System.Byte" /> array containing the serialized contents of the outgoing message.
            </summary>
        </member>
        <member name="P:NServiceBus.Pipeline.IOutgoingPhysicalMessageContext.RoutingStrategies">
            <summary>
            The routing strategies for this message.
            </summary>
        </member>
        <member name="M:NServiceBus.Pipeline.IOutgoingPhysicalMessageContext.UpdateMessage(System.Byte[])">
            <summary>
            Updates the message with the given body.
            </summary>
        </member>
        <member name="T:NServiceBus.Pipeline.IDispatchContext">
            <summary>
            Context for the immediate dispatch part of the pipeline.
            </summary>
        </member>
        <member name="P:NServiceBus.Pipeline.IDispatchContext.Operations">
            <summary>
            The operations to be dispatched to the transport.
            </summary>
        </member>
        <member name="T:NServiceBus.Pipeline.IBehavior`2">
            <summary>
            This is the base interface to implement to create a behavior that can be registered in a pipeline.
            </summary>
            <typeparam name="TInContext">The type of context that this behavior should receive.</typeparam>
            <typeparam name="TOutContext">The type of context that this behavior should output.</typeparam>
        </member>
        <member name="M:NServiceBus.Pipeline.IBehavior`2.Invoke(`0,System.Func{`1,System.Threading.Tasks.Task})">
            <summary>
            Called when the behavior is executed.
            </summary>
            <param name="context">The current context.</param>
            <param name="next">The next <see cref="T:NServiceBus.Pipeline.IBehavior`2" /> in the chain to execute.</param>
        </member>
        <member name="T:NServiceBus.Pipeline.IBehavior">
            <summary>
            Base interface for all behaviors.
            </summary>
        </member>
        <member name="T:NServiceBus.Pipeline.IForwardingContext">
            <summary>
            Provide context to behaviors on the forwarding pipeline.
            </summary>
        </member>
        <member name="P:NServiceBus.Pipeline.IForwardingContext.Message">
            <summary>
            The message to be forwarded.
            </summary>
        </member>
        <member name="P:NServiceBus.Pipeline.IForwardingContext.Address">
            <summary>
            The address of the forwarding queue.
            </summary>
        </member>
        <member name="T:NServiceBus.Pipeline.OutgoingLogicalMessage">
            <summary>
            Represents a logical message about to be push out to the transport.
            </summary>
        </member>
        <member name="M:NServiceBus.Pipeline.OutgoingLogicalMessage.#ctor(System.Type,System.Object)">
            <summary>
            Initializes the message with a explicit message type and instance. Use this constructor if the message type is
            different from the instance type.
            </summary>
        </member>
        <member name="P:NServiceBus.Pipeline.OutgoingLogicalMessage.MessageType">
            <summary>
            The <see cref="T:System.Type" /> of the message instance.
            </summary>
        </member>
        <member name="P:NServiceBus.Pipeline.OutgoingLogicalMessage.Instance">
            <summary>
            The message instance.
            </summary>
        </member>
        <member name="T:NServiceBus.Pipeline.IOutgoingSendContext">
            <summary>
            Pipeline context for send operations.
            </summary>
        </member>
        <member name="P:NServiceBus.Pipeline.IOutgoingSendContext.Message">
            <summary>
            The message being sent.
            </summary>
        </member>
        <member name="T:NServiceBus.Pipeline.IOutgoingReplyContext">
            <summary>
            Pipeline context for reply operations.
            </summary>
        </member>
        <member name="P:NServiceBus.Pipeline.IOutgoingReplyContext.Message">
            <summary>
            The reply message.
            </summary>
        </member>
        <member name="T:NServiceBus.Pipeline.IOutgoingPublishContext">
            <summary>
            Pipeline context for publish operations.
            </summary>
        </member>
        <member name="P:NServiceBus.Pipeline.IOutgoingPublishContext.Message">
            <summary>
            The message to be published.
            </summary>
        </member>
        <member name="T:NServiceBus.Pipeline.PipelineTerminator`1">
            <summary>
            Marks the inner most behavior of the pipeline.
            </summary>
            <typeparam name="T">The pipeline context type to terminate.</typeparam>
        </member>
        <member name="M:NServiceBus.Pipeline.PipelineTerminator`1.Terminate(`0)">
            <summary>
            This method will be the final one to be called before the pipeline starts to travers back up the "stack".
            </summary>
            <param name="context">The current context.</param>
        </member>
        <member name="M:NServiceBus.Pipeline.PipelineTerminator`1.Invoke(`0,System.Func{NServiceBus.Pipeline.PipelineTerminator{`0}.ITerminatingContext,System.Threading.Tasks.Task})">
            <summary>
            Invokes the terminate method.
            </summary>
            <param name="context">Context object.</param>
            <param name="next">Ignored since there by definition is no next behavior to call.</param>
        </member>
        <member name="T:NServiceBus.Pipeline.PipelineTerminator`1.ITerminatingContext">
            <summary>
            A wellknow context that terminates the pipeline.
            </summary>
        </member>
        <member name="T:NServiceBus.Pipeline.IOutgoingLogicalMessageContext">
            <summary>
            Outgoing pipeline context.
            </summary>
        </member>
        <member name="P:NServiceBus.Pipeline.IOutgoingLogicalMessageContext.Message">
            <summary>
            The outgoing message.
            </summary>
        </member>
        <member name="P:NServiceBus.Pipeline.IOutgoingLogicalMessageContext.RoutingStrategies">
            <summary>
            The routing strategies for this message.
            </summary>
        </member>
        <member name="M:NServiceBus.Pipeline.IOutgoingLogicalMessageContext.UpdateMessage(System.Object)">
            <summary>
            Updates the message instance.
            </summary>
        </member>
        <member name="T:NServiceBus.Pipeline.IIncomingContext">
            <summary>
            The base interface for everything after the transport receive phase.
            </summary>
        </member>
        <member name="T:NServiceBus.Pipeline.ITransportReceiveContext">
            <summary>
            Context containing a physical message.
            </summary>
        </member>
        <member name="P:NServiceBus.Pipeline.ITransportReceiveContext.Message">
            <summary>
            The physical message being processed.
            </summary>
        </member>
        <member name="M:NServiceBus.Pipeline.ITransportReceiveContext.AbortReceiveOperation">
            <summary>
            Allows the pipeline to flag that it has been aborted and the receive operation should be rolled back.
            </summary>
        </member>
        <member name="T:NServiceBus.Pipeline.StageConnector`2">
            <summary>
            Connects two stages of the pipeline.
            </summary>
        </member>
        <member name="M:NServiceBus.Pipeline.StageConnector`2.Invoke(`0,System.Func{`1,System.Threading.Tasks.Task})">
            <summary>
            Contains information about the pipeline this behavior is part of.
            </summary>
            <inheritdoc />
        </member>
        <member name="T:NServiceBus.Pipeline.ISubscribeContext">
            <summary>
            Provides context for subscription requests.
            </summary>
        </member>
        <member name="P:NServiceBus.Pipeline.ISubscribeContext.EventType">
            <summary>
            The type of the event.
            </summary>
        </member>
        <member name="T:NServiceBus.Pipeline.IUnsubscribeContext">
            <summary>
            Provides context for unsubscribe requests.
            </summary>
        </member>
        <member name="P:NServiceBus.Pipeline.IUnsubscribeContext.EventType">
            <summary>
            The type of the event.
            </summary>
        </member>
        <member name="T:NServiceBus.Pipeline.IRoutingContext">
            <summary>
            Context for the routing part of the pipeline.
            </summary>
        </member>
        <member name="P:NServiceBus.Pipeline.IRoutingContext.Message">
            <summary>
            The message to dispatch the the transport.
            </summary>
        </member>
        <member name="P:NServiceBus.Pipeline.IRoutingContext.RoutingStrategies">
            <summary>
            The routing strategies for the operation to be dispatched.
            </summary>
        </member>
        <member name="T:NServiceBus.Pipeline.IBehaviorContext">
            <summary>
            Base interface for a pipeline behavior.
            </summary>
        </member>
        <member name="P:NServiceBus.Pipeline.IBehaviorContext.Builder">
            <summary>
            The current <see cref="T:NServiceBus.ObjectBuilder.IBuilder" />.
            </summary>
        </member>
        <member name="T:NServiceBus.Pipeline.PipelineSettings">
            <summary>
            Manages the pipeline configuration.
            </summary>
        </member>
        <member name="M:NServiceBus.Pipeline.PipelineSettings.#ctor(NServiceBus.PipelineModifications)">
            <summary>
            Initializes a new instance of <see cref="T:NServiceBus.Pipeline.PipelineSettings" />.
            </summary>
        </member>
        <member name="M:NServiceBus.Pipeline.PipelineSettings.Remove(System.String)">
            <summary>
            Removes the specified step from the pipeline.
            </summary>
            <param name="stepId">The identifier of the step to remove.</param>
        </member>
        <member name="M:NServiceBus.Pipeline.PipelineSettings.Replace(System.String,System.Type,System.String)">
            <summary>
            Replaces an existing step behavior with a new one.
            </summary>
            <param name="stepId">The identifier of the step to replace its implementation.</param>
            <param name="newBehavior">The new <see cref="T:NServiceBus.Pipeline.Behavior`1" /> to use.</param>
            <param name="description">The description of the new behavior.</param>
        </member>
        <member name="M:NServiceBus.Pipeline.PipelineSettings.Replace``1(System.String,``0,System.String)">
            <summary>
            Replaces an existing step behavior with a new one.
            </summary>
            <param name="stepId">The identifier of the step to replace its implementation.</param>
            <param name="newBehavior">The new <see cref="T:NServiceBus.Pipeline.Behavior`1" /> to use.</param>
            <param name="description">The description of the new behavior.</param>
        </member>
        <member name="M:NServiceBus.Pipeline.PipelineSettings.Replace``1(System.String,System.Func{NServiceBus.ObjectBuilder.IBuilder,``0},System.String)">
            <summary>
            Replaces an existing step behavior with a new one.
            </summary>
            <param name="stepId">The identifier of the step to replace its implementation.</param>
            <param name="factoryMethod">The factory method to create new instances of the behavior.</param>
            <param name="description">The description of the new behavior.</param>
        </member>
        <member name="M:NServiceBus.Pipeline.PipelineSettings.Register(System.Type,System.String)">
            <summary>
            Register a new step into the pipeline.
            </summary>
            <param name="behavior">The <see cref="T:NServiceBus.Pipeline.Behavior`1" /> to execute.</param>
            <param name="description">The description of the behavior.</param>
        </member>
        <member name="M:NServiceBus.Pipeline.PipelineSettings.Register(System.String,System.Type,System.String)">
            <summary>
            Register a new step into the pipeline.
            </summary>
            <param name="stepId">The identifier of the new step to add.</param>
            <param name="behavior">The <see cref="T:NServiceBus.Pipeline.Behavior`1" /> to execute.</param>
            <param name="description">The description of the behavior.</param>
        </member>
        <member name="M:NServiceBus.Pipeline.PipelineSettings.Register``1(System.Func{NServiceBus.ObjectBuilder.IBuilder,``0},System.String)">
            <summary>
            Register a new step into the pipeline.
            </summary>
            <param name="factoryMethod">A callback that creates the behavior instance.</param>
            <param name="description">The description of the behavior.</param>
        </member>
        <member name="M:NServiceBus.Pipeline.PipelineSettings.Register``1(System.String,System.Func{NServiceBus.ObjectBuilder.IBuilder,``0},System.String)">
            <summary>
            Register a new step into the pipeline.
            </summary>
            <param name="stepId">The identifier of the new step to add.</param>
            <param name="factoryMethod">A callback that creates the behavior instance.</param>
            <param name="description">The description of the behavior.</param>
        </member>
        <member name="M:NServiceBus.Pipeline.PipelineSettings.Register``1(``0,System.String)">
            <summary>
            Register a new step into the pipeline.
            </summary>
            <param name="behavior">The behavior instance.</param>
            <param name="description">The description of the behavior.</param>
        </member>
        <member name="M:NServiceBus.Pipeline.PipelineSettings.Register``1(System.String,``0,System.String)">
            <summary>
            Register a new step into the pipeline.
            </summary>
            <param name="stepId">The identifier of the new step to add.</param>
            <param name="behavior">The behavior instance.</param>
            <param name="description">The description of the behavior.</param>
        </member>
        <member name="M:NServiceBus.Pipeline.PipelineSettings.Register``1">
            <summary>
            Register a new step into the pipeline.
            </summary>
        </member>
        <member name="M:NServiceBus.Pipeline.PipelineSettings.Register(NServiceBus.Pipeline.RegisterStep)">
            <summary>
            Register a new step into the pipeline.
            </summary>
            <param name="registration">The step registration.</param>
        </member>
        <member name="T:NServiceBus.Pipeline.RegisterStep">
            <summary>
            Base class to do an advance registration of a step.
            </summary>
        </member>
        <member name="M:NServiceBus.Pipeline.RegisterStep.#ctor(System.String,System.Type,System.String,System.Func{NServiceBus.ObjectBuilder.IBuilder,NServiceBus.Pipeline.IBehavior})">
            <summary>
            Initializes a new instance of the <see cref="T:NServiceBus.Pipeline.RegisterStep" /> class.
            </summary>
            <param name="stepId">The unique identifier for this steps.</param>
            <param name="behavior">The type of <see cref="T:NServiceBus.Pipeline.Behavior`1" /> to register.</param>
            <param name="description">A brief description of what this step does.</param>
            <param name="factoryMethod">A factory method for creating the behavior.</param>
        </member>
        <member name="P:NServiceBus.Pipeline.RegisterStep.StepId">
            <summary>
            Gets the unique identifier for this step.
            </summary>
        </member>
        <member name="P:NServiceBus.Pipeline.RegisterStep.Description">
            <summary>
            Gets the description for this registration.
            </summary>
        </member>
        <member name="P:NServiceBus.Pipeline.RegisterStep.BehaviorType">
            <summary>
            Gets the type of <see cref="T:NServiceBus.Pipeline.Behavior`1" /> that is being registered.
            </summary>
        </member>
        <member name="M:NServiceBus.Pipeline.RegisterStep.IsEnabled(NServiceBus.Settings.ReadOnlySettings)">
            <summary>
            Checks if this behavior is enabled.
            </summary>
        </member>
        <member name="M:NServiceBus.Pipeline.RegisterStep.InsertBeforeIfExists(System.String)">
            <summary>
            Instructs the pipeline to register this step before the <paramref name="id" /> one. If the <paramref name="id" /> does
            not exist, this condition is ignored.
            </summary>
            <param name="id">The unique identifier of the step that we want to insert before.</param>
        </member>
        <member name="M:NServiceBus.Pipeline.RegisterStep.InsertBefore(System.String)">
            <summary>
            Instructs the pipeline to register this step before the <paramref name="id" /> one.
            </summary>
        </member>
        <member name="M:NServiceBus.Pipeline.RegisterStep.InsertAfterIfExists(System.String)">
            <summary>
            Instructs the pipeline to register this step after the <paramref name="id" /> one. If the <paramref name="id" /> does
            not exist, this condition is ignored.
            </summary>
            <param name="id">The unique identifier of the step that we want to insert after.</param>
        </member>
        <member name="M:NServiceBus.Pipeline.RegisterStep.InsertAfter(System.String)">
            <summary>
            Instructs the pipeline to register this step after the <paramref name="id" /> one.
            </summary>
        </member>
        <member name="T:NServiceBus.Pipeline.LogicalMessage">
            <summary>
            The logical message.
            </summary>
        </member>
        <member name="M:NServiceBus.Pipeline.LogicalMessage.#ctor(NServiceBus.Unicast.Messages.MessageMetadata,System.Object)">
            <summary>
            Create a new <see cref="T:NServiceBus.Pipeline.LogicalMessage"/> instance containing a message object and it's corresponding <see cref="T:NServiceBus.Unicast.Messages.MessageMetadata"/>.
            </summary>
        </member>
        <member name="P:NServiceBus.Pipeline.LogicalMessage.MessageType">
            <summary>
            The <see cref="T:System.Type" /> of the message instance.
            </summary>
        </member>
        <member name="P:NServiceBus.Pipeline.LogicalMessage.Metadata">
            <summary>
            Message metadata.
            </summary>
        </member>
        <member name="P:NServiceBus.Pipeline.LogicalMessage.Instance">
            <summary>
            The message instance.
            </summary>
        </member>
        <member name="M:NServiceBus.Pipeline.LogicalMessage.UpdateMessageInstance(System.Object)">
            <summary>
            Updates the message instance.
            </summary>
            <param name="newInstance">The new instance.</param>
        </member>
        <member name="T:NServiceBus.Pipeline.MessageHandler">
            <summary>
            Represents a message handler and its invocation.
            </summary>
        </member>
        <member name="M:NServiceBus.Pipeline.MessageHandler.#ctor(System.Func{System.Object,System.Object,NServiceBus.IMessageHandlerContext,System.Threading.Tasks.Task},System.Type)">
            <summary>
            Creates a new instance of the message handler with predefined invocation delegate and handler type.
            </summary>
            <param name="invocation">The invocation with context delegate.</param>
            <param name="handlerType">The handler type.</param>
        </member>
        <member name="P:NServiceBus.Pipeline.MessageHandler.Instance">
            <summary>
            The actual instance, can be a saga, a timeout or just a plain handler.
            </summary>
        </member>
        <member name="P:NServiceBus.Pipeline.MessageHandler.HandlerType">
            <summary>
            The handler type, can be a saga, a timeout or just a plain handler.
            </summary>
        </member>
        <member name="M:NServiceBus.Pipeline.MessageHandler.Invoke(System.Object,NServiceBus.IMessageHandlerContext)">
            <summary>
            Invokes the message handler.
            </summary>
            <param name="message">the message to pass to the handler.</param>
            <param name="handlerContext">the context to pass to the handler.</param>
        </member>
        <member name="T:NServiceBus.Pipeline.LogicalMessageFactory">
            <summary>
            Factory to create <see cref="T:NServiceBus.Pipeline.LogicalMessage" />s.
            </summary>
        </member>
        <member name="M:NServiceBus.Pipeline.LogicalMessageFactory.#ctor(NServiceBus.Unicast.Messages.MessageMetadataRegistry,NServiceBus.MessageInterfaces.IMessageMapper)">
            <summary>
            Initializes a new instance of <see cref="T:NServiceBus.Pipeline.LogicalMessageFactory" />.
            </summary>
        </member>
        <member name="M:NServiceBus.Pipeline.LogicalMessageFactory.Create(System.Object)">
            <summary>
            Creates a new <see cref="T:NServiceBus.Pipeline.LogicalMessage" /> using the specified message instance.
            </summary>
            <param name="message">The message instance.</param>
            <returns>A new <see cref="T:NServiceBus.Pipeline.LogicalMessage" />.</returns>
        </member>
        <member name="M:NServiceBus.Pipeline.LogicalMessageFactory.Create(System.Type,System.Object)">
            <summary>
            Creates a new <see cref="T:NServiceBus.Pipeline.LogicalMessage" /> using the specified messageType, message instance and headers.
            </summary>
            <param name="messageType">The message type.</param>
            <param name="message">The message instance.</param>
            <returns>A new <see cref="T:NServiceBus.Pipeline.LogicalMessage" />.</returns>
        </member>
        <member name="T:NServiceBus.Pipeline.Behavior`1">
            <summary>
            This is the base interface to implement to create a <see cref="T:NServiceBus.Pipeline.IBehavior" /> that can be registered in a pipeline.
            </summary>
            <typeparam name="TContext">The context that this <see cref="T:NServiceBus.Pipeline.IBehavior" /> should receive.</typeparam>
        </member>
        <member name="M:NServiceBus.Pipeline.Behavior`1.Invoke(`0,System.Func{`0,System.Threading.Tasks.Task})">
            <summary>
            Called when the behavior is executed.
            </summary>
            <param name="context">The current context.</param>
            <param name="next">The next <see cref="T:NServiceBus.Pipeline.IBehavior`2" /> in the chain to execute.</param>
        </member>
        <member name="M:NServiceBus.Pipeline.Behavior`1.Invoke(`0,System.Func{System.Threading.Tasks.Task})">
            <summary>
            Called when the behavior is executed.
            </summary>
            <param name="context">The current context.</param>
            <param name="next">The next <see cref="!:IBehavior{TContext}" /> in the chain to execute.</param>
        </member>
        <member name="M:NServiceBus.AuditContext.AddAuditData(System.String,System.String)">
            <summary>
            Adds information about the current message that should be audited.
            </summary>
            <param name="key">The audit key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:NServiceBus.ConfigureAudit">
            <summary>
            Contains extension methods to <see cref="T:NServiceBus.EndpointConfiguration" />.
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureAudit.AuditProcessedMessagesTo(NServiceBus.EndpointConfiguration,System.String,System.Nullable{System.TimeSpan})">
            <summary>
            Configure Audit settings.
            </summary>
            <param name="config">The <see cref="T:NServiceBus.EndpointConfiguration" /> instance to apply the settings to.</param>
            <param name="auditQueue">The name of the audit queue to use.</param>
            <param name="timeToBeReceived">The custom TTR to use for messages sent to the audit queue.</param>
        </member>
        <member name="T:NServiceBus.TimeoutManagerConfiguration">
            <summary>
            Allows configuration of the timeout manager.
            </summary>
        </member>
        <member name="M:NServiceBus.TimeoutManagerConfiguration.#ctor(NServiceBus.Settings.SettingsHolder)">
            <summary>
            Creates a new instance of <see cref="T:NServiceBus.TimeoutManagerConfiguration"/>.
            </summary>
        </member>
        <member name="T:NServiceBus.TimeoutManagerConfigurationExtensions">
            <summary>
            Extensions to configure the timeout manager via <see cref="T:NServiceBus.TimeoutManagerConfiguration"/>.
            </summary>
        </member>
        <member name="M:NServiceBus.TimeoutManagerConfigurationExtensions.TimeoutManager(NServiceBus.EndpointConfiguration)">
            <summary>
            Configures the timeout manager.
            </summary>
        </member>
        <member name="M:NServiceBus.TimeoutManagerConfigurationExtensions.LimitMessageProcessingConcurrencyTo(NServiceBus.TimeoutManagerConfiguration,System.Int32)">
            <summary>
            Configures the allowed number of concurrent messages for the timeout manager's satellite queues. The default value is specified in <see cref="P:NServiceBus.Transport.PushRuntimeSettings.Default"/>.
            </summary>
            <param name="timeoutManagerConfiguration">The settings to extend.</param>
            <param name="maxConcurrency">The maximum number of processed messages per satellite queue.</param>
        </member>
        <member name="T:NServiceBus.Notifications">
            <summary>
            Notifications.
            </summary>
        </member>
        <member name="P:NServiceBus.Notifications.Errors">
            <summary>
            Push-based error notifications.
            </summary>
        </member>
        <member name="T:NServiceBus.ICriticalErrorContext">
            <summary>
            The context of a critical error handler used by <see cref="M:NServiceBus.ConfigureCriticalErrorAction.DefineCriticalErrorAction(NServiceBus.EndpointConfiguration,System.Func{NServiceBus.ICriticalErrorContext,System.Threading.Tasks.Task})"/>.
            </summary>
        </member>
        <member name="P:NServiceBus.ICriticalErrorContext.Stop">
            <summary>
            A delegate that optionally stops the endpoint. By default this is a pointer <see cref="M:NServiceBus.IEndpointInstance.Stop"/>.
            </summary>
        </member>
        <member name="P:NServiceBus.ICriticalErrorContext.Error">
            <summary>
            A description of the error.
            </summary>
        </member>
        <member name="P:NServiceBus.ICriticalErrorContext.Exception">
            <summary>
            The last <see cref="P:NServiceBus.ICriticalErrorContext.Exception"/> that cause the error.
            </summary>
        </member>
        <member name="T:NServiceBus.Endpoint">
            <summary>
            Provides factory methods for creating and starting endpoint instances.
            </summary>
        </member>
        <member name="M:NServiceBus.Endpoint.Create(NServiceBus.EndpointConfiguration)">
            <summary>
            Creates a new startable endpoint based on the provided configuration.
            </summary>
            <param name="configuration">Configuration.</param>
        </member>
        <member name="M:NServiceBus.Endpoint.Start(NServiceBus.EndpointConfiguration)">
            <summary>
            Creates and starts a new endpoint based on the provided configuration.
            </summary>
            <param name="configuration">Configuration.</param>
        </member>
        <member name="T:NServiceBus.ConfigureForwarding">
            <summary>
            Contains extension methods to <see cref="T:NServiceBus.EndpointConfiguration" />.
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureForwarding.ForwardReceivedMessagesTo(NServiceBus.EndpointConfiguration,System.String)">
            <summary>
            Sets the address to which received messages will be forwarded.
            </summary>
            <param name="config">The <see cref="T:NServiceBus.EndpointConfiguration" /> instance to apply the settings to.</param>
            <param name="address">The address to forward successfully processed messages to.</param>
        </member>
        <member name="M:NServiceBus.PipelineExecutionExtensions.CreatePipelineExecutionExpression(NServiceBus.Pipeline.IBehavior[],System.Collections.Generic.List{System.Linq.Expressions.Expression})">
            <code>
            rootContext
               => behavior1.Invoke(rootContext,
                  context1 => behavior2.Invoke(context1,
                   ...
                     context{N} => behavior{N}.Invoke(context{N},
                        context{N+1} => TaskEx.Completed))
            </code>
        </member>
        <member name="M:NServiceBus.PipelineExecutionExtensions.CreateBehaviorCallDelegate(NServiceBus.Pipeline.IBehavior,System.Reflection.MethodInfo,System.Linq.Expressions.ParameterExpression,System.Delegate,System.Collections.Generic.List{System.Linq.Expressions.Expression})">
            <code>
            context{i} => behavior.Invoke(context{i}, context{i+1} => previous)
            </code>>
        </member>
        <member name="M:NServiceBus.PipelineExecutionExtensions.CreateDoneDelegate(System.Type,System.Int32)">
            <code>
            context{i} => return TaskEx.CompletedTask;
            </code>>
        </member>
        <member name="T:NServiceBus.ConnectorContextExtensions">
            <summary>
            Contains extensions methods to map behavior contexts.
            </summary>
        </member>
        <member name="M:NServiceBus.ConnectorContextExtensions.CreateRoutingContext(NServiceBus.Pipeline.ForkConnector{NServiceBus.Pipeline.ITransportReceiveContext,NServiceBus.Pipeline.IRoutingContext},NServiceBus.Transport.OutgoingMessage,System.String,NServiceBus.Pipeline.ITransportReceiveContext)">
            <summary>
            Creates a <see cref="T:NServiceBus.Pipeline.IRoutingContext" /> based on the current context.
            </summary>
        </member>
        <member name="M:NServiceBus.ConnectorContextExtensions.CreateRoutingContext(NServiceBus.Pipeline.StageConnector{NServiceBus.Pipeline.IForwardingContext,NServiceBus.Pipeline.IRoutingContext},NServiceBus.Transport.OutgoingMessage,NServiceBus.Routing.RoutingStrategy,NServiceBus.Pipeline.IForwardingContext)">
            <summary>
            Creates a <see cref="T:NServiceBus.Pipeline.IRoutingContext" /> based on the current context.
            </summary>
        </member>
        <member name="M:NServiceBus.ConnectorContextExtensions.CreateRoutingContext(NServiceBus.Pipeline.StageConnector{NServiceBus.Pipeline.IAuditContext,NServiceBus.Pipeline.IRoutingContext},NServiceBus.Transport.OutgoingMessage,NServiceBus.Routing.RoutingStrategy,NServiceBus.Pipeline.IAuditContext)">
            <summary>
            Creates a <see cref="T:NServiceBus.Pipeline.IRoutingContext" /> based on the current context.
            </summary>
        </member>
        <member name="M:NServiceBus.ConnectorContextExtensions.CreateRoutingContext(NServiceBus.Pipeline.StageConnector{NServiceBus.Pipeline.IOutgoingPhysicalMessageContext,NServiceBus.Pipeline.IRoutingContext},NServiceBus.Transport.OutgoingMessage,System.Collections.Generic.IReadOnlyCollection{NServiceBus.Routing.RoutingStrategy},NServiceBus.Pipeline.IOutgoingPhysicalMessageContext)">
            <summary>
            Creates a <see cref="T:NServiceBus.Pipeline.IRoutingContext" /> based on the current context.
            </summary>
        </member>
        <member name="M:NServiceBus.ConnectorContextExtensions.CreateIncomingPhysicalMessageContext(NServiceBus.Pipeline.StageForkConnector{NServiceBus.Pipeline.ITransportReceiveContext,NServiceBus.Pipeline.IIncomingPhysicalMessageContext,NServiceBus.Pipeline.IBatchDispatchContext},NServiceBus.Transport.IncomingMessage,NServiceBus.Pipeline.ITransportReceiveContext)">
            <summary>
            Creates a <see cref="T:NServiceBus.Pipeline.IIncomingPhysicalMessageContext" /> based on the current context.
            </summary>
        </member>
        <member name="M:NServiceBus.ConnectorContextExtensions.CreateIncomingPhysicalMessageContext(NServiceBus.Pipeline.StageConnector{NServiceBus.Pipeline.ITransportReceiveContext,NServiceBus.Pipeline.IIncomingPhysicalMessageContext},NServiceBus.Transport.IncomingMessage,NServiceBus.Pipeline.ITransportReceiveContext)">
            <summary>
            Creates a <see cref="T:NServiceBus.Pipeline.IIncomingPhysicalMessageContext" /> based on the current context.
            </summary>
        </member>
        <member name="M:NServiceBus.ConnectorContextExtensions.CreateIncomingLogicalMessageContext(NServiceBus.Pipeline.StageConnector{NServiceBus.Pipeline.IIncomingPhysicalMessageContext,NServiceBus.Pipeline.IIncomingLogicalMessageContext},NServiceBus.Pipeline.LogicalMessage,NServiceBus.Pipeline.IIncomingPhysicalMessageContext)">
            <summary>
            Creates a <see cref="T:NServiceBus.Pipeline.IIncomingLogicalMessageContext" /> based on the current context.
            </summary>
        </member>
        <member name="M:NServiceBus.ConnectorContextExtensions.CreateInvokeHandlerContext(NServiceBus.Pipeline.StageConnector{NServiceBus.Pipeline.IIncomingLogicalMessageContext,NServiceBus.Pipeline.IInvokeHandlerContext},NServiceBus.Pipeline.MessageHandler,NServiceBus.Persistence.CompletableSynchronizedStorageSession,NServiceBus.Pipeline.IIncomingLogicalMessageContext)">
            <summary>
            Creates a <see cref="T:NServiceBus.Pipeline.IInvokeHandlerContext" /> based on the current context.
            </summary>
        </member>
        <member name="M:NServiceBus.ConnectorContextExtensions.CreateBatchDispatchContext(NServiceBus.Pipeline.StageForkConnector{NServiceBus.Pipeline.ITransportReceiveContext,NServiceBus.Pipeline.IIncomingPhysicalMessageContext,NServiceBus.Pipeline.IBatchDispatchContext},System.Collections.Generic.IReadOnlyCollection{NServiceBus.Transport.TransportOperation},NServiceBus.Pipeline.IIncomingPhysicalMessageContext)">
            <summary>
            Creates a <see cref="T:NServiceBus.Pipeline.IBatchDispatchContext" /> based on the current context.
            </summary>
        </member>
        <member name="M:NServiceBus.ConnectorContextExtensions.CreateDispatchContext(NServiceBus.Pipeline.StageConnector{NServiceBus.Pipeline.IBatchDispatchContext,NServiceBus.Pipeline.IDispatchContext},System.Collections.Generic.IReadOnlyCollection{NServiceBus.Transport.TransportOperation},NServiceBus.Pipeline.IBatchDispatchContext)">
            <summary>
            Creates a <see cref="T:NServiceBus.Pipeline.IDispatchContext" /> based on the current context.
            </summary>
        </member>
        <member name="M:NServiceBus.ConnectorContextExtensions.CreateDispatchContext(NServiceBus.Pipeline.StageConnector{NServiceBus.Pipeline.IRoutingContext,NServiceBus.Pipeline.IDispatchContext},System.Collections.Generic.IReadOnlyCollection{NServiceBus.Transport.TransportOperation},NServiceBus.Pipeline.IRoutingContext)">
            <summary>
            Creates a <see cref="T:NServiceBus.Pipeline.IDispatchContext" /> based on the current context.
            </summary>
        </member>
        <member name="M:NServiceBus.ConnectorContextExtensions.CreateOutgoingLogicalMessageContext(NServiceBus.Pipeline.StageConnector{NServiceBus.Pipeline.IOutgoingPublishContext,NServiceBus.Pipeline.IOutgoingLogicalMessageContext},NServiceBus.Pipeline.OutgoingLogicalMessage,System.Collections.Generic.IReadOnlyCollection{NServiceBus.Routing.RoutingStrategy},NServiceBus.Pipeline.IOutgoingPublishContext)">
            <summary>
            Creates a <see cref="T:NServiceBus.Pipeline.IOutgoingLogicalMessageContext" /> based on the current context.
            </summary>
        </member>
        <member name="M:NServiceBus.ConnectorContextExtensions.CreateOutgoingLogicalMessageContext(NServiceBus.Pipeline.StageConnector{NServiceBus.Pipeline.IOutgoingReplyContext,NServiceBus.Pipeline.IOutgoingLogicalMessageContext},NServiceBus.Pipeline.OutgoingLogicalMessage,System.Collections.Generic.IReadOnlyCollection{NServiceBus.Routing.RoutingStrategy},NServiceBus.Pipeline.IOutgoingReplyContext)">
            <summary>
            Creates a <see cref="T:NServiceBus.Pipeline.IOutgoingLogicalMessageContext" /> based on the current context.
            </summary>
        </member>
        <member name="M:NServiceBus.ConnectorContextExtensions.CreateOutgoingLogicalMessageContext(NServiceBus.Pipeline.StageConnector{NServiceBus.Pipeline.IOutgoingSendContext,NServiceBus.Pipeline.IOutgoingLogicalMessageContext},NServiceBus.Pipeline.OutgoingLogicalMessage,System.Collections.Generic.IReadOnlyCollection{NServiceBus.Routing.RoutingStrategy},NServiceBus.Pipeline.IOutgoingSendContext)">
            <summary>
            Creates a <see cref="T:NServiceBus.Pipeline.IOutgoingLogicalMessageContext" /> based on the current context.
            </summary>
        </member>
        <member name="M:NServiceBus.ConnectorContextExtensions.CreateOutgoingPhysicalMessageContext(NServiceBus.Pipeline.StageConnector{NServiceBus.Pipeline.IOutgoingLogicalMessageContext,NServiceBus.Pipeline.IOutgoingPhysicalMessageContext},System.Byte[],System.Collections.Generic.IReadOnlyCollection{NServiceBus.Routing.RoutingStrategy},NServiceBus.Pipeline.IOutgoingLogicalMessageContext)">
            <summary>
            Creates a <see cref="T:NServiceBus.Pipeline.IOutgoingPhysicalMessageContext" /> based on the current context.
            </summary>
        </member>
        <member name="M:NServiceBus.ConnectorContextExtensions.CreateAuditContext(NServiceBus.Pipeline.ForkConnector{NServiceBus.Pipeline.IIncomingPhysicalMessageContext,NServiceBus.Pipeline.IAuditContext},NServiceBus.Transport.OutgoingMessage,System.String,NServiceBus.Pipeline.IIncomingPhysicalMessageContext)">
            <summary>
            Creates a <see cref="T:NServiceBus.Pipeline.IAuditContext" /> based on the current context.
            </summary>
        </member>
        <member name="M:NServiceBus.ConnectorContextExtensions.CreateForwardingContext(NServiceBus.Pipeline.ForkConnector{NServiceBus.Pipeline.IIncomingPhysicalMessageContext,NServiceBus.Pipeline.IForwardingContext},NServiceBus.Transport.OutgoingMessage,System.String,NServiceBus.Pipeline.IIncomingPhysicalMessageContext)">
            <summary>
            Creates a <see cref="T:NServiceBus.Pipeline.IForwardingContext" /> based on the current context.
            </summary>
        </member>
        <member name="T:NServiceBus.DelayedConfig">
            <summary>
            Provides information about the delayed retries configuration.
            </summary>
        </member>
        <member name="M:NServiceBus.DelayedConfig.#ctor(System.Int32,System.TimeSpan)">
            <summary>
            Creates a new delayed retries configuration.
            </summary>
            <param name="maxNumberOfRetries">The maximum number of delayed retries.</param>
            <param name="timeIncrease">The time of increase for individual delayed retries.</param>
        </member>
        <member name="P:NServiceBus.DelayedConfig.MaxNumberOfRetries">
            <summary>
            Gets the configured maximum number of immediate retries.
            </summary>
            <remarks>Zero means no retries possible.</remarks>
        </member>
        <member name="P:NServiceBus.DelayedConfig.TimeIncrease">
            <summary>
            Gets the configured time of increase for individual delayed retries.
            </summary>
        </member>
        <member name="T:NServiceBus.DelayedRetriesSettings">
            <summary>
            Configuration settings for Delayed Retries.
            </summary>
        </member>
        <member name="M:NServiceBus.DelayedRetriesSettings.NumberOfRetries(System.Int32)">
            <summary>
            Configures the number of times a message should be retried with a delay after failing Immediate Retries.
            </summary>
        </member>
        <member name="M:NServiceBus.DelayedRetriesSettings.TimeIncrease(System.TimeSpan)">
            <summary>
            Configures the delay interval increase for each failed Delayed Retries attempt.
            </summary>
        </member>
        <member name="T:NServiceBus.FailedConfig">
            <summary>
            Provides information about the fault configuration.
            </summary>
        </member>
        <member name="M:NServiceBus.FailedConfig.#ctor(System.String)">
            <summary>
            Creates a new fault configuration.
            </summary>
            <param name="errorQueue">The address of the error queue.</param>
        </member>
        <member name="P:NServiceBus.FailedConfig.ErrorQueue">
            <summary>
            Gets the configured standard error queue.
            </summary>
        </member>
        <member name="T:NServiceBus.ImmediateConfig">
            <summary>
            Provides information about the immediate retries configuration.
            </summary>
        </member>
        <member name="M:NServiceBus.ImmediateConfig.#ctor(System.Int32)">
            <summary>
            Creates a new immediate retries configuration.
            </summary>
            <param name="maxNumberOfRetries">The maximum number of immediate retries.</param>
        </member>
        <member name="P:NServiceBus.ImmediateConfig.MaxNumberOfRetries">
            <summary>
            Gets the configured maximum number of immediate retries.
            </summary>
            <remarks>Zero means no retries possible.</remarks>
        </member>
        <member name="T:NServiceBus.ImmediateRetriesSettings">
            <summary>
            Configuration settings for Immediate Retries.
            </summary>
        </member>
        <member name="M:NServiceBus.ImmediateRetriesSettings.NumberOfRetries(System.Int32)">
            <summary>
            Configures the amount of times a message should be immediately retried after failing
            before escalating to Delayed Retries.
            </summary>
            <param name="numberOfRetries">The number of times to immediately retry a failed message.</param>
        </member>
        <member name="T:NServiceBus.RecoverabilityConfig">
            <summary>
            Provides information about the recoverability configuration.
            </summary>
        </member>
        <member name="M:NServiceBus.RecoverabilityConfig.#ctor(NServiceBus.ImmediateConfig,NServiceBus.DelayedConfig,NServiceBus.FailedConfig)">
            <summary>
            Creates a new recoverability configuration.
            </summary>
            <param name="immediateConfig">The immediate retries configuration.</param>
            <param name="delayedConfig">The delayed retries configuration.</param>
            <param name="failedConfig">The failed retries configuration.</param>
        </member>
        <member name="P:NServiceBus.RecoverabilityConfig.Immediate">
            <summary>
            Exposes the immediate retries configuration.
            </summary>
        </member>
        <member name="P:NServiceBus.RecoverabilityConfig.Delayed">
            <summary>
            Exposes the delayed retries configuration.
            </summary>
        </member>
        <member name="P:NServiceBus.RecoverabilityConfig.Failed">
            <summary>
            Exposes the failed retries configuration.
            </summary>
        </member>
        <member name="T:NServiceBus.RecoverabilityEndpointConfigurationExtensions">
            <summary>
            Extension methods for recoverability which extend <see cref="T:NServiceBus.EndpointConfiguration" />.
            </summary>
        </member>
        <member name="M:NServiceBus.RecoverabilityEndpointConfigurationExtensions.Recoverability(NServiceBus.EndpointConfiguration)">
            <summary>
            Configuration settings for recoverability.
            </summary>
            <param name="configuration">The endpoint configuration.</param>
        </member>
        <member name="T:NServiceBus.RetryFailedSettings">
            <summary>
            Configuration settings for retry faults.
            </summary>
        </member>
        <member name="M:NServiceBus.RetryFailedSettings.HeaderCustomization(System.Action{System.Collections.Generic.Dictionary{System.String,System.String}})">
            <summary>
            Configures a header customization action which gets called after all fault headers have been applied.
            </summary>
            <param name="customization">The customization action.</param>
        </member>
        <member name="T:NServiceBus.DelayedRetry">
            <summary>
            Inidicates recoverability is required to delay retry the current message.
            </summary>
        </member>
        <member name="P:NServiceBus.DelayedRetry.Delay">
            <summary>
            The retry delay.
            </summary>
        </member>
        <member name="T:NServiceBus.ImmediateRetry">
            <summary>
            Inidicates recoverability is required to immediately retry the current message.
            </summary>
        </member>
        <member name="T:NServiceBus.RecoverabilityAction">
            <summary>
            Abstraction representing any recoverability action.
            </summary>
        </member>
        <member name="M:NServiceBus.RecoverabilityAction.#ctor">
            <summary>
            Initializes a new instance of a recoverability action.
            </summary>
        </member>
        <member name="M:NServiceBus.RecoverabilityAction.ImmediateRetry">
            <summary>
            Creates an immediate retry recoverability action.
            </summary>
            <returns>Immediate retry action.</returns>
        </member>
        <member name="M:NServiceBus.RecoverabilityAction.DelayedRetry(System.TimeSpan)">
            <summary>
            Creates a new delayed retry recoverability action.
            </summary>
            <param name="timeSpan">Delivery delay.</param>
            <returns>Delayed retry action.</returns>
        </member>
        <member name="M:NServiceBus.RecoverabilityAction.MoveToError(System.String)">
            <summary>
            Creates a move to error recoverability action.
            </summary>
            <param name="errorQueue">The address of the error queue.</param>
            <returns>Move to error action.</returns>
        </member>
        <member name="T:NServiceBus.MoveToError">
            <summary>
            Indicates that recoverability is required to move the current message to the error queue.
            </summary>
        </member>
        <member name="P:NServiceBus.MoveToError.ErrorQueue">
            <summary>
            Defines the error queue where the message should be move to.
            </summary>
        </member>
        <member name="T:NServiceBus.DefaultRecoverabilityPolicy">
            <summary>
            The default recoverability policy.
            </summary>
        </member>
        <member name="M:NServiceBus.DefaultRecoverabilityPolicy.Invoke(NServiceBus.RecoverabilityConfig,NServiceBus.Transport.ErrorContext)">
            <summary>
            Invokes the default recovery policy.
            </summary>
            <param name="config">The recoverability configuration.</param>
            <param name="errorContext">The error context.</param>
            <returns>The recoverability action.</returns>
        </member>
        <member name="T:NServiceBus.RecoverabilitySettings">
            <summary>
            Configuration settings for recoverability.
            </summary>
        </member>
        <member name="M:NServiceBus.RecoverabilitySettings.Failed(System.Action{NServiceBus.RetryFailedSettings})">
            <summary>
            Exposes the retry failed settings.
            </summary>
        </member>
        <member name="M:NServiceBus.RecoverabilitySettings.Immediate(System.Action{NServiceBus.ImmediateRetriesSettings})">
            <summary>
            Exposes the immediate retries settings.
            </summary>
        </member>
        <member name="M:NServiceBus.RecoverabilitySettings.Delayed(System.Action{NServiceBus.DelayedRetriesSettings})">
            <summary>
            Exposes the delayed retries settings.
            </summary>
        </member>
        <member name="M:NServiceBus.RecoverabilitySettings.CustomPolicy(System.Func{NServiceBus.RecoverabilityConfig,NServiceBus.Transport.ErrorContext,NServiceBus.RecoverabilityAction})">
            <summary>
            Configures a custom recoverability policy. It allows to take full control over the recoverability decision process.
            </summary>
            <param name="custom">The custom recoverability.</param>
        </member>
        <member name="M:NServiceBus.RecoverabilitySettings.DisableLegacyRetriesSatellite">
            <summary>
            Disables the legacy retries satellite. The retries satellite is enabled by default to prevent in-flight retry messages from being left
            in the .Retries queue when migrating from previous versions of NServiceBus. Further details can be found in the V5 to V6 Upgrade Guide.
            </summary>
        </member>
        <member name="T:NServiceBus.Routing.DistributionContext">
            <summary>
            The context for custom <see cref="T:NServiceBus.Routing.DistributionStrategy" /> implementations.
            </summary>
        </member>
        <member name="M:NServiceBus.Routing.DistributionContext.#ctor(System.String[],NServiceBus.Pipeline.OutgoingLogicalMessage,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Func{NServiceBus.Routing.EndpointInstance,System.String},NServiceBus.Extensibility.ContextBag)">
            <summary>
            Creates a new distribution context.
            </summary>
        </member>
        <member name="P:NServiceBus.Routing.DistributionContext.ReceiverAddresses">
            <summary>
            The receiver addresses that can be taken into account for distribution.
            </summary>
        </member>
        <member name="P:NServiceBus.Routing.DistributionContext.MessageId">
            <summary>
            The id of the outgoing message.
            </summary>
        </member>
        <member name="P:NServiceBus.Routing.DistributionContext.Headers">
            <summary>
            The headers of the outgoing message.
            </summary>
        </member>
        <member name="P:NServiceBus.Routing.DistributionContext.Message">
            <summary>
            The outgoing message.
            </summary>
        </member>
        <member name="P:NServiceBus.Routing.DistributionContext.Context">
            <summary>
            The context bag.
            </summary>
        </member>
        <member name="M:NServiceBus.Routing.DistributionContext.ToTransportAddress(NServiceBus.Routing.EndpointInstance)">
            <summary>
            Converts a given logical address to the transport address.
            </summary>
            <param name="endpointInstance">The endpoint instance.</param>
            <returns>The transport address.</returns>
        </member>
        <member name="T:NServiceBus.Routing.IMessageDrivenSubscriptionTransport">
            <summary>
            Marks the transport as using message-driven pub/sub.
            </summary>
        </member>
        <member name="T:NServiceBus.Routing.MessageDrivenSubscriptions.PublisherTableEntry">
            <summary>
            Represents an entry in a publisher table.
            </summary>
        </member>
        <member name="M:NServiceBus.Routing.MessageDrivenSubscriptions.PublisherTableEntry.#ctor(System.Type,NServiceBus.Routing.MessageDrivenSubscriptions.PublisherAddress)">
            <summary>
            Creates a new entry.
            </summary>
        </member>
        <member name="P:NServiceBus.Routing.MessageDrivenSubscriptions.PublisherTableEntry.EventType">
            <summary>
            Type of event.
            </summary>
        </member>
        <member name="P:NServiceBus.Routing.MessageDrivenSubscriptions.PublisherTableEntry.Address">
            <summary>
            Addres.
            </summary>
        </member>
        <member name="T:NServiceBus.Routing.MessageDrivenSubscriptions.PublisherAddress">
            <summary>
            Represents an address of a publisher.
            </summary>
        </member>
        <member name="M:NServiceBus.Routing.MessageDrivenSubscriptions.PublisherAddress.CreateFromEndpointName(System.String)">
            <summary>
            Creates a new publisher based on the endpoint name.
            </summary>
        </member>
        <member name="M:NServiceBus.Routing.MessageDrivenSubscriptions.PublisherAddress.CreateFromEndpointInstances(NServiceBus.Routing.EndpointInstance[])">
            <summary>
            Creates a new publisher based on a set of endpoint instance names.
            </summary>
        </member>
        <member name="M:NServiceBus.Routing.MessageDrivenSubscriptions.PublisherAddress.CreateFromPhysicalAddresses(System.String[])">
            <summary>
            Creates a new publisher based on a set of physical addresses.
            </summary>
        </member>
        <member name="M:NServiceBus.Routing.MessageDrivenSubscriptions.PublisherAddress.ToString">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:NServiceBus.Routing.MessageDrivenSubscriptions.PublisherAddress.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:NServiceBus.Routing.MessageDrivenSubscriptions.PublisherAddress.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:NServiceBus.Routing.MessageDrivenSubscriptions.Publishers">
            <summary>
            Manages the information about publishers.
            </summary>
        </member>
        <member name="M:NServiceBus.Routing.MessageDrivenSubscriptions.Publishers.AddOrReplacePublishers(System.String,System.Collections.Generic.IList{NServiceBus.Routing.MessageDrivenSubscriptions.PublisherTableEntry})">
            <summary>
            Adds or replaces a set of publisher registrations. The registration set is identified <paramref name="sourceKey"></paramref>.
            If the method is called the first time with a given <paramref name="sourceKey"></paramref>, the registrations are added.
            If the method is called with the same <paramref name="sourceKey"></paramref> multiple times, the publishers registered previously under this key are replaced.
            </summary>
            <param name="sourceKey">Key for this registration source.</param>
            <param name="entries">Entries.</param>
        </member>
        <member name="T:NServiceBus.Routing.RouteTableEntry">
            <summary>
            Represents an entry in a routing table.
            </summary>
        </member>
        <member name="P:NServiceBus.Routing.RouteTableEntry.MessageType">
            <summary>
            Type of message.
            </summary>
        </member>
        <member name="P:NServiceBus.Routing.RouteTableEntry.Route">
            <summary>
            Route for the message type.
            </summary>
        </member>
        <member name="M:NServiceBus.Routing.RouteTableEntry.#ctor(System.Type,NServiceBus.Routing.UnicastRoute)">
            <summary>
            Creates a new entry.
            </summary>
        </member>
        <member name="T:NServiceBus.Routing.Legacy.ConfigureMSMQDistributor">
            <summary>
            Extension methods to configure Distributor.
            </summary>
        </member>
        <member name="M:NServiceBus.Routing.Legacy.ConfigureMSMQDistributor.EnlistWithLegacyMSMQDistributor(NServiceBus.EndpointConfiguration,System.String,System.String,System.Int32)">
            <summary>
            Enlist Worker with Master node defined in the config.
            </summary>
        </member>
        <member name="T:NServiceBus.Routing.MulticastRoutingStrategy">
            <summary>
            A routing strategy for multicast routing.
            </summary>
        </member>
        <member name="M:NServiceBus.Routing.MulticastRoutingStrategy.#ctor(System.Type)">
            <summary>
            Creates new routing strategy.
            </summary>
        </member>
        <member name="M:NServiceBus.Routing.MulticastRoutingStrategy.Apply(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Applies the routing strategy to the message.
            </summary>
            <param name="headers">Message headers.</param>
        </member>
        <member name="T:NServiceBus.Routing.RoutingStrategy">
            <summary>
            An abstraction that defines how a message is going to be routed.
            </summary>
        </member>
        <member name="M:NServiceBus.Routing.RoutingStrategy.Apply(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Applies the routing strategy to the message.
            </summary>
            <param name="headers">Message headers.</param>
        </member>
        <member name="T:NServiceBus.Routing.UnicastRoutingStrategy">
            <summary>
            A routing strategy for unicast routing.
            </summary>
        </member>
        <member name="M:NServiceBus.Routing.UnicastRoutingStrategy.#ctor(System.String)">
            <summary>
            Creates new routing strategy.
            </summary>
        </member>
        <member name="M:NServiceBus.Routing.UnicastRoutingStrategy.Apply(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Applies the routing strategy to the message.
            </summary>
            <param name="headers">Message headers.</param>
        </member>
        <member name="T:NServiceBus.Routing.UnicastRoute">
            <summary>
            A destination of address routing.
            </summary>
        </member>
        <member name="P:NServiceBus.Routing.UnicastRoute.Endpoint">
            <summary>
            The logical endpoint name if present.
            </summary>
        </member>
        <member name="P:NServiceBus.Routing.UnicastRoute.Instance">
            <summary>
            The endpoint instance if present.
            </summary>
        </member>
        <member name="P:NServiceBus.Routing.UnicastRoute.PhysicalAddress">
            <summary>
            The physical address if present.
            </summary>
        </member>
        <member name="M:NServiceBus.Routing.UnicastRoute.CreateFromEndpointName(System.String)">
            <summary>
            Creates a destination based on the name of the endpoint.
            </summary>
            <param name="endpoint">Destination endpoint.</param>
            <returns>The new destination route.</returns>
        </member>
        <member name="M:NServiceBus.Routing.UnicastRoute.CreateFromEndpointInstance(NServiceBus.Routing.EndpointInstance)">
            <summary>
            Creates a destination based on the name of the endpoint instance.
            </summary>
            <param name="instance">Destination instance name.</param>
            <returns>The new destination route.</returns>
        </member>
        <member name="M:NServiceBus.Routing.UnicastRoute.CreateFromPhysicalAddress(System.String)">
            <summary>
            Creates a destination based on the physical address.
            </summary>
            <param name="physicalAddress">Destination physical address.</param>
            <returns>The new destination route.</returns>
        </member>
        <member name="M:NServiceBus.Routing.UnicastRoute.ToString">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:NServiceBus.Routing.SingleInstanceRoundRobinDistributionStrategy">
            <summary>
            Selects a single instance based on a round-robin scheme.
            </summary>
        </member>
        <member name="M:NServiceBus.Routing.SingleInstanceRoundRobinDistributionStrategy.#ctor(System.String,NServiceBus.DistributionStrategyScope)">
            <summary>
            Creates a new <see cref="T:NServiceBus.Routing.SingleInstanceRoundRobinDistributionStrategy"/> instance.
            </summary>
            <param name="endpoint">The name of the endpoint this distribution strategy resolves instances for.</param>
            <param name="scope">The scope for this strategy.</param>
        </member>
        <member name="M:NServiceBus.Routing.SingleInstanceRoundRobinDistributionStrategy.SelectReceiver(System.String[])">
            <summary>
            Selects a destination instance for a message from all known addresses of a logical endpoint.
            </summary>
        </member>
        <member name="T:NServiceBus.Routing.EndpointInstances">
            <summary>
            Stores the information about instances of known endpoints.
            </summary>
        </member>
        <member name="M:NServiceBus.Routing.EndpointInstances.FindInstances(System.String)">
            <summary>
            Returns all known <see cref="T:NServiceBus.Routing.EndpointInstance"/> for a given logical endpoint.
            </summary>
            <param name="endpoint">The logical endpoint name.</param>
            <returns>Returns at least one <see cref="T:NServiceBus.Routing.EndpointInstance"/>.</returns>
        </member>
        <member name="M:NServiceBus.Routing.EndpointInstances.AddOrReplaceInstances(System.String,System.Collections.Generic.IList{NServiceBus.Routing.EndpointInstance})">
            <summary>
            Adds or replaces a set of endpoint instances registered under a given key (registration source ID).
            </summary>
            <param name="sourceKey">Source key.</param>
            <param name="endpointInstances">List of endpoint instances known by this source.</param>
        </member>
        <member name="T:NServiceBus.Routing.UnicastRoutingTable">
            <summary>
            The unicast routing table.
            </summary>
        </member>
        <member name="M:NServiceBus.Routing.UnicastRoutingTable.AddOrReplaceRoutes(System.String,System.Collections.Generic.IList{NServiceBus.Routing.RouteTableEntry})">
            <summary>
            Adds or replaces a set of routes for a given group key. The route set is identified <paramref name="sourceKey"></paramref>.
            If the method is called the first time with a given <paramref name="sourceKey"></paramref>, the routes are added.
            If the method is called with the same <paramref name="sourceKey"></paramref> multiple times, the routes registered previously under this key are replaced.
            </summary>
            <param name="sourceKey">Key for the route source.</param>
            <param name="entries">Group entries.</param>
        </member>
        <member name="T:NServiceBus.Routing.EndpointInstance">
            <summary>
            Represents a name of an endpoint instance.
            </summary>
        </member>
        <member name="M:NServiceBus.Routing.EndpointInstance.#ctor(System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Creates a new endpoint name for a given discriminator.
            </summary>
            <param name="endpoint">The name of the endpoint.</param>
            <param name="discriminator">A specific discriminator for scale-out purposes.</param>
            <param name="properties">A bag of additional properties that differentiate this endpoint instance from other instances.</param>
        </member>
        <member name="P:NServiceBus.Routing.EndpointInstance.Endpoint">
            <summary>
            Returns the name of the endpoint.
            </summary>
        </member>
        <member name="P:NServiceBus.Routing.EndpointInstance.Discriminator">
            <summary>
            A specific discriminator for scale-out purposes.
            </summary>
        </member>
        <member name="P:NServiceBus.Routing.EndpointInstance.Properties">
            <summary>
            Returns all the differentiating properties of this instance.
            </summary>
        </member>
        <member name="M:NServiceBus.Routing.EndpointInstance.SetProperty(System.String,System.String)">
            <summary>
            Sets a property for an endpoint instance returning a new instance with the given property set.
            </summary>
            <param name="key">Key.</param>
            <param name="value">Value.</param>
        </member>
        <member name="M:NServiceBus.Routing.EndpointInstance.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="M:NServiceBus.Routing.EndpointInstance.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:NServiceBus.Routing.EndpointInstance.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>
            A hash code for the current object.
            </returns>
        </member>
        <member name="M:NServiceBus.Routing.EndpointInstance.op_Equality(NServiceBus.Routing.EndpointInstance,NServiceBus.Routing.EndpointInstance)">
            <summary>
            Checks for equality.
            </summary>
        </member>
        <member name="M:NServiceBus.Routing.EndpointInstance.op_Inequality(NServiceBus.Routing.EndpointInstance,NServiceBus.Routing.EndpointInstance)">
            <summary>
            Checks for inequality.
            </summary>
        </member>
        <member name="T:NServiceBus.Routing.UnicastAddressTag">
            <summary>
            Represents a route directly to the specified destination.
            </summary>
        </member>
        <member name="M:NServiceBus.Routing.UnicastAddressTag.#ctor(System.String)">
            <summary>
            Initializes the strategy.
            </summary>
            <param name="destination">The destination.</param>
        </member>
        <member name="P:NServiceBus.Routing.UnicastAddressTag.Destination">
            <summary>
            The destination.
            </summary>
        </member>
        <member name="T:NServiceBus.Routing.DistributionStrategy">
            <summary>
            Determines which instance of a given endpoint a message is to be sent.
            </summary>
        </member>
        <member name="M:NServiceBus.Routing.DistributionStrategy.#ctor(System.String,NServiceBus.DistributionStrategyScope)">
            <summary>
            Creates a new <see cref="T:NServiceBus.Routing.DistributionStrategy"/>.
            </summary>
            <param name="endpoint">The name of the endpoint this distribution strategy resolves instances for.</param>
            <param name="scope">The scope for this strategy.</param>
        </member>
        <member name="M:NServiceBus.Routing.DistributionStrategy.SelectReceiver(System.String[])">
            <summary>
            Selects a destination instance for a message from all known addresses of a logical endpoint.
            </summary>
        </member>
        <member name="M:NServiceBus.Routing.DistributionStrategy.SelectDestination(NServiceBus.Routing.DistributionContext)">
            <summary>
            Selects a destination instance for a message from all known addresses of a logical endpoint.
            </summary>
            <remarks>When this method is overridden, do not call the base method. The base method implementation calls into <see cref="M:NServiceBus.Routing.DistributionStrategy.SelectReceiver(System.String[])"/> for backward compatibility reasons.</remarks>
        </member>
        <member name="P:NServiceBus.Routing.DistributionStrategy.Endpoint">
            <summary>
            The name of the endpoint this distribution strategy resolves instances for.
            </summary>
        </member>
        <member name="P:NServiceBus.Routing.DistributionStrategy.Scope">
            <summary>
            The scope of this strategy.
            </summary>
        </member>
        <member name="T:NServiceBus.Routing.AddressTag">
            <summary>
            Represents different ways how the transport should route a given message.
            </summary>
        </member>
        <member name="T:NServiceBus.Routing.MulticastAddressTag">
            <summary>
            Represents a route that should deliver the message to all interested subscribers.
            </summary>
        </member>
        <member name="M:NServiceBus.Routing.MulticastAddressTag.#ctor(System.Type)">
            <summary>
            Initializes a new instance of <see cref="T:NServiceBus.Routing.MulticastAddressTag" />.
            </summary>
            <param name="messageType">The event being published.</param>
        </member>
        <member name="P:NServiceBus.Routing.MulticastAddressTag.MessageType">
            <summary>
            The event being published.
            </summary>
        </member>
        <member name="T:NServiceBus.DistributionStrategyScope">
            <summary>
            Defines the usage scope of a <see cref="T:NServiceBus.Routing.DistributionStrategy"/>.
            </summary>
        </member>
        <member name="F:NServiceBus.DistributionStrategyScope.Send">
            <summary>
            All outgoing messages and commands, excluding events and subscription messages.
            </summary>
        </member>
        <member name="F:NServiceBus.DistributionStrategyScope.Publish">
            <summary>
            All published events.
            </summary>
        </member>
        <member name="T:NServiceBus.Features.MsmqSubscriptionPersistence">
            <summary>
            Provides subscription storage using a msmq queue as the backing store.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.MsmqSubscriptionPersistence.Setup(NServiceBus.Features.FeatureConfigurationContext)">
            <summary>
            Invoked if the feature is activated.
            </summary>
            <param name="context">The feature context.</param>
        </member>
        <member name="T:NServiceBus.Features.DataBus">
            <summary>
            Used to configure the databus.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.DataBus.Setup(NServiceBus.Features.FeatureConfigurationContext)">
            <summary>
            Called when the features is activated.
            </summary>
        </member>
        <member name="T:NServiceBus.Features.FeatureState">
            <summary>
            Defines state of a feature.
            </summary>
        </member>
        <member name="F:NServiceBus.Features.FeatureState.Disabled">
            <summary>
            Not selected for activation.
            </summary>
        </member>
        <member name="F:NServiceBus.Features.FeatureState.Enabled">
            <summary>
            Selected for activation.
            </summary>
        </member>
        <member name="F:NServiceBus.Features.FeatureState.Active">
            <summary>
            Activated.
            </summary>
        </member>
        <member name="F:NServiceBus.Features.FeatureState.Deactivated">
            <summary>
            Activation not possible.
            </summary>
        </member>
        <member name="T:NServiceBus.Features.RootFeature">
            <summary>
            A root feature that is always enabled.
            </summary>
        </member>
        <member name="T:NServiceBus.Features.MessageDrivenSubscriptions">
            <summary>
            Allows subscribers to register by sending a subscription message to this endpoint.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.MessageDrivenSubscriptions.Setup(NServiceBus.Features.FeatureConfigurationContext)">
            <summary>
            See <see cref="M:NServiceBus.Features.Feature.Setup(NServiceBus.Features.FeatureConfigurationContext)" />.
            </summary>
        </member>
        <member name="T:NServiceBus.Features.CriticalTimeMonitoring">
            <summary>
            Used to configure CriticalTimeMonitoring.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.CriticalTimeMonitoring.Setup(NServiceBus.Features.FeatureConfigurationContext)">
            <summary>
            <see cref="M:NServiceBus.Features.Feature.Setup(NServiceBus.Features.FeatureConfigurationContext)" />.
            </summary>
        </member>
        <member name="T:NServiceBus.Features.Audit">
            <summary>
            Enabled message auditing for this endpoint.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.Audit.Setup(NServiceBus.Features.FeatureConfigurationContext)">
            <summary>
            See <see cref="M:NServiceBus.Features.Feature.Setup(NServiceBus.Features.FeatureConfigurationContext)" />.
            </summary>
        </member>
        <member name="T:NServiceBus.Features.AutoSubscribe">
            <summary>
            Used to configure auto subscriptions.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.AutoSubscribe.Setup(NServiceBus.Features.FeatureConfigurationContext)">
            <summary>
            See <see cref="M:NServiceBus.Features.Feature.Setup(NServiceBus.Features.FeatureConfigurationContext)" />.
            </summary>
        </member>
        <member name="T:NServiceBus.Features.FeatureConfigurationContext">
            <summary>
            The context available to features when they are activated.
            </summary>
        </member>
        <member name="P:NServiceBus.Features.FeatureConfigurationContext.Settings">
            <summary>
            A read only copy of the settings.
            </summary>
        </member>
        <member name="P:NServiceBus.Features.FeatureConfigurationContext.Container">
            <summary>
            Access to the container to allow for registrations.
            </summary>
        </member>
        <member name="P:NServiceBus.Features.FeatureConfigurationContext.Pipeline">
            <summary>
            Access to the pipeline in order to customize it.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.FeatureConfigurationContext.AddSatelliteReceiver(System.String,System.String,NServiceBus.TransportTransactionMode,NServiceBus.Transport.PushRuntimeSettings,System.Func{NServiceBus.RecoverabilityConfig,NServiceBus.Transport.ErrorContext,NServiceBus.RecoverabilityAction},System.Func{NServiceBus.ObjectBuilder.IBuilder,NServiceBus.Transport.MessageContext,System.Threading.Tasks.Task})">
            <summary>
            Adds a new satellite receiver.
            </summary>
            <param name="name">Name of the satellite.</param>
            <param name="requiredTransportTransactionMode">Minimum required transaction mode.</param>
            <param name="runtimeSettings">Transport runtime settings.</param>
            <param name="onMessage">The message func.</param>
            <param name="transportAddress">The autogenerated transport address to listen on.</param>
            <param name="recoverabilityPolicy">Recoverability policy to be if processing fails.</param>
        </member>
        <member name="M:NServiceBus.Features.FeatureConfigurationContext.AddSatelliteReceiver(System.String,System.String,NServiceBus.Transport.PushRuntimeSettings,System.Func{NServiceBus.RecoverabilityConfig,NServiceBus.Transport.ErrorContext,NServiceBus.RecoverabilityAction},System.Func{NServiceBus.ObjectBuilder.IBuilder,NServiceBus.Transport.MessageContext,System.Threading.Tasks.Task})">
            <summary>
            Adds a new satellite receiver.
            </summary>
            <param name="name">Name of the satellite.</param>
            <param name="runtimeSettings">Transport runtime settings.</param>
            <param name="onMessage">The message func.</param>
            <param name="transportAddress">The autogenerated transport address to listen on.</param>
            <param name="recoverabilityPolicy">Recoverability policy to be if processing fails.</param>
        </member>
        <member name="M:NServiceBus.Features.FeatureConfigurationContext.RegisterStartupTask``1(``0)">
            <summary>
            Registers an instance of a feature startup task.
            </summary>
            <param name="startupTask">A startup task.</param>
        </member>
        <member name="M:NServiceBus.Features.FeatureConfigurationContext.RegisterStartupTask``1(System.Func{``0})">
            <summary>
            Registers a startup task factory.
            </summary>
            <param name="startupTaskFactory">A startup task factory.</param>
        </member>
        <member name="M:NServiceBus.Features.FeatureConfigurationContext.RegisterStartupTask``1(System.Func{NServiceBus.ObjectBuilder.IBuilder,``0})">
            <summary>
            Registers a startup task factory which gets access to the builder.
            </summary>
            <param name="startupTaskFactory">A startup task factory.</param>
            <remarks>Should only be used when really necessary. Usually a design smell.</remarks>
        </member>
        <member name="T:NServiceBus.Features.FeatureStartupTask">
            <summary>
            Base for feature startup tasks.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.FeatureStartupTask.OnStart(NServiceBus.IMessageSession)">
            <summary>
            Will be called after an endpoint has been started but before processing any messages, if the feature has been
            activated.
            </summary>
            <param name="session">Bus session.</param>
        </member>
        <member name="M:NServiceBus.Features.FeatureStartupTask.OnStop(NServiceBus.IMessageSession)">
            <summary>
            Will be called after an endpoint has been started but before processing any messages, if the feature has been
            activated.
            </summary>
            <param name="session">Bus session.</param>
        </member>
        <member name="T:NServiceBus.Features.SettingsExtensions">
            <summary>
            Feature related extensions to the settings.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.SettingsExtensions.EnableFeatureByDefault``1(NServiceBus.Settings.SettingsHolder)">
            <summary>
            Marks the given feature as enabled by default.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.SettingsExtensions.EnableFeatureByDefault(NServiceBus.Settings.SettingsHolder,System.Type)">
            <summary>
            Marks the given feature as enabled by default.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.SettingsExtensions.IsFeatureActive(NServiceBus.Settings.ReadOnlySettings,System.Type)">
            <summary>
            Returns if a given feature has been activated in this endpoint.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.SettingsExtensions.IsFeatureEnabled(NServiceBus.Settings.ReadOnlySettings,System.Type)">
            <summary>
            Returns if a given feature has been enabled in this endpoint.
            </summary>
        </member>
        <member name="T:NServiceBus.Features.Scheduler">
            <summary>
            NServiceBus scheduling capability you can schedule a task or an action/lambda, to be executed repeatedly in a given
            interval.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.Scheduler.Setup(NServiceBus.Features.FeatureConfigurationContext)">
            <summary>
            Invoked if the feature is activated.
            </summary>
            <param name="context">The feature context.</param>
        </member>
        <member name="T:NServiceBus.Features.ForwardReceivedMessages">
            <summary>
            Provides message forwarding capabilities.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.ForwardReceivedMessages.Setup(NServiceBus.Features.FeatureConfigurationContext)">
            <summary>
            Invoked if the feature is activated.
            </summary>
            <param name="context">The feature context.</param>
        </member>
        <member name="T:NServiceBus.Features.SLAMonitoring">
            <summary>
            Used to configure SLAMonitoring.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.SLAMonitoring.Setup(NServiceBus.Features.FeatureConfigurationContext)">
            <summary>
            <see cref="M:NServiceBus.Features.Feature.Setup(NServiceBus.Features.FeatureConfigurationContext)" />.
            </summary>
        </member>
        <member name="T:NServiceBus.Features.Outbox">
            <summary>
            Configure the Outbox.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.Outbox.Setup(NServiceBus.Features.FeatureConfigurationContext)">
            <summary>
            See <see cref="M:NServiceBus.Features.Feature.Setup(NServiceBus.Features.FeatureConfigurationContext)" />.
            </summary>
        </member>
        <member name="T:NServiceBus.Features.InMemoryGatewayPersistence">
            <summary>
            In-memory Gateway.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.InMemoryGatewayPersistence.Setup(NServiceBus.Features.FeatureConfigurationContext)">
            <summary>
            See <see cref="M:NServiceBus.Features.Feature.Setup(NServiceBus.Features.FeatureConfigurationContext)" />.
            </summary>
        </member>
        <member name="T:NServiceBus.Features.InMemoryOutboxPersistence">
            <summary>
            Used to configure in memory outbox persistence.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.InMemoryOutboxPersistence.Setup(NServiceBus.Features.FeatureConfigurationContext)">
            <summary>
            See <see cref="M:NServiceBus.Features.Feature.Setup(NServiceBus.Features.FeatureConfigurationContext)" />.
            </summary>
        </member>
        <member name="T:NServiceBus.Features.InMemorySagaPersistence">
            <summary>
            Used to configure in memory saga persistence.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.InMemorySagaPersistence.Setup(NServiceBus.Features.FeatureConfigurationContext)">
            <summary>
            See <see cref="M:NServiceBus.Features.Feature.Setup(NServiceBus.Features.FeatureConfigurationContext)" />.
            </summary>
        </member>
        <member name="T:NServiceBus.Features.InMemorySubscriptionPersistence">
            <summary>
            Used to configure in memory subscription persistence.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.InMemorySubscriptionPersistence.Setup(NServiceBus.Features.FeatureConfigurationContext)">
            <summary>
            See <see cref="M:NServiceBus.Features.Feature.Setup(NServiceBus.Features.FeatureConfigurationContext)" />.
            </summary>
        </member>
        <member name="T:NServiceBus.Features.InMemoryTimeoutPersistence">
            <summary>
            Used to configure in memory timeout persistence.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.InMemoryTimeoutPersistence.Setup(NServiceBus.Features.FeatureConfigurationContext)">
            <summary>
            See <see cref="M:NServiceBus.Features.Feature.Setup(NServiceBus.Features.FeatureConfigurationContext)" />.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.CheckMachineNameForComplianceWithDtcLimitation.Check">
            <summary>
            Method invoked to run custom code.
            </summary>
        </member>
        <member name="T:NServiceBus.Features.TimeoutManager">
            <summary>
            Used to configure the timeout manager that provides message deferral.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.TimeoutManager.Setup(NServiceBus.Features.FeatureConfigurationContext)">
            <summary>
            See <see cref="M:NServiceBus.Features.Feature.Setup(NServiceBus.Features.FeatureConfigurationContext)" />.
            </summary>
        </member>
        <member name="T:NServiceBus.Features.Feature">
            <summary>
            Used to control the various features supported by the framework.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.Feature.#ctor">
            <summary>
            Creates an instance of <see cref="T:NServiceBus.Features.Feature" />.
            </summary>
        </member>
        <member name="P:NServiceBus.Features.Feature.Name">
            <summary>
            Feature name.
            </summary>
        </member>
        <member name="P:NServiceBus.Features.Feature.Version">
            <summary>
            The version for this feature.
            </summary>
        </member>
        <member name="P:NServiceBus.Features.Feature.Dependencies">
            <summary>
            The list of features that this feature is depending on.
            </summary>
        </member>
        <member name="P:NServiceBus.Features.Feature.IsEnabledByDefault">
            <summary>
            Tells if this feature is enabled by default.
            </summary>
        </member>
        <member name="P:NServiceBus.Features.Feature.IsActive">
            <summary>
            Indicates that the feature is active.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.Feature.Defaults(System.Action{NServiceBus.Settings.SettingsHolder})">
            <summary>
            Registers default settings.
            </summary>
            <param name="settings">The settings holder.</param>
        </member>
        <member name="M:NServiceBus.Features.Feature.Setup(NServiceBus.Features.FeatureConfigurationContext)">
            <summary>
            Called when the features is activated.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.Feature.Prerequisite(System.Func{NServiceBus.Features.FeatureConfigurationContext,System.Boolean},System.String)">
            <summary>
            Adds a setup prerequisite condition. If false this feature won't be setup.
            Prerequisites are only evaluated if the feature is enabled.
            </summary>
            <param name="condition">Condition that must be met in order for this feature to be activated.</param>
            <param name="description">Explanation of what this prerequisite checks.</param>
        </member>
        <member name="M:NServiceBus.Features.Feature.EnableByDefault">
            <summary>
            Marks this feature as enabled by default.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.Feature.DependsOn``1">
            <summary>
            Registers this feature as depending on the given feature. This means that this feature won't be activated unless
            the dependant feature is active.
            This also causes this feature to be activated after the other feature.
            </summary>
            <typeparam name="T">Feature that this feature depends on.</typeparam>
        </member>
        <member name="M:NServiceBus.Features.Feature.DependsOn(System.String)">
            <summary>
            Registers this feature as depending on the given feature. This means that this feature won't be activated unless
            the dependant feature is active. This also causes this feature to be activated after the other feature.
            </summary>
            <param name="featureTypeName">The <see cref="P:System.Type.FullName"/> of the feature that this feature depends on.</param>
        </member>
        <member name="M:NServiceBus.Features.Feature.DependsOnAtLeastOne(System.Type[])">
            <summary>
            Register this feature as depending on at least on of the given features. This means that this feature won't be
            activated unless at least one of the provided features in the list is active.
            This also causes this feature to be activated after the other features.
            </summary>
            <param name="features">Features list that this feature require at least one of to be activated.</param>
        </member>
        <member name="M:NServiceBus.Features.Feature.DependsOnOptionally(System.String)">
            <summary>
            Registers this feature as optionally depending on the given feature. It means that the declaring feature's
            <see cref="M:NServiceBus.Features.Feature.Setup(NServiceBus.Features.FeatureConfigurationContext)" /> method will be called
            after the dependent feature's <see cref="M:NServiceBus.Features.Feature.Setup(NServiceBus.Features.FeatureConfigurationContext)" /> if that dependent feature is enabled.
            </summary>
            <param name="featureName">The name of the feature that this feature depends on.</param>
        </member>
        <member name="M:NServiceBus.Features.Feature.DependsOnOptionally(System.Type)">
            <summary>
            Registers this feature as optionally depending on the given feature. It means that the declaring feature's
            <see cref="M:NServiceBus.Features.Feature.Setup(NServiceBus.Features.FeatureConfigurationContext)" /> method will be called
            after the dependent feature's <see cref="M:NServiceBus.Features.Feature.Setup(NServiceBus.Features.FeatureConfigurationContext)" /> if that dependent feature is enabled.
            </summary>
            <param name="featureType">The type of the feature that this feature depends on.</param>
        </member>
        <member name="M:NServiceBus.Features.Feature.DependsOnOptionally``1">
            <summary>
            Registers this feature as optionally depending on the given feature. It means that the declaring feature's
            <see cref="M:NServiceBus.Features.Feature.Setup(NServiceBus.Features.FeatureConfigurationContext)" /> method will be called
            after the dependent feature's <see cref="M:NServiceBus.Features.Feature.Setup(NServiceBus.Features.FeatureConfigurationContext)" /> if that dependent feature is enabled.
            </summary>
            <typeparam name="T">The type of the feature that this feature depends on.</typeparam>
        </member>
        <member name="M:NServiceBus.Features.Feature.DependsOnAtLeastOne(System.String[])">
            <summary>
            Register this feature as depending on at least on of the given features. This means that this feature won't be
            activated unless at least one of the provided features in the list is active.
            This also causes this feature to be activated after the other features.
            </summary>
            <param name="featureNames">The name of the features that this feature depends on.</param>
        </member>
        <member name="M:NServiceBus.Features.Feature.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
        </member>
        <member name="T:NServiceBus.Features.Sagas">
            <summary>
            Used to configure saga.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.Sagas.Setup(NServiceBus.Features.FeatureConfigurationContext)">
            <summary>
            See <see cref="M:NServiceBus.Features.Feature.Setup(NServiceBus.Features.FeatureConfigurationContext)" />.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.DataBusFileBased.Setup(NServiceBus.Features.FeatureConfigurationContext)">
            <summary>
            See <see cref="M:NServiceBus.Features.Feature.Setup(NServiceBus.Features.FeatureConfigurationContext)" />
            </summary>
        </member>
        <member name="T:NServiceBus.IDistributionPolicy">
            <summary>
            Provides access to <see cref="T:NServiceBus.Routing.DistributionStrategy"/>.
            </summary>
        </member>
        <member name="M:NServiceBus.IDistributionPolicy.GetDistributionStrategy(System.String,NServiceBus.DistributionStrategyScope)">
            <summary>
            Returns a <see cref="T:NServiceBus.Routing.DistributionStrategy"/> for a given logical endpoint.
            </summary>
        </member>
        <member name="T:NServiceBus.RoutingFeatureSettingsExtensions">
            <summary>
            Configuration extensions for routing feature settings.
            </summary>
        </member>
        <member name="M:NServiceBus.RoutingFeatureSettingsExtensions.OverridePublicReturnAddress(NServiceBus.EndpointConfiguration,System.String)">
            <summary>
            Sets the public return address of this endpoint.
            </summary>
            <param name="configuration">The endpoint configuration to extend.</param>
            <param name="address">The public return address for messages sent by this endpoint.</param>
        </member>
        <member name="T:NServiceBus.ReceiveSettingsExtensions">
            <summary>
            Configuration extensions for receive settings.
            </summary>
        </member>
        <member name="M:NServiceBus.ReceiveSettingsExtensions.MakeInstanceUniquelyAddressable(NServiceBus.EndpointConfiguration,System.String)">
             <summary>
            Makes the endpoint instance uniquely addressable when running multiple instances by adding an instance-specific queue.
             </summary>
             <param name="config">The <see cref="T:NServiceBus.EndpointConfiguration" /> instance to apply the settings to.</param>
             <param name="discriminator">The value to append to the endpoint name to create an instance-specific queue.</param>
        </member>
        <member name="M:NServiceBus.ReceiveSettingsExtensions.OverrideLocalAddress(NServiceBus.EndpointConfiguration,System.String)">
            <summary>
            Overrides the base name of the input queue. The actual input queue name consists of this base name, instance ID and subqueue qualifier.
            </summary>
            <param name="config">The <see cref="T:NServiceBus.EndpointConfiguration" /> instance to apply the settings to.</param>
            <param name="baseInputQueueName">The base name of the input queue.</param>
        </member>
        <member name="T:NServiceBus.Transport.ErrorContext">
            <summary>
            The context for messages that has failed processing.
            </summary>
        </member>
        <member name="M:NServiceBus.Transport.ErrorContext.#ctor(System.Exception,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Byte[],NServiceBus.Transport.TransportTransaction,System.Int32)">
            <summary>
            Initializes the error context.
            </summary>
        </member>
        <member name="P:NServiceBus.Transport.ErrorContext.Exception">
            <summary>
            Exception that caused the message processing to fail.
            </summary>
        </member>
        <member name="P:NServiceBus.Transport.ErrorContext.TransportTransaction">
            <summary>
            Transport transaction for failed receive message.
            </summary>
        </member>
        <member name="P:NServiceBus.Transport.ErrorContext.ImmediateProcessingFailures">
            <summary>
            Number of failed immediate processing attempts. This number is re-set with each delayed delivery.
            </summary>
        </member>
        <member name="P:NServiceBus.Transport.ErrorContext.DelayedDeliveriesPerformed">
            <summary>
            Number of delayed deliveries performed so far.
            </summary>
        </member>
        <member name="P:NServiceBus.Transport.ErrorContext.Message">
            <summary>
            Failed incoming message.
            </summary>
        </member>
        <member name="T:NServiceBus.Transport.ErrorHandleResult">
            <summary>
            Provides information about error handling.
            </summary>
        </member>
        <member name="F:NServiceBus.Transport.ErrorHandleResult.Handled">
            <summary>
            Indicates that the infrastructure handled the current error.
            </summary>
        </member>
        <member name="F:NServiceBus.Transport.ErrorHandleResult.RetryRequired">
            <summary>
            Indicates that the infrastructure was did not handle the current error. A retry is required.
            </summary>
        </member>
        <member name="T:NServiceBus.Transport.IOutgoingTransportOperation">
            <summary>
            Represents a transport operation.
            </summary>
        </member>
        <member name="P:NServiceBus.Transport.IOutgoingTransportOperation.Message">
            <summary>
            The message to be sent over the transport.
            </summary>
        </member>
        <member name="P:NServiceBus.Transport.IOutgoingTransportOperation.DeliveryConstraints">
            <summary>
            The delivery constraints that must be honored by the transport.
            </summary>
        </member>
        <member name="P:NServiceBus.Transport.IOutgoingTransportOperation.RequiredDispatchConsistency">
            <summary>
            The dispatch consistency the must be honored by the transport.
            </summary>
        </member>
        <member name="T:NServiceBus.Transport.LogicalAddressExtensions">
            <summary>
            Extension methods for access to various transport address helpers.
            </summary>
        </member>
        <member name="M:NServiceBus.Transport.LogicalAddressExtensions.GetTransportAddress(NServiceBus.Settings.ReadOnlySettings,NServiceBus.LogicalAddress)">
            <summary>
            Gets the native transport address for the given logical address.
            </summary>
            <returns>The native transport address.</returns>
        </member>
        <member name="T:NServiceBus.Transport.MulticastTransportOperation">
            <summary>
            Represents a transport operation which should be delivered to multiple receivers.
            </summary>
        </member>
        <member name="M:NServiceBus.Transport.MulticastTransportOperation.#ctor(NServiceBus.Transport.OutgoingMessage,System.Type,NServiceBus.Transport.DispatchConsistency,System.Collections.Generic.List{NServiceBus.DeliveryConstraints.DeliveryConstraint})">
            <summary>
            Creates a new <see cref="T:NServiceBus.Transport.MulticastTransportOperation" /> instance.
            </summary>
        </member>
        <member name="P:NServiceBus.Transport.MulticastTransportOperation.MessageType">
            <summary>
            Defines the message type which needs to be multicasted.
            </summary>
        </member>
        <member name="P:NServiceBus.Transport.MulticastTransportOperation.DeliveryConstraints">
            <summary>
            The delivery constraints that must be honored by the transport.
            </summary>
            <remarks>The delivery constraints should only ever be read. When there are no delivery constraints a cached empty constraints list is returned.</remarks>
        </member>
        <member name="P:NServiceBus.Transport.MulticastTransportOperation.Message">
            <summary>
            The message to be sent over the transport.
            </summary>
        </member>
        <member name="P:NServiceBus.Transport.MulticastTransportOperation.RequiredDispatchConsistency">
            <summary>
            The dispatch consistency the must be honored by the transport.
            </summary>
        </member>
        <member name="T:NServiceBus.Transport.TransportInfrastructure">
            <summary>
            Transport infrastructure definitions.
            </summary>
        </member>
        <member name="P:NServiceBus.Transport.TransportInfrastructure.DeliveryConstraints">
            <summary>
            Returns the list of supported delivery constraints for this transport.
            </summary>
        </member>
        <member name="P:NServiceBus.Transport.TransportInfrastructure.TransactionMode">
            <summary>
            Gets the highest supported transaction mode for the this transport.
            </summary>
        </member>
        <member name="P:NServiceBus.Transport.TransportInfrastructure.OutboundRoutingPolicy">
            <summary>
            Returns the outbound routing policy selected for the transport.
            </summary>
        </member>
        <member name="M:NServiceBus.Transport.TransportInfrastructure.ConfigureReceiveInfrastructure">
            <summary>
            Gets the factories to receive message.
            </summary>
        </member>
        <member name="M:NServiceBus.Transport.TransportInfrastructure.ConfigureSendInfrastructure">
            <summary>
            Gets the factories to send message.
            </summary>
        </member>
        <member name="M:NServiceBus.Transport.TransportInfrastructure.ConfigureSubscriptionInfrastructure">
            <summary>
            Gets the factory to manage subscriptions.
            </summary>
        </member>
        <member name="M:NServiceBus.Transport.TransportInfrastructure.BindToLocalEndpoint(NServiceBus.Routing.EndpointInstance)">
            <summary>
            Returns the discriminator for this endpoint instance.
            </summary>
        </member>
        <member name="M:NServiceBus.Transport.TransportInfrastructure.ToTransportAddress(NServiceBus.LogicalAddress)">
            <summary>
            Converts a given logical address to the transport address.
            </summary>
            <param name="logicalAddress">The logical address.</param>
            <returns>The transport address.</returns>
        </member>
        <member name="M:NServiceBus.Transport.TransportInfrastructure.MakeCanonicalForm(System.String)">
            <summary>
            Returns the canonical for of the given transport address so various transport addresses can be effectively compared and
            de-duplicated.
            </summary>
            <param name="transportAddress">A transport address.</param>
        </member>
        <member name="M:NServiceBus.Transport.TransportInfrastructure.Start">
            <summary>
            Performs any action required to warm up the transport infrastructure before starting the endpoint.
            </summary>
        </member>
        <member name="M:NServiceBus.Transport.TransportInfrastructure.Stop">
            <summary>
            Performs any action required to cool down the transport infrastructure when the endpoint is stopping.
            </summary>
        </member>
        <member name="T:NServiceBus.Transport.TransportOperations">
            <summary>
            Represents a set of transport operations.
            </summary>
        </member>
        <member name="M:NServiceBus.Transport.TransportOperations.#ctor(NServiceBus.Transport.TransportOperation[])">
            <summary>
            Creates a new set of dispatchable transport operations.
            </summary>
        </member>
        <member name="P:NServiceBus.Transport.TransportOperations.MulticastTransportOperations">
            <summary>
            A list of multicast transport operations.
            </summary>
        </member>
        <member name="P:NServiceBus.Transport.TransportOperations.UnicastTransportOperations">
            <summary>
            A list of unicast transport operations.
            </summary>
        </member>
        <member name="T:NServiceBus.Transport.TransportSubscriptionInfrastructure">
            <summary>
            Represents the result for configuring the transport for subscribing.
            </summary>
        </member>
        <member name="M:NServiceBus.Transport.TransportSubscriptionInfrastructure.#ctor(System.Func{NServiceBus.Transport.IManageSubscriptions})">
            <summary>
            Creates new result object.
            </summary>
        </member>
        <member name="T:NServiceBus.Transport.UnicastTransportOperation">
            <summary>
            Represents a transport operation which should be delivered to a single receiver.
            </summary>
        </member>
        <member name="M:NServiceBus.Transport.UnicastTransportOperation.#ctor(NServiceBus.Transport.OutgoingMessage,System.String,NServiceBus.Transport.DispatchConsistency,System.Collections.Generic.List{NServiceBus.DeliveryConstraints.DeliveryConstraint})">
            <summary>
            Creates a new <see cref="T:NServiceBus.Transport.UnicastTransportOperation" /> instance.
            </summary>
        </member>
        <member name="P:NServiceBus.Transport.UnicastTransportOperation.Destination">
            <summary>
            Defines the destination address of the receiver.
            </summary>
        </member>
        <member name="P:NServiceBus.Transport.UnicastTransportOperation.Message">
            <summary>
            The message to be sent over the transport.
            </summary>
        </member>
        <member name="P:NServiceBus.Transport.UnicastTransportOperation.DeliveryConstraints">
            <summary>
            The delivery constraints that must be honored by the transport.
            </summary>
        </member>
        <member name="P:NServiceBus.Transport.UnicastTransportOperation.RequiredDispatchConsistency">
            <summary>
            The dispatch consistency the must be honored by the transport.
            </summary>
        </member>
        <member name="T:NServiceBus.Transport.StartupCheckResult">
            <summary>
            Represents a result of a pre-startup check.
            </summary>
        </member>
        <member name="P:NServiceBus.Transport.StartupCheckResult.Succeeded">
            <summary>
            Returns weather the result was a success.
            </summary>
        </member>
        <member name="P:NServiceBus.Transport.StartupCheckResult.ErrorMessage">
            <summary>
            Returns the error message in case of a failure.
            </summary>
        </member>
        <member name="M:NServiceBus.Transport.StartupCheckResult.Failed(System.String)">
            <summary>
            Failure.
            </summary>
            <param name="errorMessage">Mandatory error message.</param>
        </member>
        <member name="F:NServiceBus.Transport.StartupCheckResult.Success">
            <summary>
            Success.
            </summary>
        </member>
        <member name="T:NServiceBus.Transport.TransportReceiveInfrastructure">
            <summary>
            Represents the infrastructure of the transport used for receiving.
            </summary>
        </member>
        <member name="M:NServiceBus.Transport.TransportReceiveInfrastructure.#ctor(System.Func{NServiceBus.Transport.IPushMessages},System.Func{NServiceBus.Transport.ICreateQueues},System.Func{System.Threading.Tasks.Task{NServiceBus.Transport.StartupCheckResult}})">
            <summary>
            Creates new result.
            </summary>
        </member>
        <member name="P:NServiceBus.Transport.TransportReceiveInfrastructure.MessagePumpFactory">
            <summary>
            Factory for creating the message pump.
            </summary>
        </member>
        <member name="P:NServiceBus.Transport.TransportReceiveInfrastructure.QueueCreatorFactory">
            <summary>
            Factory for the queue creator.
            </summary>
        </member>
        <member name="T:NServiceBus.Transport.TransportSendInfrastructure">
            <summary>
            Represents the result for configuring the transport for sending.
            </summary>
        </member>
        <member name="M:NServiceBus.Transport.TransportSendInfrastructure.#ctor(System.Func{NServiceBus.Transport.IDispatchMessages},System.Func{System.Threading.Tasks.Task{NServiceBus.Transport.StartupCheckResult}})">
            <summary>
            Creates new result object.
            </summary>
        </member>
        <member name="P:NServiceBus.Transport.TransportSendInfrastructure.DispatcherFactory">
            <summary>
            Factory to create the dispatcher.
            </summary>
        </member>
        <member name="T:NServiceBus.Transport.TransportTransaction">
            <summary>
            Represents a transaction used to receive the message from the queueing infrastructure.
            </summary>
        </member>
        <member name="M:NServiceBus.Transport.TransportTransaction.#ctor">
            <summary>
            Create an instance of <see cref="T:NServiceBus.Transport.TransportTransaction" />.
            </summary>
        </member>
        <member name="T:NServiceBus.Transport.DispatchConsistency">
            <summary>
            The requested level of dispatch consistency.
            </summary>
        </member>
        <member name="F:NServiceBus.Transport.DispatchConsistency.Default">
            <summary>
            The transport should use it's default mode when deciding to enlist the dispatch operation in the receive transaction.
            </summary>
        </member>
        <member name="F:NServiceBus.Transport.DispatchConsistency.Isolated">
            <summary>
            The message should be dispatched immediately without enlisting in any ongoing receive transaction.
            </summary>
        </member>
        <member name="T:NServiceBus.Transport.IncomingMessageExtensions">
            <summary>
            Helper methods for <see cref="T:NServiceBus.Transport.IncomingMessage" />.
            </summary>
        </member>
        <member name="M:NServiceBus.Transport.IncomingMessageExtensions.GetMesssageIntent(NServiceBus.Transport.IncomingMessage)">
            <summary>
            Gets the message intent from the headers.
            </summary>
            <param name="message">The message.</param>
            <returns>The message intent.</returns>
        </member>
        <member name="M:NServiceBus.Transport.IncomingMessageExtensions.GetReplyToAddress(NServiceBus.Transport.IncomingMessage)">
            <summary>
            Gets the reply to address.
            </summary>
            <param name="message">The message.</param>
            <returns>The reply to address.</returns>
        </member>
        <member name="T:NServiceBus.Transport.OutboundRoutingPolicy">
            <summary>
            Defines the policy for outbound routing.
            </summary>
        </member>
        <member name="M:NServiceBus.Transport.OutboundRoutingPolicy.#ctor(NServiceBus.Transport.OutboundRoutingType,NServiceBus.Transport.OutboundRoutingType,NServiceBus.Transport.OutboundRoutingType)">
            <summary>
            Creates new policy object.
            </summary>
            <param name="sends">Policy for sends.</param>
            <param name="publishes">Policy for publishes.</param>
            <param name="replies">Policy for replies.</param>
        </member>
        <member name="P:NServiceBus.Transport.OutboundRoutingPolicy.Sends">
            <summary>
            Gets the policy for sends.
            </summary>
        </member>
        <member name="P:NServiceBus.Transport.OutboundRoutingPolicy.Publishes">
            <summary>
            Gets the policy for publishes.
            </summary>
        </member>
        <member name="P:NServiceBus.Transport.OutboundRoutingPolicy.Replies">
            <summary>
            Gets the policy for replies.
            </summary>
        </member>
        <member name="T:NServiceBus.Transport.OutboundRoutingType">
            <summary>
            The type of routing from the perspective of a transport.
            </summary>
        </member>
        <member name="F:NServiceBus.Transport.OutboundRoutingType.Unicast">
            <summary>
            Unicast. Routing is performed by the core and one send operation might require multiple calls to
            <see cref="T:NServiceBus.Transport.IDispatchMessages" />.
            </summary>
        </member>
        <member name="F:NServiceBus.Transport.OutboundRoutingType.Multicast">
            <summary>
            Multicast. Routing is performed by the transport.
            </summary>
        </member>
        <member name="T:NServiceBus.Transport.PushRuntimeSettings">
            <summary>
            Controls how the message pump should behave.
            </summary>
        </member>
        <member name="M:NServiceBus.Transport.PushRuntimeSettings.#ctor">
            <summary>
            Constructs the settings. NServiceBus will pick a suitable default for `MaxConcurrency`.
            </summary>
        </member>
        <member name="M:NServiceBus.Transport.PushRuntimeSettings.#ctor(System.Int32)">
            <summary>
            Constructs the settings.
            </summary>
            <param name="maxConcurrency">The maximum concurrency to allow.</param>
        </member>
        <member name="P:NServiceBus.Transport.PushRuntimeSettings.MaxConcurrency">
            <summary>
            The maximum number of messages that should be in flight at any given time.
            </summary>
        </member>
        <member name="P:NServiceBus.Transport.PushRuntimeSettings.Default">
            <summary>
            Use default settings.
            </summary>
        </member>
        <member name="T:NServiceBus.Transport.ICancelDeferredMessages">
            <summary>
            Allows timeouts to be canceled by the key provided when set.
            </summary>
        </member>
        <member name="M:NServiceBus.Transport.ICancelDeferredMessages.CancelDeferredMessages(System.String,NServiceBus.Pipeline.IBehaviorContext)">
            <summary>
            Clears all timeouts for the given timeout key.
            </summary>
        </member>
        <member name="T:NServiceBus.Transport.OutgoingMessage">
            <summary>
            The message going out to the transport.
            </summary>
        </member>
        <member name="M:NServiceBus.Transport.OutgoingMessage.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Byte[])">
            <summary>
            Initializes a new instance of <see cref="T:NServiceBus.Transport.OutgoingMessage" />.
            </summary>
            <param name="messageId">The message id to use.</param>
            <param name="headers">The headers associated with this message.</param>
            <param name="body">The body of the message.</param>
        </member>
        <member name="P:NServiceBus.Transport.OutgoingMessage.Body">
            <summary>
            The body to be sent.
            </summary>
        </member>
        <member name="P:NServiceBus.Transport.OutgoingMessage.MessageId">
            <summary>
            The id of the message.
            </summary>
        </member>
        <member name="P:NServiceBus.Transport.OutgoingMessage.Headers">
            <summary>
            The headers for the message.
            </summary>
        </member>
        <member name="T:NServiceBus.Transport.MessageContext">
            <summary>
            Allows the transport to pass relevant info to the pipeline.
            </summary>
        </member>
        <member name="M:NServiceBus.Transport.MessageContext.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Byte[],NServiceBus.Transport.TransportTransaction,System.Threading.CancellationTokenSource,NServiceBus.Extensibility.ContextBag)">
            <summary>
            Initializes the context.
            </summary>
            <param name="messageId">Native message id.</param>
            <param name="headers">The message headers.</param>
            <param name="body">The message body.</param>
            <param name="transportTransaction">Transaction (along with connection if applicable) used to receive the message.</param>
            <param name="receiveCancellationTokenSource">
            Allows the pipeline to flag that it has been aborted and the receive operation should be rolled back.
            It also allows the transport to communicate to the pipeline to abort if possible. Transports should check if the token
            has been aborted after invoking the pipeline and roll back the message accordingly.
            </param>
            <param name="context">Any context that the transport wants to be available on the pipeline.</param>
        </member>
        <member name="P:NServiceBus.Transport.MessageContext.MessageId">
            <summary>
            The native id of the message.
            </summary>
        </member>
        <member name="P:NServiceBus.Transport.MessageContext.Headers">
            <summary>
            The message headers.
            </summary>
        </member>
        <member name="P:NServiceBus.Transport.MessageContext.Body">
            <summary>
            The message body.
            </summary>
        </member>
        <member name="P:NServiceBus.Transport.MessageContext.TransportTransaction">
            <summary>
            Transaction (along with connection if applicable) used to receive the message.
            </summary>
        </member>
        <member name="P:NServiceBus.Transport.MessageContext.ReceiveCancellationTokenSource">
            <summary>
            Allows the pipeline to flag that the pipeline has been aborted and the receive operation should be rolled back.
            It also allows the transport to communicate to the pipeline to abort if possible.
            </summary>
        </member>
        <member name="P:NServiceBus.Transport.MessageContext.Context">
            <summary>
            Context provided by the transport.
            </summary>
        </member>
        <member name="T:NServiceBus.Transport.QueueBindings">
            <summary>
            Contains information about queues this endpoint is using.
            </summary>
        </member>
        <member name="P:NServiceBus.Transport.QueueBindings.ReceivingAddresses">
            <summary>
            Returns the collection of all transport addresses of queues this endpoint is receiving from.
            </summary>
        </member>
        <member name="P:NServiceBus.Transport.QueueBindings.SendingAddresses">
            <summary>
            Returns the collection of all transport addresses of queues this endpoint is sending to.
            </summary>
        </member>
        <member name="M:NServiceBus.Transport.QueueBindings.BindReceiving(System.String)">
            <summary>
            Declares that this endpoint will be using queue with address <paramref name="address" /> for receiving.
            </summary>
            <param name="address">The address of the queue.</param>
        </member>
        <member name="M:NServiceBus.Transport.QueueBindings.BindSending(System.String)">
            <summary>
            Declares that this endpoint will be using queue with address <paramref name="transportAddress" /> for sending.
            </summary>
            <param name="transportAddress">The address of the queue.</param>
        </member>
        <member name="T:NServiceBus.Transport.IncomingMessage">
            <summary>
            The raw message coming from the transport.
            </summary>
        </member>
        <member name="M:NServiceBus.Transport.IncomingMessage.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Byte[])">
            <summary>
            Creates a new message.
            </summary>
            <param name="messageId">Native message id.</param>
            <param name="headers">The message headers.</param>
            <param name="body">The message body.</param>
        </member>
        <member name="P:NServiceBus.Transport.IncomingMessage.MessageId">
            <summary>
            The id of the message.
            </summary>
        </member>
        <member name="P:NServiceBus.Transport.IncomingMessage.Headers">
            <summary>
            The message headers.
            </summary>
        </member>
        <member name="P:NServiceBus.Transport.IncomingMessage.Body">
            <summary>
            Gets/sets a byte array to the body content of the message.
            </summary>
        </member>
        <member name="M:NServiceBus.Transport.IncomingMessage.UpdateBody(System.Byte[])">
            <summary>
            Use this method to update the body if this message.
            </summary>
        </member>
        <member name="M:NServiceBus.Transport.IncomingMessage.RevertToOriginalBodyIfNeeded">
            <summary>
            Makes sure that the body is reset to the exact state as it was when the message was created.
            </summary>
        </member>
        <member name="T:NServiceBus.Transport.TransportOperation">
            <summary>
            Defines the transport operations including the message and information how to send it.
            </summary>
        </member>
        <member name="M:NServiceBus.Transport.TransportOperation.#ctor(NServiceBus.Transport.OutgoingMessage,NServiceBus.Routing.AddressTag,NServiceBus.Transport.DispatchConsistency,System.Collections.Generic.List{NServiceBus.DeliveryConstraints.DeliveryConstraint})">
            <summary>
            Creates a new transport operation.
            </summary>
            <param name="message">The message to dispatch.</param>
            <param name="addressTag">The address to use when routing this message.</param>
            <param name="requiredDispatchConsistency">The required consistency level for the dispatch operation.</param>
            <param name="deliveryConstraints">The delivery constraints that must be honored by the transport.</param>
        </member>
        <member name="P:NServiceBus.Transport.TransportOperation.Message">
            <summary>
            Gets the message.
            </summary>
        </member>
        <member name="P:NServiceBus.Transport.TransportOperation.AddressTag">
            <summary>
            The strategy to use when routing this message.
            </summary>
        </member>
        <member name="P:NServiceBus.Transport.TransportOperation.DeliveryConstraints">
            <summary>
            The delivery constraints that must be honored by the transport.
            </summary>
            <remarks>The delivery constraints should only ever be read. When there are no delivery constraints you'll get a cached empty constraints list.</remarks>
        </member>
        <member name="P:NServiceBus.Transport.TransportOperation.RequiredDispatchConsistency">
            <summary>
            The dispatch consistency the must be honored by the transport.
            </summary>
        </member>
        <member name="T:NServiceBus.Transport.PushSettings">
            <summary>
            Contains information necessary to set up a message pump for receiving messages.
            </summary>
        </member>
        <member name="M:NServiceBus.Transport.PushSettings.#ctor(System.String,System.String,System.Boolean,NServiceBus.TransportTransactionMode)">
            <summary>
            Creates an instance of <see cref="T:NServiceBus.Transport.PushSettings" />.
            </summary>
            <param name="inputQueue">Input queue name.</param>
            <param name="errorQueue">Error queue name.</param>
            <param name="purgeOnStartup"><code>true</code> to purge <paramref name="inputQueue" /> at startup.</param>
            <param name="requiredTransactionMode">The transaction mode required for receive operations.</param>
        </member>
        <member name="P:NServiceBus.Transport.PushSettings.InputQueue">
            <summary>
            The native queue to consume messages from.
            </summary>
        </member>
        <member name="P:NServiceBus.Transport.PushSettings.ErrorQueue">
            <summary>
            The native queue where to send corrupted messages to.
            </summary>
        </member>
        <member name="P:NServiceBus.Transport.PushSettings.PurgeOnStartup">
            <summary>
            Instructs the message pump to purge the `InputQueue` before starting to push messages from it.
            </summary>
        </member>
        <member name="P:NServiceBus.Transport.PushSettings.RequiredTransactionMode">
            <summary>
            The transaction mode required for receive operations.
            </summary>
        </member>
        <member name="T:NServiceBus.Transport.ICreateQueues">
            <summary>
            Abstraction of the capability to create queues.
            </summary>
        </member>
        <member name="M:NServiceBus.Transport.ICreateQueues.CreateQueueIfNecessary(NServiceBus.Transport.QueueBindings,System.String)">
            <summary>
            Creates message queues for the defined queue bindings and identity.
            </summary>
        </member>
        <member name="T:NServiceBus.Transport.IPushMessages">
            <summary>
            Allows the transport to push messages to the core.
            </summary>
        </member>
        <member name="M:NServiceBus.Transport.IPushMessages.Init(System.Func{NServiceBus.Transport.MessageContext,System.Threading.Tasks.Task},System.Func{NServiceBus.Transport.ErrorContext,System.Threading.Tasks.Task{NServiceBus.Transport.ErrorHandleResult}},NServiceBus.CriticalError,NServiceBus.Transport.PushSettings)">
            <summary>
            Prepare the message pump to be started.
            </summary>
            <param name="onMessage">Called when there is a message available for processing.</param>
            <param name="onError">Called when there is a message has failed mprocessing.</param>
            <param name="criticalError">Called when there is a critical error in the message pump.</param>
            <param name="settings">Runtime settings for the message pump.</param>
        </member>
        <member name="M:NServiceBus.Transport.IPushMessages.Start(NServiceBus.Transport.PushRuntimeSettings)">
            <summary>
            Starts pushing messages.
            </summary>
        </member>
        <member name="M:NServiceBus.Transport.IPushMessages.Stop">
            <summary>
            Stops pushing messages.
            </summary>
        </member>
        <member name="T:NServiceBus.Transport.IManageSubscriptions">
            <summary>
            Implemented by transports to provide pub/sub capabilities.
            </summary>
        </member>
        <member name="M:NServiceBus.Transport.IManageSubscriptions.Subscribe(System.Type,NServiceBus.Extensibility.ContextBag)">
            <summary>
            Subscribes to the given event.
            </summary>
            <param name="eventType">The event type.</param>
            <param name="context">The current context.</param>
        </member>
        <member name="M:NServiceBus.Transport.IManageSubscriptions.Unsubscribe(System.Type,NServiceBus.Extensibility.ContextBag)">
            <summary>
            Unsubscribes from the given event.
            </summary>
            <param name="eventType">The event type.</param>
            <param name="context">The current context.</param>
        </member>
        <member name="T:NServiceBus.Transport.IDispatchMessages">
            <summary>
            Abstraction of the capability to dispatch messages.
            </summary>
        </member>
        <member name="M:NServiceBus.Transport.IDispatchMessages.Dispatch(NServiceBus.Transport.TransportOperations,NServiceBus.Transport.TransportTransaction,NServiceBus.Extensibility.ContextBag)">
            <summary>
            Dispatches the given operations to the transport.
            </summary>
        </member>
        <member name="T:NServiceBus.Transport.TransportDefinition">
            <summary>
            Defines a transport.
            </summary>
        </member>
        <member name="P:NServiceBus.Transport.TransportDefinition.ExampleConnectionStringForErrorMessage">
            <summary>
            Gets an example connection string to use when reporting lack of configured connection string to the user.
            </summary>
        </member>
        <member name="P:NServiceBus.Transport.TransportDefinition.RequiresConnectionString">
            <summary>
            Used by implementations to control if a connection string is necessary.
            </summary>
        </member>
        <member name="M:NServiceBus.Transport.TransportDefinition.Initialize(NServiceBus.Settings.SettingsHolder,System.String)">
            <summary>
            Initializes all the factories and supported features for the transport. This method is called right before all features
            are activated and the settings will be locked down. This means you can use the SettingsHolder both for providing
            default capabilities as well as for initializing the transport's configuration based on those settings (the user cannot
            provide information anymore at this stage).
            </summary>
            <param name="settings">An instance of the current settings.</param>
            <param name="connectionString">The connection string.</param>
            <returns>The supported factories.</returns>
        </member>
        <member name="T:NServiceBus.Transport.Msmq.HeaderInfo">
            <summary>
            Represents the structure of header information passed in a TransportMessage.
            </summary>
        </member>
        <member name="P:NServiceBus.Transport.Msmq.HeaderInfo.Key">
            <summary>
            The key used to lookup the value in the header collection.
            </summary>
        </member>
        <member name="P:NServiceBus.Transport.Msmq.HeaderInfo.Value">
            <summary>
            The value stored under the key in the header collection.
            </summary>
        </member>
        <member name="T:NServiceBus.CriticalErrorContext">
            <summary>
            See <see cref="T:NServiceBus.ICriticalErrorContext" />.
            </summary>
        </member>
        <member name="M:NServiceBus.CriticalErrorContext.#ctor(System.Func{System.Threading.Tasks.Task},System.String,System.Exception)">
            <summary>
            Initializes a new instance of <see cref="T:NServiceBus.CriticalErrorContext" />.
            </summary>
            <param name="stop">See <see cref="P:NServiceBus.ICriticalErrorContext.Stop" />.</param>
            <param name="error">See <see cref="P:NServiceBus.ICriticalErrorContext.Error" />.</param>
            <param name="exception">See <see cref="P:NServiceBus.ICriticalErrorContext.Exception" />.</param>
        </member>
        <member name="P:NServiceBus.CriticalErrorContext.Stop">
            <summary>
            See <see cref="P:NServiceBus.ICriticalErrorContext.Stop" />.
            </summary>
        </member>
        <member name="P:NServiceBus.CriticalErrorContext.Error">
            <summary>
            See <see cref="P:NServiceBus.ICriticalErrorContext.Error" />.
            </summary>
        </member>
        <member name="P:NServiceBus.CriticalErrorContext.Exception">
            <summary>
            See <see cref="P:NServiceBus.ICriticalErrorContext.Exception" />.
            </summary>
        </member>
        <member name="T:NServiceBus.EndpointConfiguration">
            <summary>
            Configuration used to create an endpoint instance.
            </summary>
        </member>
        <member name="M:NServiceBus.EndpointConfiguration.#ctor(System.String)">
            <summary>
            Initializes the endpoint configuration builder.
            </summary>
            <param name="endpointName">The name of the endpoint being configured.</param>
        </member>
        <member name="P:NServiceBus.EndpointConfiguration.Notifications">
            <summary>
            Access to the current endpoint <see cref="P:NServiceBus.EndpointConfiguration.Notifications" />.
            </summary>
        </member>
        <member name="P:NServiceBus.EndpointConfiguration.Pipeline">
            <summary>
            Access to the pipeline configuration.
            </summary>
        </member>
        <member name="M:NServiceBus.EndpointConfiguration.RegisterComponents(System.Action{NServiceBus.ObjectBuilder.IConfigureComponents})">
            <summary>
            Used to configure components in the container.
            </summary>
        </member>
        <member name="M:NServiceBus.EndpointConfiguration.ExcludeAssemblies(System.String[])">
            <summary>
            Append a list of <see cref="T:System.Reflection.Assembly" />s to the ignored list. The string is the file name of the assembly.
            </summary>
        </member>
        <member name="M:NServiceBus.EndpointConfiguration.ExcludeTypes(System.Type[])">
            <summary>
            Append a list of <see cref="T:System.Type" />s to the ignored list.
            </summary>
        </member>
        <member name="M:NServiceBus.EndpointConfiguration.ScanAssembliesInNestedDirectories">
            <summary>
            Specify to scan nested directories when performing assembly scanning.
            </summary>
        </member>
        <member name="M:NServiceBus.EndpointConfiguration.SendOnly">
            <summary>
            Configures the endpoint to be send-only.
            </summary>
        </member>
        <member name="M:NServiceBus.EndpointConfiguration.CustomConfigurationSource(NServiceBus.Config.ConfigurationSource.IConfigurationSource)">
            <summary>
            Overrides the default configuration source.
            </summary>
        </member>
        <member name="M:NServiceBus.EndpointConfiguration.Conventions">
            <summary>
            Defines the conventions to use for this endpoint.
            </summary>
        </member>
        <member name="M:NServiceBus.EndpointConfiguration.UseContainer``1(System.Action{NServiceBus.Container.ContainerCustomizations})">
            <summary>
            Defines a custom builder to use.
            </summary>
            <typeparam name="T">The builder type of the <see cref="T:NServiceBus.Container.ContainerDefinition" />.</typeparam>
        </member>
        <member name="M:NServiceBus.EndpointConfiguration.UseContainer(System.Type)">
            <summary>
            Defines a custom builder to use.
            </summary>
            <param name="definitionType">The type of the <see cref="T:NServiceBus.Container.ContainerDefinition" />.</param>
        </member>
        <member name="M:NServiceBus.EndpointConfiguration.UseContainer(NServiceBus.ObjectBuilder.Common.IContainer)">
            <summary>
            Uses an already active instance of a builder.
            </summary>
            <param name="builder">The instance to use.</param>
        </member>
        <member name="M:NServiceBus.EndpointConfiguration.TypesToScanInternal(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Specifies the range of types that NServiceBus scans for handlers etc.
            </summary>
        </member>
        <member name="M:NServiceBus.EndpointConfiguration.Build">
            <summary>
            Creates the configuration object.
            </summary>
        </member>
        <member name="T:NServiceBus.Extensibility.IExtendable">
            <summary>
            Marks a class as extendable by giving access to a <see cref="T:NServiceBus.Extensibility.ContextBag" />.
            </summary>
        </member>
        <member name="P:NServiceBus.Extensibility.IExtendable.Extensions">
            <summary>
            A <see cref="T:NServiceBus.Extensibility.ContextBag" /> which can be used to extend the current object.
            </summary>
        </member>
        <member name="T:NServiceBus.Extensibility.ExtendableOptions">
            <summary>
            Provide a base class for extendable options.
            </summary>
        </member>
        <member name="M:NServiceBus.Extensibility.ExtendableOptions.#ctor">
            <summary>
            Creates an instance of an extendable option.
            </summary>
        </member>
        <member name="T:NServiceBus.Extensibility.ExtendableOptionsExtensions">
            <summary>
            Provides hidden access to the extension context.
            </summary>
        </member>
        <member name="M:NServiceBus.Extensibility.ExtendableOptionsExtensions.GetExtensions(NServiceBus.Extensibility.ExtendableOptions)">
            <summary>
            Gets access to a "bucket", this allows the developer to pass information from extension methods down to behaviors.
            </summary>
            <param name="options">Extendable options instance.</param>
            <returns>A big bucket.</returns>
        </member>
        <member name="T:NServiceBus.Extensibility.ReadOnlyContextBag">
            <summary>
            Context bag which is readonly.
            </summary>
        </member>
        <member name="M:NServiceBus.Extensibility.ReadOnlyContextBag.Get``1">
            <summary>
            Retrieves the specified type from the context.
            </summary>
            <typeparam name="T">The type to retrieve.</typeparam>
            <returns>The type instance.</returns>
        </member>
        <member name="M:NServiceBus.Extensibility.ReadOnlyContextBag.TryGet``1(``0@)">
            <summary>
            Tries to retrieves the specified type from the context.
            </summary>
            <typeparam name="T">The type to retrieve.</typeparam>
            <param name="result">The type instance.</param>
            <returns><code>true</code> if found, otherwise <code>false</code>.</returns>
        </member>
        <member name="M:NServiceBus.Extensibility.ReadOnlyContextBag.TryGet``1(System.String,``0@)">
            <summary>
            Tries to retrieves the specified type from the context.
            </summary>
            <typeparam name="T">The type to retrieve.</typeparam>
            <param name="key">The key of the value being looked up.</param>
            <param name="result">The type instance.</param>
            <returns><code>true</code> if found, otherwise <code>false</code>.</returns>
        </member>
        <member name="T:NServiceBus.Extensibility.ContextBag">
            <summary>
            A string object bag of context objects.
            </summary>
        </member>
        <member name="M:NServiceBus.Extensibility.ContextBag.#ctor(NServiceBus.Extensibility.ContextBag)">
            <summary>
            Initialized a new instance of <see cref="T:NServiceBus.Extensibility.ContextBag" />.
            </summary>
        </member>
        <member name="M:NServiceBus.Extensibility.ContextBag.Get``1">
            <summary>
            Retrieves the specified type from the context.
            </summary>
            <typeparam name="T">The type to retrieve.</typeparam>
            <returns>The type instance.</returns>
        </member>
        <member name="M:NServiceBus.Extensibility.ContextBag.TryGet``1(``0@)">
            <summary>
            Tries to retrieves the specified type from the context.
            </summary>
            <typeparam name="T">The type to retrieve.</typeparam>
            <param name="result">The type instance.</param>
            <returns><code>true</code> if found, otherwise <code>false</code>.</returns>
        </member>
        <member name="M:NServiceBus.Extensibility.ContextBag.TryGet``1(System.String,``0@)">
            <summary>
            Tries to retrieves the specified type from the context.
            </summary>
            <typeparam name="T">The type to retrieve.</typeparam>
            <param name="key">The key of the value being looked up.</param>
            <param name="result">The type instance.</param>
            <returns><code>true</code> if found, otherwise <code>false</code>.</returns>
        </member>
        <member name="M:NServiceBus.Extensibility.ContextBag.GetOrCreate``1">
            <summary>
            Gets the requested extension, a new one will be created if needed.
            </summary>
        </member>
        <member name="M:NServiceBus.Extensibility.ContextBag.Set``1(``0)">
            <summary>
            Stores the type instance in the context.
            </summary>
            <typeparam name="T">The type to store.</typeparam>
            <param name="t">The instance type to store.</param>
        </member>
        <member name="M:NServiceBus.Extensibility.ContextBag.Remove``1">
            <summary>
            Removes the instance type from the context.
            </summary>
            <typeparam name="T">The type to remove.</typeparam>
        </member>
        <member name="M:NServiceBus.Extensibility.ContextBag.Remove(System.String)">
            <summary>
            Removes the instance type from the context.
            </summary>
            <param name="key">The key of the value being removed.</param>
        </member>
        <member name="M:NServiceBus.Extensibility.ContextBag.Set``1(System.String,``0)">
            <summary>
            Stores the passed instance in the context.
            </summary>
        </member>
        <member name="M:NServiceBus.Extensibility.ContextBag.Merge(NServiceBus.Extensibility.ContextBag)">
            <summary>
            Merges the passed context into this one.
            </summary>
            <param name="context">The source context.</param>
        </member>
        <member name="T:NServiceBus.IPipelineContext">
            <summary>
            The context for the current message handling pipeline.
            </summary>
        </member>
        <member name="M:NServiceBus.IPipelineContext.Send(System.Object,NServiceBus.SendOptions)">
            <summary>
            Sends the provided message.
            </summary>
            <param name="message">The message to send.</param>
            <param name="options">The options for the send.</param>
        </member>
        <member name="M:NServiceBus.IPipelineContext.Send``1(System.Action{``0},NServiceBus.SendOptions)">
            <summary>
            Instantiates a message of type T and sends it.
            </summary>
            <typeparam name="T">The type of message, usually an interface.</typeparam>
            <param name="messageConstructor">An action which initializes properties of the message.</param>
            <param name="options">The options for the send.</param>
        </member>
        <member name="M:NServiceBus.IPipelineContext.Publish(System.Object,NServiceBus.PublishOptions)">
            <summary>
            Publish the message to subscribers.
            </summary>
            <param name="message">The message to publish.</param>
            <param name="options">The options for the publish.</param>
        </member>
        <member name="M:NServiceBus.IPipelineContext.Publish``1(System.Action{``0},NServiceBus.PublishOptions)">
            <summary>
            Instantiates a message of type T and publishes it.
            </summary>
            <typeparam name="T">The type of message, usually an interface.</typeparam>
            <param name="messageConstructor">An action which initializes properties of the message.</param>
            <param name="publishOptions">Specific options for this event.</param>
        </member>
        <member name="T:NServiceBus.IPipelineContextExtensions">
            <summary>
            Syntactic sugar for <see cref="T:NServiceBus.IPipelineContext" />.
            </summary>
        </member>
        <member name="M:NServiceBus.IPipelineContextExtensions.Send(NServiceBus.IPipelineContext,System.Object)">
            <summary>
            Sends the provided message.
            </summary>
            <param name="context">The instance of <see cref="T:NServiceBus.IPipelineContext" /> to use for the action.</param>
            <param name="message">The message to send.</param>
        </member>
        <member name="M:NServiceBus.IPipelineContextExtensions.Send``1(NServiceBus.IPipelineContext,System.Action{``0})">
            <summary>
            Instantiates a message of <typeparamref name="T" /> and sends it.
            </summary>
            <typeparam name="T">The type of message, usually an interface.</typeparam>
            <param name="context">The instance of <see cref="T:NServiceBus.IPipelineContext" /> to use for the action.</param>
            <param name="messageConstructor">An action which initializes properties of the message.</param>
            <remarks>
            The message will be sent to the destination configured for <typeparamref name="T" />.
            </remarks>
        </member>
        <member name="M:NServiceBus.IPipelineContextExtensions.Send(NServiceBus.IPipelineContext,System.String,System.Object)">
            <summary>
            Sends the message.
            </summary>
            <param name="context">The instance of <see cref="T:NServiceBus.IPipelineContext" /> to use for the action.</param>
            <param name="destination">The address of the destination to which the message will be sent.</param>
            <param name="message">The message to send.</param>
        </member>
        <member name="M:NServiceBus.IPipelineContextExtensions.Send``1(NServiceBus.IPipelineContext,System.String,System.Action{``0})">
            <summary>
            Instantiates a message of type T and sends it to the given destination.
            </summary>
            <typeparam name="T">The type of message, usually an interface.</typeparam>
            <param name="context">The instance of <see cref="T:NServiceBus.IPipelineContext" /> to use for the action.</param>
            <param name="destination">The destination to which the message will be sent.</param>
            <param name="messageConstructor">An action which initializes properties of the message.</param>
        </member>
        <member name="M:NServiceBus.IPipelineContextExtensions.SendLocal(NServiceBus.IPipelineContext,System.Object)">
            <summary>
            Sends the message back to the current endpoint.
            </summary>
            <param name="context">Object being extended.</param>
            <param name="message">The message to send.</param>
        </member>
        <member name="M:NServiceBus.IPipelineContextExtensions.SendLocal``1(NServiceBus.IPipelineContext,System.Action{``0})">
            <summary>
            Instantiates a message of type T and sends it back to the current endpoint.
            </summary>
            <typeparam name="T">The type of message, usually an interface.</typeparam>
            <param name="context">Object being extended.</param>
            <param name="messageConstructor">An action which initializes properties of the message.</param>
        </member>
        <member name="M:NServiceBus.IPipelineContextExtensions.Publish(NServiceBus.IPipelineContext,System.Object)">
            <summary>
            Publish the message to subscribers.
            </summary>
            <param name="context">The instance of <see cref="T:NServiceBus.IPipelineContext" /> to use for the action.</param>
            <param name="message">The message to publish.</param>
        </member>
        <member name="M:NServiceBus.IPipelineContextExtensions.Publish``1(NServiceBus.IPipelineContext)">
            <summary>
            Publish the message to subscribers.
            </summary>
            <param name="context">The instance of <see cref="T:NServiceBus.IPipelineContext" /> to use for the action.</param>
            <typeparam name="T">The message type.</typeparam>
        </member>
        <member name="M:NServiceBus.IPipelineContextExtensions.Publish``1(NServiceBus.IPipelineContext,System.Action{``0})">
            <summary>
            Instantiates a message of type T and publishes it.
            </summary>
            <typeparam name="T">The type of message, usually an interface.</typeparam>
            <param name="context">The instance of <see cref="T:NServiceBus.IPipelineContext" /> to use for the action.</param>
            <param name="messageConstructor">An action which initializes properties of the message.</param>
        </member>
        <member name="T:NServiceBus.IMessageSession">
            <summary>
            A session which provides basic message operations.
            </summary>
        </member>
        <member name="M:NServiceBus.IMessageSession.Send(System.Object,NServiceBus.SendOptions)">
            <summary>
            Sends the provided message.
            </summary>
            <param name="message">The message to send.</param>
            <param name="options">The options for the send.</param>
        </member>
        <member name="M:NServiceBus.IMessageSession.Send``1(System.Action{``0},NServiceBus.SendOptions)">
            <summary>
            Instantiates a message of type T and sends it.
            </summary>
            <typeparam name="T">The type of message, usually an interface.</typeparam>
            <param name="messageConstructor">An action which initializes properties of the message.</param>
            <param name="options">The options for the send.</param>
        </member>
        <member name="M:NServiceBus.IMessageSession.Publish(System.Object,NServiceBus.PublishOptions)">
            <summary>
            Publish the message to subscribers.
            </summary>
            <param name="message">The message to publish.</param>
            <param name="options">The options for the publish.</param>
        </member>
        <member name="M:NServiceBus.IMessageSession.Publish``1(System.Action{``0},NServiceBus.PublishOptions)">
            <summary>
            Instantiates a message of type T and publishes it.
            </summary>
            <typeparam name="T">The type of message, usually an interface.</typeparam>
            <param name="messageConstructor">An action which initializes properties of the message.</param>
            <param name="publishOptions">Specific options for this event.</param>
        </member>
        <member name="M:NServiceBus.IMessageSession.Subscribe(System.Type,NServiceBus.SubscribeOptions)">
            <summary>
            Subscribes to receive published messages of the specified type.
            This method is only necessary if you turned off auto-subscribe.
            </summary>
            <param name="eventType">The type of event to subscribe to.</param>
            <param name="options">Options for the subscribe.</param>
        </member>
        <member name="M:NServiceBus.IMessageSession.Unsubscribe(System.Type,NServiceBus.UnsubscribeOptions)">
            <summary>
            Unsubscribes to receive published messages of the specified type.
            </summary>
            <param name="eventType">The type of event to unsubscribe to.</param>
            <param name="options">Options for the subscribe.</param>
        </member>
        <member name="T:NServiceBus.IMessageSessionExtensions">
            <summary>
            Syntactic sugar for <see cref="T:NServiceBus.IMessageSession" />.
            </summary>
        </member>
        <member name="M:NServiceBus.IMessageSessionExtensions.Send(NServiceBus.IMessageSession,System.Object)">
            <summary>
            Sends the provided message.
            </summary>
            <param name="session">The instance of <see cref="T:NServiceBus.IMessageSession" /> to use for the action.</param>
            <param name="message">The message to send.</param>
        </member>
        <member name="M:NServiceBus.IMessageSessionExtensions.Send``1(NServiceBus.IMessageSession,System.Action{``0})">
            <summary>
            Instantiates a message of <typeparamref name="T" /> and sends it.
            </summary>
            <typeparam name="T">The type of message, usually an interface.</typeparam>
            <param name="session">The instance of <see cref="T:NServiceBus.IMessageSession" /> to use for the action.</param>
            <param name="messageConstructor">An action which initializes properties of the message.</param>
            <remarks>
            The message will be sent to the destination configured for <typeparamref name="T" />.
            </remarks>
        </member>
        <member name="M:NServiceBus.IMessageSessionExtensions.Send(NServiceBus.IMessageSession,System.String,System.Object)">
            <summary>
            Sends the message.
            </summary>
            <param name="session">The instance of <see cref="T:NServiceBus.IMessageSession" /> to use for the action.</param>
            <param name="destination">The address of the destination to which the message will be sent.</param>
            <param name="message">The message to send.</param>
        </member>
        <member name="M:NServiceBus.IMessageSessionExtensions.Send``1(NServiceBus.IMessageSession,System.String,System.Action{``0})">
            <summary>
            Instantiates a message of type T and sends it to the given destination.
            </summary>
            <typeparam name="T">The type of message, usually an interface.</typeparam>
            <param name="session">The instance of <see cref="T:NServiceBus.IMessageSession" /> to use for the action.</param>
            <param name="destination">The destination to which the message will be sent.</param>
            <param name="messageConstructor">An action which initializes properties of the message.</param>
        </member>
        <member name="M:NServiceBus.IMessageSessionExtensions.SendLocal(NServiceBus.IMessageSession,System.Object)">
            <summary>
            Sends the message back to the current endpoint.
            </summary>
            <param name="session">Object being extended.</param>
            <param name="message">The message to send.</param>
        </member>
        <member name="M:NServiceBus.IMessageSessionExtensions.SendLocal``1(NServiceBus.IMessageSession,System.Action{``0})">
            <summary>
            Instantiates a message of type T and sends it back to the current endpoint.
            </summary>
            <typeparam name="T">The type of message, usually an interface.</typeparam>
            <param name="session">Object being extended.</param>
            <param name="messageConstructor">An action which initializes properties of the message.</param>
        </member>
        <member name="M:NServiceBus.IMessageSessionExtensions.Publish(NServiceBus.IMessageSession,System.Object)">
            <summary>
            Publish the message to subscribers.
            </summary>
            <param name="session">The instance of <see cref="T:NServiceBus.IMessageSession" /> to use for the action.</param>
            <param name="message">The message to publish.</param>
        </member>
        <member name="M:NServiceBus.IMessageSessionExtensions.Publish``1(NServiceBus.IMessageSession)">
            <summary>
            Publish the message to subscribers.
            </summary>
            <param name="session">The instance of <see cref="T:NServiceBus.IMessageSession" /> to use for the action.</param>
            <typeparam name="T">The message type.</typeparam>
        </member>
        <member name="M:NServiceBus.IMessageSessionExtensions.Publish``1(NServiceBus.IMessageSession,System.Action{``0})">
            <summary>
            Instantiates a message of type T and publishes it.
            </summary>
            <typeparam name="T">The type of message, usually an interface.</typeparam>
            <param name="session">The instance of <see cref="T:NServiceBus.IMessageSession" /> to use for the action.</param>
            <param name="messageConstructor">An action which initializes properties of the message.</param>
        </member>
        <member name="M:NServiceBus.IMessageSessionExtensions.Subscribe(NServiceBus.IMessageSession,System.Type)">
            <summary>
            Subscribes to receive published messages of the specified type.
            This method is only necessary if you turned off auto-subscribe.
            </summary>
            <param name="session">Object being extended.</param>
            <param name="messageType">The type of message to subscribe to.</param>
        </member>
        <member name="M:NServiceBus.IMessageSessionExtensions.Subscribe``1(NServiceBus.IMessageSession)">
            <summary>
            Subscribes to receive published messages of type T.
            This method is only necessary if you turned off auto-subscribe.
            </summary>
            <param name="session">Object being extended.</param>
            <typeparam name="T">The type of message to subscribe to.</typeparam>
        </member>
        <member name="M:NServiceBus.IMessageSessionExtensions.Unsubscribe(NServiceBus.IMessageSession,System.Type)">
            <summary>
            Unsubscribes from receiving published messages of the specified type.
            </summary>
            <param name="session">Object being extended.</param>
            <param name="messageType">The type of message to subscribe to.</param>
        </member>
        <member name="M:NServiceBus.IMessageSessionExtensions.Unsubscribe``1(NServiceBus.IMessageSession)">
            <summary>
            Unsubscribes from receiving published messages of the specified type.
            </summary>
            <param name="session">Object being extended.</param>
            <typeparam name="T">The type of message to unsubscribe from.</typeparam>
        </member>
        <member name="T:NServiceBus.IMessageProcessingContext">
            <summary>
            The context of the currently processed message within the processing pipeline.
            </summary>
        </member>
        <member name="P:NServiceBus.IMessageProcessingContext.MessageId">
            <summary>
            The Id of the currently processed message.
            </summary>
        </member>
        <member name="P:NServiceBus.IMessageProcessingContext.ReplyToAddress">
            <summary>
            The address of the endpoint that sent the current message being handled.
            </summary>
        </member>
        <member name="P:NServiceBus.IMessageProcessingContext.MessageHeaders">
            <summary>
            Gets the list of key/value pairs found in the header of the message.
            </summary>
        </member>
        <member name="M:NServiceBus.IMessageProcessingContext.Reply(System.Object,NServiceBus.ReplyOptions)">
            <summary>
            Sends the message to the endpoint which sent the message currently being handled.
            </summary>
            <param name="message">The message to send.</param>
            <param name="options">Options for this reply.</param>
        </member>
        <member name="M:NServiceBus.IMessageProcessingContext.Reply``1(System.Action{``0},NServiceBus.ReplyOptions)">
            <summary>
            Instantiates a message of type T and performs a regular <see cref="M:NServiceBus.IMessageProcessingContext.Reply(System.Object,NServiceBus.ReplyOptions)" />.
            </summary>
            <typeparam name="T">The type of message, usually an interface.</typeparam>
            <param name="messageConstructor">An action which initializes properties of the message.</param>
            <param name="options">Options for this reply.</param>
        </member>
        <member name="M:NServiceBus.IMessageProcessingContext.ForwardCurrentMessageTo(System.String)">
            <summary>
            Forwards the current message being handled to the destination maintaining
            all of its transport-level properties and headers.
            </summary>
        </member>
        <member name="T:NServiceBus.IMessageProcessingContextExtensions">
            <summary>
            Syntactic sugar for <see cref="T:NServiceBus.IMessageProcessingContext" />.
            </summary>
        </member>
        <member name="M:NServiceBus.IMessageProcessingContextExtensions.Reply(NServiceBus.IMessageProcessingContext,System.Object)">
            <summary>
            Sends the message to the endpoint which sent the message currently being handled on this thread.
            </summary>
            <param name="context">Object being extended.</param>
            <param name="message">The message to send.</param>
        </member>
        <member name="M:NServiceBus.IMessageProcessingContextExtensions.Reply``1(NServiceBus.IMessageProcessingContext,System.Action{``0})">
            <summary>
            Instantiates a message of type T and performs a regular Reply.
            </summary>
            <typeparam name="T">The type of message, usually an interface.</typeparam>
            <param name="context">Object being extended.</param>
            <param name="messageConstructor">An action which initializes properties of the message.</param>
        </member>
        <member name="T:NServiceBus.ConsistencyGuarantees.TransactionModeSettingsExtensions">
            <summary>
            Extension methods to provide access to various consistency related convenience methods.
            </summary>
        </member>
        <member name="M:NServiceBus.ConsistencyGuarantees.TransactionModeSettingsExtensions.GetRequiredTransactionModeForReceives(NServiceBus.Settings.ReadOnlySettings)">
            <summary>
            Returns the transactions required by the transport.
            </summary>
        </member>
        <member name="T:NServiceBus.Persistence.CompletableSynchronizedStorageSession">
            <summary>
            Represents a storage session from point of view of the infrastructure.
            </summary>
        </member>
        <member name="M:NServiceBus.Persistence.CompletableSynchronizedStorageSession.CompleteAsync">
            <summary>
            Completes the session by saving the changes.
            </summary>
        </member>
        <member name="T:NServiceBus.Persistence.Legacy.MsmqPersistence">
            <summary>
            Used to enable Msmq persistence.
            </summary>
        </member>
        <member name="T:NServiceBus.Persistence.ISynchronizedStorageAdapter">
            <summary>
            Converts the outbox transaction into a synchronized storage session if possible.
            </summary>
        </member>
        <member name="M:NServiceBus.Persistence.ISynchronizedStorageAdapter.TryAdapt(NServiceBus.Outbox.OutboxTransaction,NServiceBus.Extensibility.ContextBag)">
            <summary>
            Returns a synchronized storage session based on the outbox transaction if possible.
            </summary>
            <param name="transaction">Outbox transaction.</param>
            <param name="context">Context.</param>
            <returns>Session or null, if unable to adapt.</returns>
        </member>
        <member name="M:NServiceBus.Persistence.ISynchronizedStorageAdapter.TryAdapt(NServiceBus.Transport.TransportTransaction,NServiceBus.Extensibility.ContextBag)">
            <summary>
            Returns a synchronized storage session based on the outbox transaction if possible.
            </summary>
            <param name="transportTransaction">Transport transaction.</param>
            <param name="context">Context.</param>
            <returns>Session or null, if unable to adapt.</returns>
        </member>
        <member name="T:NServiceBus.Persistence.SynchronizedStorageSession">
            <summary>
            Represents a storage session.
            </summary>
        </member>
        <member name="T:NServiceBus.Persistence.ISynchronizedStorage">
            <summary>
            Represents a storage to which the writes are synchronized with message receiving i.e. message receive is acknowledged
            only if data has been successfully saved.
            </summary>
        </member>
        <member name="M:NServiceBus.Persistence.ISynchronizedStorage.OpenSession(NServiceBus.Extensibility.ContextBag)">
            <summary>
            Begins a new storage session which is an atomic unit of work.
            </summary>
            <param name="contextBag">The context information.</param>
        </member>
        <member name="T:NServiceBus.Persistence.StorageType">
            <summary>
            The storage types used for NServiceBus needs.
            </summary>
        </member>
        <member name="M:NServiceBus.Persistence.StorageType.ToString">
            <inheritdoc />
        </member>
        <member name="T:NServiceBus.Persistence.StorageType.Timeouts">
            <summary>
            Storage for timeouts.
            </summary>
        </member>
        <member name="T:NServiceBus.Persistence.StorageType.Subscriptions">
            <summary>
            Storage for subscriptions.
            </summary>
        </member>
        <member name="T:NServiceBus.Persistence.StorageType.Sagas">
            <summary>
            Storage for sagas.
            </summary>
        </member>
        <member name="T:NServiceBus.Persistence.StorageType.GatewayDeduplication">
            <summary>
            Storage for gateway de-duplication.
            </summary>
        </member>
        <member name="T:NServiceBus.Persistence.StorageType.Outbox">
            <summary>
            Storage for outbox.
            </summary>
        </member>
        <member name="T:NServiceBus.Persistence.PersistenceDefinition">
            <summary>
            Base class for persistence definitions.
            </summary>
        </member>
        <member name="M:NServiceBus.Persistence.PersistenceDefinition.Supports``1(System.Action{NServiceBus.Settings.SettingsHolder})">
            <summary>
            Used by the storage definitions to declare what they support.
            </summary>
        </member>
        <member name="M:NServiceBus.Persistence.PersistenceDefinition.Supports(NServiceBus.Persistence.Storage,System.Action{NServiceBus.Settings.SettingsHolder})">
            <summary>
            Used by the storage definitions to declare what they support.
            </summary>
        </member>
        <member name="M:NServiceBus.Persistence.PersistenceDefinition.Defaults(System.Action{NServiceBus.Settings.SettingsHolder})">
            <summary>
            Used by the storage definitions to declare what they support.
            </summary>
        </member>
        <member name="M:NServiceBus.Persistence.PersistenceDefinition.HasSupportFor(NServiceBus.Persistence.Storage)">
            <summary>
            True if supplied storage is supported.
            </summary>
        </member>
        <member name="M:NServiceBus.Persistence.PersistenceDefinition.HasSupportFor``1">
            <summary>
            True if supplied storage is supported.
            </summary>
        </member>
        <member name="M:NServiceBus.Persistence.PersistenceDefinition.HasSupportFor(System.Type)">
            <summary>
            True if supplied storage is supported.
            </summary>
        </member>
        <member name="T:NServiceBus.Config.MsmqSubscriptionStorageConfig">
            <summary>
            Contains the properties representing the MsmqSubscriptionStorage configuration section.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.MsmqSubscriptionStorageConfig.Queue">
            <summary>
            The queue where subscription data will be stored.
            Use the "queue@machine" convention.
            </summary>
        </member>
        <member name="T:NServiceBus.Config.KeyFormat">
            <summary>
            The format in which an encryption value is specified.
            </summary>
        </member>
        <member name="F:NServiceBus.Config.KeyFormat.Ascii">
            <summary>
            Key is specified as in ASCII characters.
            </summary>
        </member>
        <member name="F:NServiceBus.Config.KeyFormat.Base64">
            <summary>
            Key is specified as a Base64 encoded string.
            </summary>
        </member>
        <member name="T:NServiceBus.Config.RijndaelExpiredKey">
            <summary>
            A configuration element representing a Rijndael encryption key.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.RijndaelExpiredKey.Key">
            <summary>
            The keys value.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.RijndaelExpiredKey.KeyIdentifier">
            <summary>
            Identifies this key for it to be used for decryption.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.RijndaelExpiredKey.KeyFormat">
            <summary>
            The data format in which the key is stored.
            </summary>
        </member>
        <member name="T:NServiceBus.Config.RijndaelExpiredKeyCollection">
            <summary>
            A configuration element collection of <see cref="T:NServiceBus.Config.RijndaelExpiredKey" />s.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.RijndaelExpiredKeyCollection.CollectionType">
            <summary>
            Returns AddRemoveClearMap.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.RijndaelExpiredKeyCollection.Item(System.Int32)">
            <summary>
            Gets/sets the <see cref="T:NServiceBus.Config.RijndaelExpiredKey" /> at the given index.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.RijndaelExpiredKeyCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:NServiceBus.Config.RijndaelExpiredKey" /> for the given key.
            </summary>
        </member>
        <member name="M:NServiceBus.Config.RijndaelExpiredKeyCollection.CreateNewElement">
            <summary>
            Creates a new <see cref="T:NServiceBus.Config.RijndaelExpiredKey" />.
            </summary>
        </member>
        <member name="M:NServiceBus.Config.RijndaelExpiredKeyCollection.CreateNewElement(System.String)">
            <summary>
            Creates a new <see cref="T:NServiceBus.Config.RijndaelExpiredKey" />, setting its <see cref="P:NServiceBus.Config.RijndaelExpiredKey.Key" /> property to the
            given value.
            </summary>
        </member>
        <member name="M:NServiceBus.Config.RijndaelExpiredKeyCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Returns the Messages property of the given <see cref="T:NServiceBus.Config.RijndaelExpiredKey" /> element.
            </summary>
        </member>
        <member name="M:NServiceBus.Config.RijndaelExpiredKeyCollection.IndexOf(NServiceBus.Config.RijndaelExpiredKey)">
            <summary>
            Calls BaseIndexOf on the given <see cref="T:NServiceBus.Config.RijndaelExpiredKey" />.
            </summary>
        </member>
        <member name="M:NServiceBus.Config.RijndaelExpiredKeyCollection.Add(NServiceBus.Config.RijndaelExpiredKey)">
            <summary>
            Calls BaseAdd.
            </summary>
        </member>
        <member name="M:NServiceBus.Config.RijndaelExpiredKeyCollection.BaseAdd(System.Configuration.ConfigurationElement)">
            <summary>
            Calls BaseAdd with true as the additional parameter.
            </summary>
        </member>
        <member name="M:NServiceBus.Config.RijndaelExpiredKeyCollection.Remove(NServiceBus.Config.RijndaelExpiredKey)">
            <summary>
            If the key exists, calls BaseRemove on it.
            </summary>
        </member>
        <member name="M:NServiceBus.Config.RijndaelExpiredKeyCollection.RemoveAt(System.Int32)">
            <summary>
            Calls BaseRemoveAt.
            </summary>
        </member>
        <member name="M:NServiceBus.Config.RijndaelExpiredKeyCollection.Remove(System.String)">
            <summary>
            Calls BaseRemove.
            </summary>
        </member>
        <member name="M:NServiceBus.Config.RijndaelExpiredKeyCollection.Clear">
            <summary>
            Calls BaseClear.
            </summary>
        </member>
        <member name="M:NServiceBus.Config.RijndaelExpiredKeyCollection.IsReadOnly">
            <summary>
            True if the collection is readonly.
            </summary>
        </member>
        <member name="T:NServiceBus.Config.AuditConfig">
            <summary>
            Config section for the auditing feature.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.AuditConfig.QueueName">
            <summary>
            Gets/sets the address to which messages received will be forwarded.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.AuditConfig.OverrideTimeToBeReceived">
            <summary>
            Gets/sets the time to be received set on forwarded messages.
            </summary>
        </member>
        <member name="T:NServiceBus.Config.ConfigurationSource.DefaultConfigurationSource">
            <summary>
            A configuration source implementation on top of ConfigurationManager.
            </summary>
        </member>
        <member name="T:NServiceBus.Config.ConfigurationSource.IConfigurationSource">
            <summary>
            Abstraction of a source of configuration data.
            Implement this interface if you want to change the source of all configuration data.
            If you want to change the source of only a specific set of configuration data,
            implement <see cref="T:NServiceBus.Config.ConfigurationSource.IProvideConfiguration`1" /> instead.
            </summary>
        </member>
        <member name="M:NServiceBus.Config.ConfigurationSource.IConfigurationSource.GetConfiguration``1">
            <summary>
            Returns configuration data based on the given type.
            </summary>
        </member>
        <member name="T:NServiceBus.Config.ConfigurationSource.IProvideConfiguration`1">
            <summary>
            Abstraction of a configuration source for a given piece of configuration data.
            </summary>
        </member>
        <member name="M:NServiceBus.Config.ConfigurationSource.IProvideConfiguration`1.GetConfiguration">
            <summary>
            Returns configuration data for the given type.
            </summary>
        </member>
        <member name="T:NServiceBus.Config.Logging">
            <summary>
            Logging ConfigurationSection.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.Logging.Threshold">
            <summary>
            The minimal logging level above which all calls to the log will be written.
            </summary>
        </member>
        <member name="T:NServiceBus.Config.MessageEndpointMapping">
            <summary>
            A configuration element representing which message types map to which endpoint.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.MessageEndpointMapping.Messages">
            <summary>
            A string defining the message assembly, or single message type.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.MessageEndpointMapping.Endpoint">
            <summary>
            The endpoint named according to "queue@machine".
            </summary>
        </member>
        <member name="P:NServiceBus.Config.MessageEndpointMapping.AssemblyName">
            <summary>
            The message assembly for the endpoint mapping.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.MessageEndpointMapping.TypeFullName">
            <summary>
            The fully qualified name of the message type. Define this if you want to map a single message type to the endpoint.
            </summary>
            <remarks>Type will take preference above namespace.</remarks>
        </member>
        <member name="P:NServiceBus.Config.MessageEndpointMapping.Namespace">
            <summary>
            The message namespace. Define this if you want to map all the types in the namespace to the endpoint.
            </summary>
            <remarks>Sub-namespaces will not be mapped.</remarks>
        </member>
        <member name="M:NServiceBus.Config.MessageEndpointMapping.CompareTo(NServiceBus.Config.MessageEndpointMapping)">
            <summary>
            Comparison support.
            </summary>
        </member>
        <member name="M:NServiceBus.Config.MessageEndpointMapping.Configure(System.Action{System.Type,System.String})">
            <summary>
            Uses the configuration properties to configure the endpoint mapping.
            </summary>
        </member>
        <member name="T:NServiceBus.Config.MessageEndpointMappingCollection">
            <summary>
            A configuration element collection of MessageEndpointMappings.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.MessageEndpointMappingCollection.CollectionType">
            <summary>
            Returns AddRemoveClearMap.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.MessageEndpointMappingCollection.AddElementName">
            <summary>
            Calls the base AddElementName.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.MessageEndpointMappingCollection.ClearElementName">
            <summary>
            Calls the base ClearElementName.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.MessageEndpointMappingCollection.RemoveElementName">
            <summary>
            Returns the base RemoveElementName.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.MessageEndpointMappingCollection.Count">
            <summary>
            Returns the base Count.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.MessageEndpointMappingCollection.Item(System.Int32)">
            <summary>
            Gets/sets the MessageEndpointMapping at the given index.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.MessageEndpointMappingCollection.Item(System.String)">
            <summary>
            Gets the MessageEndpointMapping for the given name.
            </summary>
        </member>
        <member name="M:NServiceBus.Config.MessageEndpointMappingCollection.CreateNewElement">
            <summary>
            Creates a new MessageEndpointMapping.
            </summary>
        </member>
        <member name="M:NServiceBus.Config.MessageEndpointMappingCollection.CreateNewElement(System.String)">
            <summary>
            Creates a new MessageEndpointMapping, setting its Message property to the given name.
            </summary>
        </member>
        <member name="M:NServiceBus.Config.MessageEndpointMappingCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Returns the Messages property of the given MessageEndpointMapping element.
            </summary>
        </member>
        <member name="M:NServiceBus.Config.MessageEndpointMappingCollection.IndexOf(NServiceBus.Config.MessageEndpointMapping)">
            <summary>
            Calls BaseIndexOf on the given mapping.
            </summary>
        </member>
        <member name="M:NServiceBus.Config.MessageEndpointMappingCollection.Add(NServiceBus.Config.MessageEndpointMapping)">
            <summary>
            Calls BaseAdd.
            </summary>
        </member>
        <member name="M:NServiceBus.Config.MessageEndpointMappingCollection.BaseAdd(System.Configuration.ConfigurationElement)">
            <summary>
            Calls BaseAdd with true as the additional parameter.
            </summary>
        </member>
        <member name="M:NServiceBus.Config.MessageEndpointMappingCollection.Remove(NServiceBus.Config.MessageEndpointMapping)">
            <summary>
            If the mapping exists, calls BaseRemove on it.
            </summary>
        </member>
        <member name="M:NServiceBus.Config.MessageEndpointMappingCollection.RemoveAt(System.Int32)">
            <summary>
            Calls BaseRemoveAt.
            </summary>
        </member>
        <member name="M:NServiceBus.Config.MessageEndpointMappingCollection.Remove(System.String)">
            <summary>
            Calls BaseRemove.
            </summary>
        </member>
        <member name="M:NServiceBus.Config.MessageEndpointMappingCollection.Clear">
            <summary>
            Calls BaseClear.
            </summary>
        </member>
        <member name="M:NServiceBus.Config.MessageEndpointMappingCollection.IsReadOnly">
            <summary>
            True if the collection is readonly.
            </summary>
        </member>
        <member name="T:NServiceBus.Config.MessageForwardingInCaseOfFaultConfig">
            <summary>
            Message Forwarding In Case Of Fault Config.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.MessageForwardingInCaseOfFaultConfig.ErrorQueue">
            <summary>
            The queue to which errors will be forwarded.
            </summary>
        </member>
        <member name="T:NServiceBus.Config.RijndaelEncryptionServiceConfig">
            <summary>
            Used to configure Rijndael encryption service.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.RijndaelEncryptionServiceConfig.Key">
            <summary>
            The encryption key.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.RijndaelEncryptionServiceConfig.KeyIdentifier">
            <summary>
            Identifies this key for it to be used for decryption.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.RijndaelEncryptionServiceConfig.ExpiredKeys">
            <summary>
            Contains the encryption keys to use.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.RijndaelEncryptionServiceConfig.KeyFormat">
            <summary>
            The data format in which the key is stored.
            </summary>
        </member>
        <member name="T:NServiceBus.Config.UnicastBusConfig">
            <summary>
            A configuration section for UnicastBus specific settings.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.UnicastBusConfig.TimeToBeReceivedOnForwardedMessages">
            <summary>
            Gets/sets the time to be received set on forwarded messages.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.UnicastBusConfig.TimeoutManagerAddress">
            <summary>
            Gets/sets the address that the timeout manager will use to send and receive messages.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.UnicastBusConfig.MessageEndpointMappings">
            <summary>
            Contains the mappings from message types (or groups of them) to endpoints.
            </summary>
        </member>
        <member name="T:NServiceBus.TransportReceiveContext">
            <summary>
            Context containing a physical message.
            </summary>
        </member>
        <member name="M:NServiceBus.TransportReceiveContext.#ctor(NServiceBus.Transport.IncomingMessage,NServiceBus.Transport.TransportTransaction,System.Threading.CancellationTokenSource,NServiceBus.Pipeline.IBehaviorContext)">
            <summary>
            Creates a new transport receive context.
            </summary>
            <param name="receivedMessage">The received message.</param>
            <param name="transportTransaction">The transport transaction.</param>
            <param name="cancellationTokenSource">
            Allows the pipeline to flag that it has been aborted and the receive operation should be rolled back.
            It also allows the transport to communicate to the pipeline to abort if possible.
            </param>
            <param name="parentContext">The parent context.</param>
        </member>
        <member name="P:NServiceBus.TransportReceiveContext.Message">
            <summary>
            The physical message being processed.
            </summary>
        </member>
        <member name="M:NServiceBus.TransportReceiveContext.AbortReceiveOperation">
            <summary>
            Allows the pipeline to flag that it has been aborted and the receive operation should be rolled back.
            </summary>
        </member>
        <member name="T:NServiceBus.MessageDrivenSubscriptionsConfigExtensions">
            <summary>
            Provides extensions for configuring message driven subscriptions.
            </summary>
        </member>
        <member name="M:NServiceBus.MessageDrivenSubscriptionsConfigExtensions.SubscriptionAuthorizer``1(NServiceBus.TransportExtensions{``0},System.Func{NServiceBus.Pipeline.IIncomingPhysicalMessageContext,System.Boolean})">
            <summary>
            Sets an authorizer to be used when processing a <see cref="F:NServiceBus.MessageIntentEnum.Subscribe" /> or
            <see cref="F:NServiceBus.MessageIntentEnum.Unsubscribe" /> message.
            </summary>
            <param name="transportExtensions">The <see cref="T:NServiceBus.TransportExtensions`1" /> to extend.</param>
            <param name="authorizer">The authorization callback to execute. If the callback returns <code>true</code> for a message, it is authorized to subscribe/unsubscribe, otherwhise it is not authorized.</param>
        </member>
        <member name="M:NServiceBus.MessageDrivenSubscriptionsConfigExtensions.RegisterPublisher``1(NServiceBus.RoutingSettings{``0},System.Type,System.String)">
            <summary>
            Registers a publisher endpoint for a given event type.
            </summary>
            <param name="routingSettings">The <see cref="T:NServiceBus.RoutingSettings`1" /> to extend.</param>
            <param name="eventType">The event type.</param>
            <param name="publisherEndpoint">The publisher endpoint.</param>
        </member>
        <member name="M:NServiceBus.MessageDrivenSubscriptionsConfigExtensions.RegisterPublisher``1(NServiceBus.RoutingSettings{``0},System.Reflection.Assembly,System.String)">
            <summary>
            Registers a publisher endpoint for all event types in a given assembly.
            </summary>
            <param name="routingSettings">The <see cref="T:NServiceBus.RoutingSettings`1" /> to extend.</param>
            <param name="assembly">The assembly containing the event types.</param>
            <param name="publisherEndpoint">The publisher endpoint.</param>
        </member>
        <member name="M:NServiceBus.MessageDrivenSubscriptionsConfigExtensions.RegisterPublisher``1(NServiceBus.RoutingSettings{``0},System.Reflection.Assembly,System.String,System.String)">
            <summary>
            Registers a publisher endpoint for all event types in a given assembly and namespace.
            </summary>
            <param name="routingSettings">The <see cref="T:NServiceBus.RoutingSettings`1" /> to extend.</param>
            <param name="assembly">The assembly containing the event types.</param>
            <param name="namespace"> The namespace containing the event types. The given value must exactly match the target namespace.</param>
            <param name="publisherEndpoint">The publisher endpoint.</param>
        </member>
        <member name="T:NServiceBus.EndpointInstanceExtensions">
            <summary>
            Provides MSMQ-specific extensions to routing.
            </summary>
        </member>
        <member name="M:NServiceBus.EndpointInstanceExtensions.AtMachine(NServiceBus.Routing.EndpointInstance,System.String)">
            <summary>
            Returns an endpoint instance bound to a given machine name.
            </summary>
            <param name="instance">A plain instance.</param>
            <param name="machineName">Machine name.</param>
        </member>
        <member name="T:NServiceBus.IMessageHandlerContext">
            <summary>
            The context of the currently processed message for a message handler.
            </summary>
        </member>
        <member name="P:NServiceBus.IMessageHandlerContext.SynchronizedStorageSession">
            <summary>
            Gets the synchronized storage session for processing the current message. NServiceBus makes sure the changes made
            via this session will be persisted before the message receive is acknowledged.
            </summary>
        </member>
        <member name="M:NServiceBus.IMessageHandlerContext.HandleCurrentMessageLater">
            <summary>
            Moves the message being handled to the back of the list of available
            messages so it can be handled later.
            </summary>
        </member>
        <member name="M:NServiceBus.IMessageHandlerContext.DoNotContinueDispatchingCurrentMessageToHandlers">
            <summary>
            Tells the endpoint to stop dispatching the current message to additional
            handlers.
            </summary>
        </member>
        <member name="T:NServiceBus.IHandleMessages`1">
            <summary>
            Defines a message handler.
            </summary>
            <typeparam name="T">The type of message to be handled.</typeparam>
        </member>
        <member name="M:NServiceBus.IHandleMessages`1.Handle(`0,NServiceBus.IMessageHandlerContext)">
            <summary>
            Handles a message.
            </summary>
            <param name="message">The message to handle.</param>
            <param name="context">The context of the currently handled message.</param>
            <remarks>
            This method will be called when a message arrives on at the endpoint and should contain
            the custom logic to execute when the message is received.
            </remarks>
            <exception cref="T:System.Exception">This exception will be thrown if <code>null</code> is returned. Return a Task or mark the method as <code>async</code>.</exception>
        </member>
        <member name="T:NServiceBus.IEndpointInstance">
            <summary>
            Represents an endpoint in the running phase.
            </summary>
        </member>
        <member name="M:NServiceBus.IEndpointInstance.Stop">
            <summary>
            Stops the endpoint.
            </summary>
        </member>
        <member name="M:NServiceBus.InMemoryTransactionalStorageFeature.Setup(NServiceBus.Features.FeatureConfigurationContext)">
            <summary>
            Called when the features is activated.
            </summary>
        </member>
        <member name="T:NServiceBus.PendingTransportOperations">
            <summary>
            Represents the currently pending transport operations. The transport operations that are collected here will be
            dispatched in the batched dispatch stage of the pipeline.
            </summary>
            <remarks>This class is threadsafe.</remarks>
        </member>
        <member name="P:NServiceBus.PendingTransportOperations.Operations">
            <summary>
            Gets the currently pending transport operations.
            </summary>
        </member>
        <member name="P:NServiceBus.PendingTransportOperations.HasOperations">
            <summary>
            Indicates whether there are transport operations pending.
            </summary>
        </member>
        <member name="M:NServiceBus.PendingTransportOperations.Add(NServiceBus.Transport.TransportOperation)">
            <summary>
            Adds a transport operation.
            </summary>
            <param name="transportOperation">The transport operation to be added.</param>
        </member>
        <member name="M:NServiceBus.PendingTransportOperations.AddRange(NServiceBus.Transport.TransportOperation[])">
            <summary>
            Adds a range of transport operations.
            </summary>
            <param name="transportOperations">The transport operations to be added.</param>
        </member>
        <member name="T:NServiceBus.ImmediateDispatchOptionExtensions">
            <summary>
            Provides ways for the end user to request immediate dispatch of their messages.
            </summary>
        </member>
        <member name="M:NServiceBus.ImmediateDispatchOptionExtensions.RequireImmediateDispatch(NServiceBus.Extensibility.ExtendableOptions)">
            <summary>
            Requests the messsage to be dispatched to the transport immediately.
            This means that the message is ACKed by the transport as soon as the call to send returns.
            The message will not be enlisted in any current receive transaction even if the transport support it.
            </summary>
            <param name="options">The options being extended.</param>
        </member>
        <member name="M:NServiceBus.ImmediateDispatchOptionExtensions.RequiredImmediateDispatch(NServiceBus.Extensibility.ExtendableOptions)">
            <summary>
            Returns whether immediate dispatch has been request by <see cref="M:NServiceBus.ImmediateDispatchOptionExtensions.RequireImmediateDispatch(NServiceBus.Extensibility.ExtendableOptions)" /> or not.
            </summary>
            <param name="options">The options being extended.</param>
            <returns><c>True</c> if immediate dispatch was requested, <c>False</c> otherwise.</returns>
        </member>
        <member name="T:NServiceBus.Outbox.OutboxTransaction">
            <summary>
            Transaction in which storage operations must enlist to be consistent with the outbox operarations.
            </summary>
        </member>
        <member name="M:NServiceBus.Outbox.OutboxTransaction.Commit">
            <summary>
            Commits the outbox transaction.
            </summary>
        </member>
        <member name="T:NServiceBus.Outbox.IOutboxStorage">
            <summary>
            Implemented by the persisters to provide outbox storage capabilities.
            </summary>
        </member>
        <member name="M:NServiceBus.Outbox.IOutboxStorage.Get(System.String,NServiceBus.Extensibility.ContextBag)">
            <summary>
            Tries to find the given message in the outbox.
            </summary>
            <returns>
            If there is no <see cref="T:NServiceBus.Outbox.OutboxMessage" /> present for the given <paramref name="messageId" /> then null is
            returned.
            </returns>
        </member>
        <member name="M:NServiceBus.Outbox.IOutboxStorage.Store(NServiceBus.Outbox.OutboxMessage,NServiceBus.Outbox.OutboxTransaction,NServiceBus.Extensibility.ContextBag)">
            <summary>
            Stores the outbox message to enable deduplication an re-dispatching of related transport operations.
            </summary>
        </member>
        <member name="M:NServiceBus.Outbox.IOutboxStorage.SetAsDispatched(System.String,NServiceBus.Extensibility.ContextBag)">
            <summary>
            Tells the storage that the message has been dispatched and its now safe to clean up the transport operations.
            </summary>
        </member>
        <member name="M:NServiceBus.Outbox.IOutboxStorage.BeginTransaction(NServiceBus.Extensibility.ContextBag)">
            <summary>
            Creates the <see cref="T:NServiceBus.Outbox.OutboxTransaction" />.
            </summary>
            <param name="context">The current pipeline contex.</param>
            <returns>The created outbox transaction.</returns>
        </member>
        <member name="T:NServiceBus.Outbox.OutboxMessage">
            <summary>
            The Outbox message type.
            </summary>
        </member>
        <member name="M:NServiceBus.Outbox.OutboxMessage.#ctor(System.String,NServiceBus.Outbox.TransportOperation[])">
            <summary>
            Creates an instance of an <see cref="T:NServiceBus.Outbox.OutboxMessage" />.
            </summary>
            <param name="messageId">The message identifier of the incoming message.</param>
            <param name="operations">The outgoing transport operations to execute as part of this incoming message.</param>
        </member>
        <member name="P:NServiceBus.Outbox.OutboxMessage.MessageId">
            <summary>
            Gets the message identifier of the incoming message.
            </summary>
        </member>
        <member name="P:NServiceBus.Outbox.OutboxMessage.TransportOperations">
            <summary>
            The list of operations performed during the processing of the incoming message.
            </summary>
        </member>
        <member name="T:NServiceBus.Outbox.OutboxSettings">
            <summary>
            Custom settings related to the outbox feature.
            </summary>
        </member>
        <member name="T:NServiceBus.Outbox.TransportOperation">
            <summary>
            Outgoing message operation.
            </summary>
        </member>
        <member name="M:NServiceBus.Outbox.TransportOperation.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Byte[],System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Creates a new instance of a <see cref="T:NServiceBus.Outbox.TransportOperation" />.
            </summary>
            <param name="messageId">The identifier of the outgoing message.</param>
            <param name="options">The sending options.</param>
            <param name="body">The message body.</param>
            <param name="headers">The message headers.</param>
            .
        </member>
        <member name="P:NServiceBus.Outbox.TransportOperation.MessageId">
            <summary>
            Gets the identifier of the outgoing message.
            </summary>
        </member>
        <member name="P:NServiceBus.Outbox.TransportOperation.Options">
            <summary>
            Sending options.
            </summary>
        </member>
        <member name="P:NServiceBus.Outbox.TransportOperation.Body">
            <summary>
            Gets a byte array to the body content of the outgoing message.
            </summary>
        </member>
        <member name="P:NServiceBus.Outbox.TransportOperation.Headers">
            <summary>
            Gets outgoing message headers.
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.Subscriptions.MessageDrivenSubscriptions.Subscriber">
            <summary>
            Represents a subscriber in message-driven subscriptions.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Subscriptions.MessageDrivenSubscriptions.Subscriber.#ctor(System.String,System.String)">
            <summary>
            Creates a new subscriber.
            </summary>
            <param name="transportAddress">Transport address.</param>
            <param name="endpoint">Endpoint name (optional).</param>
        </member>
        <member name="P:NServiceBus.Unicast.Subscriptions.MessageDrivenSubscriptions.Subscriber.TransportAddress">
            <summary>
            The transport address of the subscriber.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Subscriptions.MessageDrivenSubscriptions.Subscriber.Endpoint">
            <summary>
            The endpoint name of the subscriber or null if unknown.
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.Subscriptions.MessageDrivenSubscriptions.IInitializableSubscriptionStorage">
            <summary>
            Defines an initializable storage for subscriptions.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Subscriptions.MessageDrivenSubscriptions.IInitializableSubscriptionStorage.Init">
            <summary>
            Notifies the subscription storage that now is the time to perform
            any initialization work.
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.Subscriptions.MessageDrivenSubscriptions.ISubscriptionStorage">
            <summary>
            Defines storage for subscriptions.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Subscriptions.MessageDrivenSubscriptions.ISubscriptionStorage.Subscribe(NServiceBus.Unicast.Subscriptions.MessageDrivenSubscriptions.Subscriber,NServiceBus.Unicast.Subscriptions.MessageType,NServiceBus.Extensibility.ContextBag)">
            <summary>
            Subscribes the given client to messages of a given type.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Subscriptions.MessageDrivenSubscriptions.ISubscriptionStorage.Unsubscribe(NServiceBus.Unicast.Subscriptions.MessageDrivenSubscriptions.Subscriber,NServiceBus.Unicast.Subscriptions.MessageType,NServiceBus.Extensibility.ContextBag)">
            <summary>
            Unsubscribes the given client from messages of given type.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Subscriptions.MessageDrivenSubscriptions.ISubscriptionStorage.GetSubscriberAddressesForMessage(System.Collections.Generic.IEnumerable{NServiceBus.Unicast.Subscriptions.MessageType},NServiceBus.Extensibility.ContextBag)">
            <summary>
            Returns a list of addresses for subscribers currently subscribed to the given message type.
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.Subscriptions.MessageType">
            <summary>
            Representation of a message type that clients can be subscribed to.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Subscriptions.MessageType.#ctor(System.Type)">
            <summary>
            Initializes the message type from the given type.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Subscriptions.MessageType.#ctor(System.String)">
            <summary>
            Initializes the message type from the given string.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Subscriptions.MessageType.#ctor(System.String,System.String)">
            <summary>
            Initializes the message type from the given string.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Subscriptions.MessageType.#ctor(System.String,System.Version)">
            <summary>
            Initializes the message type from the given string.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Subscriptions.MessageType.TypeName">
            <summary>
            TypeName of the message.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Subscriptions.MessageType.Version">
            <summary>
            Version of the message.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Subscriptions.MessageType.ToString">
            <summary>
            Overridden to append Version along with Type Name.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Subscriptions.MessageType.Equals(NServiceBus.Unicast.Subscriptions.MessageType)">
            <summary>
            Equality, only major version is used.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Subscriptions.MessageType.Equals(System.Object)">
            <summary>
            Equality, only Type is same.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Subscriptions.MessageType.GetHashCode">
            <summary>
            Gets Hash Code.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Subscriptions.MessageType.op_Equality(NServiceBus.Unicast.Subscriptions.MessageType,NServiceBus.Unicast.Subscriptions.MessageType)">
            <summary>
            Equality.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Subscriptions.MessageType.op_Inequality(NServiceBus.Unicast.Subscriptions.MessageType,NServiceBus.Unicast.Subscriptions.MessageType)">
            <summary>
            Equality.
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.BuilderExtensions">
            <summary>
            Extension methods for <see cref="T:NServiceBus.ObjectBuilder.IBuilder" />.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.BuilderExtensions.ForEach``1(NServiceBus.ObjectBuilder.IBuilder,System.Action{``0})">
            <summary>
            Applies the action on the instances of <typeparamref name="T" />.
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.MessagesEventArgs">
            <summary>
            Data containing multiple messages for raising in events.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.MessagesEventArgs.#ctor(System.Object[])">
            <summary>
            Instantiate an event arg referencing multiple messages.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.MessagesEventArgs.Messages">
            <summary>
            The messages that were sent.
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.MessageEventArgs">
            <summary>
            Data containing a message for raising in events.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.MessageEventArgs.#ctor(System.Object)">
            <summary>
            Instantiates a new object containing the given message.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.MessageEventArgs.Message">
            <summary>
            The message.
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.Messages.MessageMetadataRegistry">
            <summary>
            Cache of message metadata.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Messages.MessageMetadataRegistry.GetMessageMetadata(System.Type)">
            <summary>
            Retrieves the <see cref="T:NServiceBus.Unicast.Messages.MessageMetadata" /> for the specified type.
            </summary>
            <param name="messageType">The message type to retrieve metadata for.</param>
            <returns>The <see cref="T:NServiceBus.Unicast.Messages.MessageMetadata" /> for the specified type.</returns>
        </member>
        <member name="M:NServiceBus.Unicast.Messages.MessageMetadataRegistry.GetMessageMetadata(System.String)">
            <summary>
            Retrieves the <see cref="T:NServiceBus.Unicast.Messages.MessageMetadata" /> for the message identifier.
            </summary>
            <param name="messageTypeIdentifier">The message identifier to retrieve metadata for.</param>
            <returns>The <see cref="T:NServiceBus.Unicast.Messages.MessageMetadata" /> for the specified type.</returns>
        </member>
        <member name="T:NServiceBus.Unicast.Messages.MessageMetadata">
            <summary>
            Message metadata class.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Messages.MessageMetadata.#ctor(System.Type)">
            <summary>
            Create a new instance of <see cref="T:NServiceBus.Unicast.Messages.MessageMetadata"/>.
            </summary>
            <param name="messageType">The type of the message this metadata belongs to.</param>
        </member>
        <member name="M:NServiceBus.Unicast.Messages.MessageMetadata.#ctor(System.Type,System.Type[])">
            <summary>
            Create a new instance of <see cref="T:NServiceBus.Unicast.Messages.MessageMetadata"/>.
            </summary>
            <param name="messageType">The type of the message this metadata belongs to.</param>
            <param name="messageHierarchy">the hierarchy of all message types implemented by the message this metadata belongs to.</param>
        </member>
        <member name="P:NServiceBus.Unicast.Messages.MessageMetadata.MessageType">
            <summary>
            The <see cref="T:System.Type" /> of the message instance.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Messages.MessageMetadata.MessageHierarchy">
            <summary>
            The message instance hierarchy.
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.Queuing.QueueNotFoundException">
            <summary>
            Thrown when the queue could not be found.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Queuing.QueueNotFoundException.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:NServiceBus.Unicast.Queuing.QueueNotFoundException" />.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Queuing.QueueNotFoundException.#ctor(NServiceBus.Address,System.String,System.Exception)">
            <summary>
            Initializes a new instance of <see cref="T:NServiceBus.Unicast.Queuing.QueueNotFoundException" />.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Queuing.QueueNotFoundException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of <see cref="T:NServiceBus.Unicast.Queuing.QueueNotFoundException" />.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Queuing.QueueNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of <see cref="T:NServiceBus.Unicast.Queuing.QueueNotFoundException" />.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Queuing.QueueNotFoundException.Queue">
            <summary>
            The queue address.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Queuing.QueueNotFoundException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets the object data for serialization purposes.
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.MessageHandlerRegistry">
            <summary>
            Maintains the message handlers for this endpoint.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.MessageHandlerRegistry.GetHandlersFor(System.Type)">
            <summary>
            Gets the list of handlers <see cref="T:System.Type" />s for the given
            <paramref name="messageType" />.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.MessageHandlerRegistry.GetMessageTypes">
            <summary>
            Lists all message type for which we have handlers.
            </summary>
            <remarks>This method should not be called on a hot path.</remarks>
        </member>
        <member name="M:NServiceBus.Unicast.MessageHandlerRegistry.RegisterHandler(System.Type)">
            <summary>
            Registers the given potential handler type.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.MessageHandlerRegistry.Clear">
            <summary>
            Clears the cache.
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.Transport.ControlMessageFactory">
            <summary>
            Helper for creating control messages.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Transport.ControlMessageFactory.Create(NServiceBus.MessageIntentEnum)">
            <summary>
            Creates Transport Message.
            </summary>
            <returns>Transport Message.</returns>
        </member>
        <member name="T:NServiceBus.Sagas.SagaCorrelationProperty">
            <summary>
            The property that this saga is correlated on.
            </summary>
        </member>
        <member name="M:NServiceBus.Sagas.SagaCorrelationProperty.#ctor(System.String,System.Object)">
            <summary>
            Initializes the correlation property.
            </summary>
        </member>
        <member name="P:NServiceBus.Sagas.SagaCorrelationProperty.Name">
            <summary>
            The name of the property.
            </summary>
        </member>
        <member name="P:NServiceBus.Sagas.SagaCorrelationProperty.Value">
            <summary>
            The property value.
            </summary>
        </member>
        <member name="P:NServiceBus.Sagas.SagaCorrelationProperty.None">
            <summary>
            Represents a saga with no correlated property.
            </summary>
        </member>
        <member name="T:NServiceBus.Sagas.SagaFinderDefinition">
            <summary>
            Defines a message finder.
            </summary>
        </member>
        <member name="M:NServiceBus.Sagas.SagaFinderDefinition.#ctor(System.Type,System.Type,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:NServiceBus.Sagas.SagaFinderDefinition" /> class.
            </summary>
            <param name="type">The type of the finder.</param>
            <param name="messageType">The type of message this finder is associated with.</param>
            <param name="properties">Custom properties.</param>
        </member>
        <member name="P:NServiceBus.Sagas.SagaFinderDefinition.Type">
            <summary>
            The type of the finder.
            </summary>
        </member>
        <member name="P:NServiceBus.Sagas.SagaFinderDefinition.MessageType">
            <summary>
            The type of message this finder is associated with.
            </summary>
        </member>
        <member name="P:NServiceBus.Sagas.SagaFinderDefinition.MessageTypeName">
            <summary>
            The full name of the message type.
            </summary>
        </member>
        <member name="P:NServiceBus.Sagas.SagaFinderDefinition.Properties">
            <summary>
            Custom properties.
            </summary>
        </member>
        <member name="T:NServiceBus.Sagas.SagaMessage">
            <summary>
            Representation of a message that is related to a saga.
            </summary>
        </member>
        <member name="M:NServiceBus.Sagas.SagaMessage.#ctor(System.Type,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:NServiceBus.Sagas.SagaMessage" />.
            </summary>
            <param name="messageType">Type of the message.</param>
            <param name="isAllowedToStart"><code>true</code> if the message can start the saga, <code>false</code> otherwise.</param>
        </member>
        <member name="P:NServiceBus.Sagas.SagaMessage.MessageType">
            <summary>
            The type of the message.
            </summary>
        </member>
        <member name="P:NServiceBus.Sagas.SagaMessage.MessageTypeName">
            <summary>
            The full name of the message type.
            </summary>
        </member>
        <member name="P:NServiceBus.Sagas.SagaMessage.IsAllowedToStartSaga">
            <summary>
            True if the message can start the saga.
            </summary>
        </member>
        <member name="T:NServiceBus.Sagas.SagaMetadata">
            <summary>
            Contains metadata for known sagas.
            </summary>
        </member>
        <member name="M:NServiceBus.Sagas.SagaMetadata.#ctor(System.String,System.Type,System.String,System.Type,NServiceBus.Sagas.SagaMetadata.CorrelationPropertyMetadata,System.Collections.Generic.IReadOnlyCollection{NServiceBus.Sagas.SagaMessage},System.Collections.Generic.IReadOnlyCollection{NServiceBus.Sagas.SagaFinderDefinition})">
            <summary>
            Initializes a new instance of the <see cref="T:NServiceBus.Sagas.SagaMetadata" /> class.
            </summary>
            <param name="name">The name of the saga.</param>
            <param name="sagaType">The type for this saga.</param>
            <param name="entityName">The name of the saga data entity.</param>
            <param name="sagaEntityType">The type of the related saga entity.</param>
            <param name="correlationProperty">The property this saga is correlated on if any.</param>
            <param name="messages">The messages collection that a saga handles.</param>
            <param name="finders">The finder definition collection that can find this saga.</param>
        </member>
        <member name="P:NServiceBus.Sagas.SagaMetadata.AssociatedMessages">
            <summary>
            Returns the list of messages that is associated with this saga.
            </summary>
        </member>
        <member name="P:NServiceBus.Sagas.SagaMetadata.Finders">
            <summary>
            Gets the list of finders for this saga.
            </summary>
        </member>
        <member name="P:NServiceBus.Sagas.SagaMetadata.Name">
            <summary>
            The name of the saga.
            </summary>
        </member>
        <member name="P:NServiceBus.Sagas.SagaMetadata.EntityName">
            <summary>
            The name of the saga data entity.
            </summary>
        </member>
        <member name="P:NServiceBus.Sagas.SagaMetadata.SagaEntityType">
            <summary>
            The type of the related saga entity.
            </summary>
        </member>
        <member name="P:NServiceBus.Sagas.SagaMetadata.SagaType">
            <summary>
            The type for this saga.
            </summary>
        </member>
        <member name="M:NServiceBus.Sagas.SagaMetadata.TryGetCorrelationProperty(NServiceBus.Sagas.SagaMetadata.CorrelationPropertyMetadata@)">
            <summary>
            Property this saga is correlated on.
            </summary>
        </member>
        <member name="M:NServiceBus.Sagas.SagaMetadata.IsMessageAllowedToStartTheSaga(System.String)">
            <summary>
            True if the specified message type is allowed to start the saga.
            </summary>
        </member>
        <member name="M:NServiceBus.Sagas.SagaMetadata.TryGetFinder(System.String,NServiceBus.Sagas.SagaFinderDefinition@)">
            <summary>
            Gets the configured finder for this message.
            </summary>
            <param name="messageType">The message <see cref="P:System.Reflection.MemberInfo.Name" />.</param>
            <param name="finderDefinition">The finder if present.</param>
            <returns>True if finder exists.</returns>
        </member>
        <member name="M:NServiceBus.Sagas.SagaMetadata.Create(System.Type)">
            <summary>
            Creates a <see cref="T:NServiceBus.Sagas.SagaMetadata" /> from a specific Saga type.
            </summary>
            <param name="sagaType">A type representing a Saga. Must be a non-generic type inheriting from <see cref="T:NServiceBus.Saga" />.</param>
            <returns>An instance of <see cref="T:NServiceBus.Sagas.SagaMetadata" /> describing the Saga.</returns>
        </member>
        <member name="M:NServiceBus.Sagas.SagaMetadata.Create(System.Type,System.Collections.Generic.IEnumerable{System.Type},NServiceBus.Conventions)">
            <summary>
            Creates a <see cref="T:NServiceBus.Sagas.SagaMetadata" /> from a specific Saga type.
            </summary>
            <param name="sagaType">A type representing a Saga. Must be a non-generic type inheriting from <see cref="T:NServiceBus.Saga" />.</param>
            <param name="availableTypes">Additional available types, used to locate saga finders and other related classes.</param>
            <param name="conventions">Custom conventions to use while scanning types.</param>
            <returns>An instance of <see cref="T:NServiceBus.Sagas.SagaMetadata" /> describing the Saga.</returns>
        </member>
        <member name="T:NServiceBus.Sagas.SagaMetadata.CorrelationPropertyMetadata">
            <summary>
            Details about a saga data property used to correlate messages hitting the saga.
            </summary>
        </member>
        <member name="M:NServiceBus.Sagas.SagaMetadata.CorrelationPropertyMetadata.#ctor(System.String,System.Type)">
            <summary>
            Creates a new instance of <see cref="T:NServiceBus.Sagas.SagaMetadata.CorrelationPropertyMetadata" />.
            </summary>
            <param name="name">The name of the correlation property.</param>
            <param name="type">The type of the correlation property.</param>
        </member>
        <member name="P:NServiceBus.Sagas.SagaMetadata.CorrelationPropertyMetadata.Name">
            <summary>
            The name of the correlation property.
            </summary>
        </member>
        <member name="P:NServiceBus.Sagas.SagaMetadata.CorrelationPropertyMetadata.Type">
            <summary>
            The type of the correlation property.
            </summary>
        </member>
        <member name="T:NServiceBus.Sagas.SagaMetadataCollection">
            <summary>
            Sagas metamodel.
            </summary>
        </member>
        <member name="M:NServiceBus.Sagas.SagaMetadataCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="M:NServiceBus.Sagas.SagaMetadataCollection.Initialize(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Populates the model with saga metadata from the provided collection of types.
            </summary>
            <param name="availableTypes">A collection of types to scan for sagas.</param>
        </member>
        <member name="M:NServiceBus.Sagas.SagaMetadataCollection.Initialize(System.Collections.Generic.IEnumerable{System.Type},NServiceBus.Conventions)">
            <summary>
            Populates the model with saga metadata from the provided collection of types.
            </summary>
            <param name="availableTypes">A collection of types to scan for sagas.</param>
            <param name="conventions">Custom conventions to be used while scanning types.</param>
        </member>
        <member name="M:NServiceBus.Sagas.SagaMetadataCollection.FindByEntity(System.Type)">
            <summary>
            Returns a <see cref="T:NServiceBus.Sagas.SagaMetadata" /> for an entity by entity name.
            </summary>
            <param name="entityType">Type of the entity (saga data).</param>
            <returns>An instance of <see cref="T:NServiceBus.Sagas.SagaMetadata" />.</returns>
        </member>
        <member name="M:NServiceBus.Sagas.SagaMetadataCollection.Find(System.Type)">
            <summary>
            Returns a <see cref="T:NServiceBus.Sagas.SagaMetadata" /> for an entity by name.
            </summary>
            <param name="sagaType">Saga type.</param>
            <returns>An instance of <see cref="T:NServiceBus.Sagas.SagaMetadata" />.</returns>
        </member>
        <member name="T:NServiceBus.Sagas.IFinder">
            <summary>
            Marker interface for <see cref="T:NServiceBus.Sagas.IFindSagas`1.Using`1" />.
            </summary>
        </member>
        <member name="T:NServiceBus.Sagas.IFindSagas`1">
            <summary>
            Interface indicating that implementers can find sagas of the given type.
            </summary>
        </member>
        <member name="T:NServiceBus.Sagas.IFindSagas`1.Using`1">
            <summary>
            Narrower interface indicating that implementers can find sagas
            of type T using messages of type M.
            </summary>
        </member>
        <member name="M:NServiceBus.Sagas.IFindSagas`1.Using`1.FindBy(`1,NServiceBus.Persistence.SynchronizedStorageSession,NServiceBus.Extensibility.ReadOnlyContextBag)">
            <summary>
            Finds a saga entity of the type T using a message of type M.
            </summary>
            <exception cref="T:System.Exception">This exception will be thrown if <code>null</code> is returned. Return a Task&lt;T&gt; or mark the method as <code>async</code>.</exception>
        </member>
        <member name="T:NServiceBus.Sagas.IHandleSagaNotFound">
            <summary>
            Implementations will be invoked when a message arrives that should have been processed
            by a saga, but no existing saga was found. This does not include the scenario when
            a saga will be created for the given message type.
            </summary>
        </member>
        <member name="M:NServiceBus.Sagas.IHandleSagaNotFound.Handle(System.Object,NServiceBus.IMessageProcessingContext)">
            <summary>
            Implementations will implement this method, likely using an injected IBus
            to send responses to the client who sent the message.
            </summary>
            <exception cref="T:System.Exception">This exception will be thrown if <code>null</code> is returned. Return a Task or mark the method as <code>async</code>.</exception>
        </member>
        <member name="T:NServiceBus.Sagas.ISagaPersister">
            <summary>
            Defines the basic functionality of a persister for storing
            and retrieving a sagaData.
            </summary>
        </member>
        <member name="M:NServiceBus.Sagas.ISagaPersister.Save(NServiceBus.IContainSagaData,NServiceBus.Sagas.SagaCorrelationProperty,NServiceBus.Persistence.SynchronizedStorageSession,NServiceBus.Extensibility.ContextBag)">
            <summary>
            Saves the sagaData entity to the persistence store.
            </summary>
            <param name="sagaData">The sagaData data to save.</param>
            <param name="correlationProperty">The property to correlate. Can be null.</param>
            <param name="session">Storage session.</param>
            <param name="context">The current pipeline context.</param>
        </member>
        <member name="M:NServiceBus.Sagas.ISagaPersister.Update(NServiceBus.IContainSagaData,NServiceBus.Persistence.SynchronizedStorageSession,NServiceBus.Extensibility.ContextBag)">
            <summary>
            Updates an existing sagaData entity in the persistence store.
            </summary>
            <param name="sagaData">The sagaData data to updated.</param>
            <param name="session">The session.</param>
            <param name="context">The current pipeline context.</param>
        </member>
        <member name="M:NServiceBus.Sagas.ISagaPersister.Get``1(System.Guid,NServiceBus.Persistence.SynchronizedStorageSession,NServiceBus.Extensibility.ContextBag)">
            <summary>
            Gets a sagaData entity from the persistence store by its Id.
            </summary>
            <param name="sagaId">The Id of the sagaData data to get.</param>
            <param name="session">The session.</param>
            <param name="context">The current pipeline context.</param>
        </member>
        <member name="M:NServiceBus.Sagas.ISagaPersister.Get``1(System.String,System.Object,NServiceBus.Persistence.SynchronizedStorageSession,NServiceBus.Extensibility.ContextBag)">
            <summary>
            Looks up a sagaData entity by a given property.
            </summary>
            <param name="propertyName">From the data store, analyze this property.</param>
            <param name="propertyValue">From the data store, look for this value in the identified property.</param>
            <param name="session">The session.</param>
            <param name="context">The current pipeline context.</param>
        </member>
        <member name="M:NServiceBus.Sagas.ISagaPersister.Complete(NServiceBus.IContainSagaData,NServiceBus.Persistence.SynchronizedStorageSession,NServiceBus.Extensibility.ContextBag)">
            <summary>
            Sets a sagaData as completed and removes it from the active sagaData list
            in the persistence store.
            </summary>
            <param name="sagaData">The sagaData to complete.</param>
            <param name="session">The session.</param>
            <param name="context">The current pipeline context.</param>
        </member>
        <member name="T:NServiceBus.Sagas.ActiveSagaInstance">
            <summary>
            Represents a saga instance being processed on the pipeline.
            </summary>
        </member>
        <member name="M:NServiceBus.Sagas.ActiveSagaInstance.#ctor(NServiceBus.Saga,NServiceBus.Sagas.SagaMetadata,System.Func{System.DateTime})">
            <summary>
            Creates a new <see cref="T:NServiceBus.Sagas.ActiveSagaInstance"/> instance.
            </summary>
        </member>
        <member name="P:NServiceBus.Sagas.ActiveSagaInstance.SagaId">
            <summary>
            The id of the saga.
            </summary>
        </member>
        <member name="P:NServiceBus.Sagas.ActiveSagaInstance.SagaType">
            <summary>
            The type of the saga.
            </summary>
        </member>
        <member name="P:NServiceBus.Sagas.ActiveSagaInstance.Metadata">
            <summary>
            Metadata for this active saga.
            </summary>
        </member>
        <member name="P:NServiceBus.Sagas.ActiveSagaInstance.Instance">
            <summary>
            The actual saga instance.
            </summary>
        </member>
        <member name="P:NServiceBus.Sagas.ActiveSagaInstance.IsNew">
            <summary>
            True if this saga was created by this incoming message.
            </summary>
        </member>
        <member name="P:NServiceBus.Sagas.ActiveSagaInstance.NotFound">
            <summary>
            True if no saga instance could be found for this message.
            </summary>
        </member>
        <member name="P:NServiceBus.Sagas.ActiveSagaInstance.Created">
            <summary>
            UTC timestamp of when the active saga instance was created.
            </summary>
        </member>
        <member name="P:NServiceBus.Sagas.ActiveSagaInstance.Modified">
            <summary>
            UTC timestamp of when the active saga instance was last modified.
            </summary>
        </member>
        <member name="M:NServiceBus.Sagas.ActiveSagaInstance.AttachNewEntity(NServiceBus.IContainSagaData)">
            <summary>
            Provides a way to update the actual saga entity.
            </summary>
            <param name="sagaEntity">The new entity.</param>
        </member>
        <member name="T:NServiceBus.DistributionPolicy">
            <summary>
            Configures distribution strategies.
            </summary>
        </member>
        <member name="M:NServiceBus.DistributionPolicy.SetDistributionStrategy(NServiceBus.Routing.DistributionStrategy)">
            <summary>
            Sets the distribution strategy for a given endpoint.
            </summary>
            <param name="distributionStrategy">Distribution strategy to be used.</param>
        </member>
        <member name="T:NServiceBus.InstanceMappingFileSettings">
            <summary>
            Allows configuring file-based instance mappings.
            </summary>
        </member>
        <member name="M:NServiceBus.InstanceMappingFileSettings.#ctor(NServiceBus.Settings.SettingsHolder)">
            <summary>
            Creates new instance of <see cref="T:NServiceBus.InstanceMappingFileSettings"/>.
            </summary>
        </member>
        <member name="M:NServiceBus.InstanceMappingFileSettings.RefreshInterval(System.TimeSpan)">
            <summary>
            Specifies the interval between data refresh attempts.
            The default value is 30 seconds.
            </summary>
            <param name="refreshInterval">Refresh interval. Valid values must be between 1 second and less than 1 day.</param>
        </member>
        <member name="M:NServiceBus.InstanceMappingFileSettings.FilePath(System.String)">
            <summary>
            Specifies the path and file name for the instance mapping XML. The default is <code>instance-mapping.xml</code>.
            </summary>
            <param name="filePath">The relative or absolute file path to the instance mapping XML file.</param>
        </member>
        <member name="T:NServiceBus.SerializationContextExtensions">
            <summary>
            Allows users to control serialization.
            </summary>
        </member>
        <member name="M:NServiceBus.SerializationContextExtensions.SkipSerialization(NServiceBus.Pipeline.IOutgoingLogicalMessageContext)">
            <summary>
            Requests the serializer to skip serializing the message.
            </summary>
            <remarks>
            This can be used by an extension point needs to take control of the serialization.
            For example the Callbacks implementation that skips serialization and instead uses
            headers for passing the enum or int value.
            </remarks>
        </member>
        <member name="M:NServiceBus.SerializationContextExtensions.ShouldSkipSerialization(NServiceBus.Pipeline.IOutgoingLogicalMessageContext)">
            <summary>
            The serializer should skip serializing the message.
            </summary>
        </member>
        <member name="T:NServiceBus.TransportTransactionMode">
            <summary>
            The different transaction levels that can be supported by a transport.
            </summary>
        </member>
        <member name="F:NServiceBus.TransportTransactionMode.None">
            <summary>
            No transactions used. This means that received messages will not be roll the message back to the queue if a failure
            occurs.
            This means that the message is lost.
            </summary>
        </member>
        <member name="F:NServiceBus.TransportTransactionMode.ReceiveOnly">
            <summary>
            The receive operation will be transactional and the message will be rolled back to the queue in case of failure.
            Outgoing queueing operations will not be enlisted in the ongoing receive transaction and therefor NOT roll back should
            a failure occur.
            </summary>
        </member>
        <member name="F:NServiceBus.TransportTransactionMode.SendsAtomicWithReceive">
            <summary>
            In this mode all outgoing operations will be atomic with the current receive operations.
            </summary>
        </member>
        <member name="F:NServiceBus.TransportTransactionMode.TransactionScope">
            <summary>
            The transport enlists its receive operation in a transaction scope allowing other resource managers to participate.
            </summary>
        </member>
        <member name="T:NServiceBus.RoutingSettings">
            <summary>
            Exposes settings related to routing.
            </summary>
        </member>
        <member name="M:NServiceBus.RoutingSettings.#ctor(NServiceBus.Settings.SettingsHolder)">
            <summary>
            Creates a new instance of <see cref="T:NServiceBus.RoutingSettings"/>.
            </summary>
        </member>
        <member name="M:NServiceBus.RoutingSettings.RouteToEndpoint(System.Type,System.String)">
            <summary>
            Adds a static unicast route for a given message type.
            </summary>
            <param name="messageType">The message which should be routed.</param>
            <param name="destination">The destination endpoint.</param>
        </member>
        <member name="M:NServiceBus.RoutingSettings.RouteToEndpoint(System.Reflection.Assembly,System.String)">
            <summary>
            Adds a static unicast route for all types contained in the specified assembly.
            </summary>
            <param name="assembly">The assembly whose messages should be routed.</param>
            <param name="destination">Destination endpoint.</param>
        </member>
        <member name="M:NServiceBus.RoutingSettings.RouteToEndpoint(System.Reflection.Assembly,System.String,System.String)">
            <summary>
            Adds a static unicast route for all types contained in the specified assembly and within the given namespace.
            </summary>
            <param name="assembly">The assembly whose messages should be routed.</param>
            <param name="namespace">The namespace of the messages which should be routed. The given value must exactly match the target namespace.</param>
            <param name="destination">Destination endpoint.</param>
        </member>
        <member name="M:NServiceBus.RoutingSettings.DoNotEnforceBestPractices">
            <summary>
            Disables the enforcement of messaging best practices (e.g. validating that a published message is an event).
            </summary>
        </member>
        <member name="T:NServiceBus.RoutingSettings`1">
            <summary>
            Exposes settings related to routing.
            </summary>
        </member>
        <member name="M:NServiceBus.RoutingSettings`1.#ctor(NServiceBus.Settings.SettingsHolder)">
            <summary>
            Creates a new instance of <see cref="T:NServiceBus.RoutingSettings`1"/>.
            </summary>
        </member>
        <member name="T:NServiceBus.RoutingSettingsExtensions">
            <summary>
            Configuration extensions for routing.
            </summary>
        </member>
        <member name="M:NServiceBus.RoutingSettingsExtensions.Routing(NServiceBus.TransportExtensions)">
            <summary>
            Configures the routing.
            </summary>
        </member>
        <member name="M:NServiceBus.RoutingSettingsExtensions.Routing``1(NServiceBus.TransportExtensions{``0})">
            <summary>
            Configures the routing.
            </summary>
        </member>
        <member name="T:NServiceBus.Container.ContainerCustomizations">
            <summary>
            Container customization.
            </summary>
        </member>
        <member name="P:NServiceBus.Container.ContainerCustomizations.Settings">
            <summary>
            The settings instance to use to store an existing container instance.
            </summary>
        </member>
        <member name="T:NServiceBus.Container.ContainerDefinition">
            <summary>
            Base class for container definitions.
            </summary>
        </member>
        <member name="M:NServiceBus.Container.ContainerDefinition.CreateContainer(NServiceBus.Settings.ReadOnlySettings)">
            <summary>
            Implementers need to new up a new container.
            </summary>
            <param name="settings">The settings to check if an existing container exists.</param>
            <returns>The new container wrapper.</returns>
        </member>
        <member name="T:NServiceBus.ConventionsBuilder">
            <summary>
            Defines custom message conventions instead of using the <see cref="T:NServiceBus.IMessage"/>, <see cref="T:NServiceBus.IEvent"/> or <see cref="T:NServiceBus.ICommand"/> interfaces, and other conventions.
            </summary>
        </member>
        <member name="M:NServiceBus.ConventionsBuilder.#ctor(NServiceBus.Settings.SettingsHolder)">
            <summary>
            Creates a new instance of ConventionsBuilder class.
            </summary>
            <param name="settings">An instance of the current settings.</param>
        </member>
        <member name="M:NServiceBus.ConventionsBuilder.DefiningMessagesAs(System.Func{System.Type,System.Boolean})">
            <summary>
            Sets the function to be used to evaluate whether a type is a message.
            </summary>
        </member>
        <member name="M:NServiceBus.ConventionsBuilder.DefiningCommandsAs(System.Func{System.Type,System.Boolean})">
            <summary>
            Sets the function to be used to evaluate whether a type is a commands.
            </summary>
        </member>
        <member name="M:NServiceBus.ConventionsBuilder.DefiningEventsAs(System.Func{System.Type,System.Boolean})">
            <summary>
            Sets the function to be used to evaluate whether a type is a event.
            </summary>
        </member>
        <member name="M:NServiceBus.ConventionsBuilder.DefiningEncryptedPropertiesAs(System.Func{System.Reflection.PropertyInfo,System.Boolean})">
            <summary>
            Sets the function to be used to evaluate whether a property should be encrypted or not.
            </summary>
        </member>
        <member name="M:NServiceBus.ConventionsBuilder.DefiningDataBusPropertiesAs(System.Func{System.Reflection.PropertyInfo,System.Boolean})">
            <summary>
            Sets the function to be used to evaluate whether a property should be sent via the DataBus or not.
            </summary>
        </member>
        <member name="P:NServiceBus.ConventionsBuilder.Conventions">
            <summary>
            The defined <see cref="P:NServiceBus.ConventionsBuilder.Conventions"/>.
            </summary>
        </member>
        <member name="T:NServiceBus.CorrelationContextExtensions">
            <summary>
            Extension methods for manipulating the message Correlation Id.
            </summary>
        </member>
        <member name="M:NServiceBus.CorrelationContextExtensions.SetCorrelationId(NServiceBus.SendOptions,System.String)">
            <summary>
            Allows users to set a custom correlation id.
            </summary>
            <param name="options">Options being extended.</param>
            <param name="correlationId">The custom correlation id.</param>
        </member>
        <member name="M:NServiceBus.CorrelationContextExtensions.SetCorrelationId(NServiceBus.ReplyOptions,System.String)">
            <summary>
            Allows users to set a custom correlation id.
            </summary>
            <param name="options">Options being extended.</param>
            <param name="correlationId">The custom correlation id.</param>
        </member>
        <member name="M:NServiceBus.CorrelationContextExtensions.GetCorrelationId(NServiceBus.SendOptions)">
            <summary>
            Retrieves the correlation id specified by the user by using
            <see cref="M:NServiceBus.CorrelationContextExtensions.SetCorrelationId(NServiceBus.SendOptions,System.String)" />.
            </summary>
            <param name="options">Options being extended.</param>
            <returns>The configured correlation id or <c>null</c> when no correlation id was configured.</returns>
        </member>
        <member name="M:NServiceBus.CorrelationContextExtensions.GetCorrelationId(NServiceBus.ReplyOptions)">
            <summary>
            Retrieves the correlation id specified by the user by using
            <see cref="M:NServiceBus.CorrelationContextExtensions.SetCorrelationId(NServiceBus.ReplyOptions,System.String)" />.
            </summary>
            <param name="options">Options being extended.</param>
            <returns>The configured correlation id or <c>null</c> when no correlation id was configured.</returns>
        </member>
        <member name="T:NServiceBus.CriticalError">
            <summary>
            A holder for that exposes access to the action defined by <see cref="M:NServiceBus.ConfigureCriticalErrorAction.DefineCriticalErrorAction(NServiceBus.EndpointConfiguration,System.Func{NServiceBus.ICriticalErrorContext,System.Threading.Tasks.Task})"/>.
            </summary>
            <returns>
            Call <see cref="M:NServiceBus.CriticalError.Raise(System.String,System.Exception)"/> to trigger the action.
            </returns>
        </member>
        <member name="M:NServiceBus.CriticalError.#ctor(System.Func{NServiceBus.ICriticalErrorContext,System.Threading.Tasks.Task})">
            <summary>
            Initializes a new instance of <see cref="T:NServiceBus.CriticalError" />.
            </summary>
            <param name="onCriticalErrorAction">The action to execute when a critical error is triggered.</param>
        </member>
        <member name="M:NServiceBus.CriticalError.Raise(System.String,System.Exception)">
            <summary>
            Trigger the action defined by
            <see
                cref="M:NServiceBus.ConfigureCriticalErrorAction.DefineCriticalErrorAction(NServiceBus.EndpointConfiguration,System.Func{NServiceBus.ICriticalErrorContext,System.Threading.Tasks.Task})" />
            .
            </summary>
        </member>
        <member name="T:NServiceBus.DataBus.DataBusDefinition">
            <summary>
            Defines a databus that can be used by NServiceBus.
            </summary>
        </member>
        <member name="M:NServiceBus.DataBus.DataBusDefinition.ProvidedByFeature">
            <summary>
            The feature to enable when this databus is selected.
            </summary>
        </member>
        <member name="T:NServiceBus.DataBus.DataBusExtensions`1">
            <summary>
            This class provides implementers of databus with an extension mechanism for custom settings via extension methods.
            </summary>
            <typeparam name="T">The databus definition eg <see cref="T:NServiceBus.FileShareDataBus" />.</typeparam>
        </member>
        <member name="M:NServiceBus.DataBus.DataBusExtensions`1.#ctor(NServiceBus.Settings.SettingsHolder)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:NServiceBus.DataBus.DataBusExtensions">
            <summary>
            This class provides implementers of databus with an extension mechanism for custom settings via extension methods.
            </summary>
        </member>
        <member name="M:NServiceBus.DataBus.DataBusExtensions.#ctor(NServiceBus.Settings.SettingsHolder)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:NServiceBus.DataBus.IDataBus">
            <summary>
            The main interface for interactions with the databus.
            </summary>
        </member>
        <member name="M:NServiceBus.DataBus.IDataBus.Get(System.String)">
            <summary>
            Gets a data item from the bus.
            </summary>
            <param name="key">The key to look for.</param>
            <returns>The data <see cref="T:System.IO.Stream" />.</returns>
        </member>
        <member name="M:NServiceBus.DataBus.IDataBus.Put(System.IO.Stream,System.TimeSpan)">
            <summary>
            Adds a data item to the bus and returns the assigned key.
            </summary>
            <param name="stream">A create containing the data to be sent on the databus.</param>
            <param name="timeToBeReceived">The time to be received specified on the message type. TimeSpan.MaxValue is the default.</param>
        </member>
        <member name="M:NServiceBus.DataBus.IDataBus.Start">
            <summary>
            Called when the bus starts up to allow the data bus to active background tasks.
            </summary>
        </member>
        <member name="T:NServiceBus.DataBus.IDataBusSerializer">
            <summary>
            Interface used for serializing and deserializing of databus properties.
            </summary>
        </member>
        <member name="M:NServiceBus.DataBus.IDataBusSerializer.Serialize(System.Object,System.IO.Stream)">
            <summary>
            Serializes the property into the given stream.
            </summary>
            <param name="databusProperty">The property to serialize.</param>
            <param name="stream">The stream to which to write the property.</param>
        </member>
        <member name="M:NServiceBus.DataBus.IDataBusSerializer.Deserialize(System.IO.Stream)">
            <summary>
            Deserializes a property from the given stream.
            </summary>
            <param name="stream">The stream from which to read the property.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="T:NServiceBus.FileShareDataBus">
            <summary>
            Base class for data bus definitions.
            </summary>
        </member>
        <member name="M:NServiceBus.FileShareDataBus.ProvidedByFeature">
            <summary>
            The feature to enable when this databus is selected.
            </summary>
        </member>
        <member name="T:NServiceBus.UseDataBusExtensions">
            <summary>
            Extension methods to configure data bus.
            </summary>
        </member>
        <member name="M:NServiceBus.UseDataBusExtensions.UseDataBus``1(NServiceBus.EndpointConfiguration)">
            <summary>
            Configures NServiceBus to use the given data bus definition.
            </summary>
            <param name="config">The <see cref="T:NServiceBus.EndpointConfiguration" /> instance to apply the settings to.</param>
        </member>
        <member name="M:NServiceBus.UseDataBusExtensions.UseDataBus(NServiceBus.EndpointConfiguration,System.Type)">
            <summary>
            Configures NServiceBus to use a custom <see cref="T:NServiceBus.DataBus.IDataBus" /> implementation.
            </summary>
            <param name="config">The <see cref="T:NServiceBus.EndpointConfiguration" /> instance to apply the settings to.</param>
            <param name="dataBusType">The <see cref="T:NServiceBus.DataBus.IDataBus" /> <see cref="T:System.Type" /> to use.</param>
        </member>
        <member name="T:NServiceBus.DelayedDelivery.DelayedDeliveryConstraint">
            <summary>
            Base for the 2 flavors of delayed delivery.
            </summary>
        </member>
        <member name="T:NServiceBus.DelayedDelivery.DoNotDeliverBefore">
            <summary>
            Represent a constraint that the message can't be made available for consumption before a given time.
            </summary>
        </member>
        <member name="M:NServiceBus.DelayedDelivery.DoNotDeliverBefore.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of <see cref="T:NServiceBus.DelayedDelivery.DoNotDeliverBefore" />.
            </summary>
            <param name="at">The earliest time this message should be made available to its consumers.</param>
        </member>
        <member name="P:NServiceBus.DelayedDelivery.DoNotDeliverBefore.At">
            <summary>
            The actual time when the message can be available to the recipient.
            </summary>
        </member>
        <member name="T:NServiceBus.DelayedDelivery.DelayDeliveryWith">
            <summary>
            Represent a constraint that the message can't be delivered before the specified delay has elapsed.
            </summary>
        </member>
        <member name="M:NServiceBus.DelayedDelivery.DelayDeliveryWith.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of <see cref="T:NServiceBus.DelayedDelivery.DelayDeliveryWith" />.
            </summary>
            <param name="delay">How long to delay the delivery of the message.</param>
        </member>
        <member name="P:NServiceBus.DelayedDelivery.DelayDeliveryWith.Delay">
            <summary>
            The requested delay.
            </summary>
        </member>
        <member name="T:NServiceBus.DelayedDeliveryOptionExtensions">
            <summary>
            Provides ways for the end user to request delayed delivery of their messages.
            </summary>
        </member>
        <member name="M:NServiceBus.DelayedDeliveryOptionExtensions.DelayDeliveryWith(NServiceBus.SendOptions,System.TimeSpan)">
            <summary>
            Delays the delivery of the message with the specified delay.
            </summary>
            <param name="options">The options being extended.</param>
            <param name="delay">The requested delay.</param>
        </member>
        <member name="M:NServiceBus.DelayedDeliveryOptionExtensions.GetDeliveryDelay(NServiceBus.SendOptions)">
            <summary>
            Returns the configured delivery delay by using <see cref="M:NServiceBus.DelayedDeliveryOptionExtensions.DelayDeliveryWith(NServiceBus.SendOptions,System.TimeSpan)" />.
            </summary>
            <param name="options">The options being extended.</param>
            <returns>The configured <see cref="T:System.TimeSpan" /> or <c>null</c>.</returns>
        </member>
        <member name="M:NServiceBus.DelayedDeliveryOptionExtensions.DoNotDeliverBefore(NServiceBus.SendOptions,System.DateTimeOffset)">
            <summary>
            Requests that the message should not be delivered before the specified time.
            </summary>
            <param name="options">The options being extended.</param>
            <param name="at">The time when this message should be made available.</param>
        </member>
        <member name="M:NServiceBus.DelayedDeliveryOptionExtensions.GetDeliveryDate(NServiceBus.SendOptions)">
            <summary>
            Returns the delivery date configured by using <see cref="M:NServiceBus.DelayedDeliveryOptionExtensions.DoNotDeliverBefore(NServiceBus.SendOptions,System.DateTimeOffset)" />.
            </summary>
            <param name="options">The options being extended.</param>
            <returns>The configured <see cref="T:System.DateTimeOffset" /> or <c>null</c>.</returns>
        </member>
        <member name="T:NServiceBus.Timeout.Core.IQueryTimeouts">
            <summary>
            Allows to query for timeouts.
            </summary>
        </member>
        <member name="M:NServiceBus.Timeout.Core.IQueryTimeouts.GetNextChunk(System.DateTime)">
            <summary>
            Retrieves the next range of timeouts that are due.
            </summary>
            <param name="startSlice">The time where to start retrieving the next slice, the slice should exclude this date.</param>
            <returns>Returns the next range of timeouts that are due.</returns>
        </member>
        <member name="T:NServiceBus.Timeout.Core.TimeoutsChunk">
            <summary>
            Contains a collection of timeouts that are due and when to query for timeouts again.
            </summary>
        </member>
        <member name="M:NServiceBus.Timeout.Core.TimeoutsChunk.#ctor(NServiceBus.Timeout.Core.TimeoutsChunk.Timeout[],System.DateTime)">
            <summary>
            Creates a new instance of the timeouts chunk.
            </summary>
            <param name="dueTimeouts">timeouts that are due.</param>
            <param name="nextTimeToQuery">the next time to query for due timeouts again.</param>
        </member>
        <member name="P:NServiceBus.Timeout.Core.TimeoutsChunk.DueTimeouts">
            <summary>
            timeouts that are due.
            </summary>
        </member>
        <member name="P:NServiceBus.Timeout.Core.TimeoutsChunk.NextTimeToQuery">
            <summary>
            the next time to query for due timeouts again.
            </summary>
        </member>
        <member name="T:NServiceBus.Timeout.Core.TimeoutsChunk.Timeout">
            <summary>
            Represents a timeout.
            </summary>
        </member>
        <member name="M:NServiceBus.Timeout.Core.TimeoutsChunk.Timeout.#ctor(System.String,System.DateTime)">
            <summary>
            Creates a new instance of a timeout representation.
            </summary>
            <param name="id">The id of the timeout.</param>
            <param name="dueTime">The due time of the timeout.</param>
        </member>
        <member name="P:NServiceBus.Timeout.Core.TimeoutsChunk.Timeout.Id">
            <summary>
            The id of the timeout.
            </summary>
        </member>
        <member name="P:NServiceBus.Timeout.Core.TimeoutsChunk.Timeout.DueTime">
            <summary>
            The due time of the timeout.
            </summary>
        </member>
        <member name="T:NServiceBus.Timeout.Core.IPersistTimeouts">
            <summary>
            Timeout persister contract.
            </summary>
        </member>
        <member name="M:NServiceBus.Timeout.Core.IPersistTimeouts.Add(NServiceBus.Timeout.Core.TimeoutData,NServiceBus.Extensibility.ContextBag)">
            <summary>
            Adds a new timeout.
            </summary>
            <param name="timeout">Timeout data.</param>
            <param name="context">The current pipeline context.</param>
        </member>
        <member name="M:NServiceBus.Timeout.Core.IPersistTimeouts.TryRemove(System.String,NServiceBus.Extensibility.ContextBag)">
            <summary>
            Removes the timeout if it hasn't been previously removed.
            </summary>
            <param name="timeoutId">The timeout id to remove.</param>
            <param name="context">The current pipeline context.</param>
            <returns><c>true</c> when the timeout has successfully been removed by this method call, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:NServiceBus.Timeout.Core.IPersistTimeouts.Peek(System.String,NServiceBus.Extensibility.ContextBag)">
            <summary>
            Returns the timeout with the given id from the storage. The timeout will remain in the storage.
            </summary>
            <param name="timeoutId">The id of the timeout to fetch.</param>
            <param name="context">The current pipeline context.</param>
            <returns><see cref="T:NServiceBus.Timeout.Core.TimeoutData" /> with the given id if present in the storage or <c>null</c> otherwise.</returns>
        </member>
        <member name="M:NServiceBus.Timeout.Core.IPersistTimeouts.RemoveTimeoutBy(System.Guid,NServiceBus.Extensibility.ContextBag)">
            <summary>
            Removes the timeouts by saga id.
            </summary>
            <param name="sagaId">The saga id of the timeouts to remove.</param>
            <param name="context">The current pipeline context.</param>
        </member>
        <member name="T:NServiceBus.Timeout.Core.TimeoutData">
            <summary>
            Holds timeout information.
            </summary>
        </member>
        <member name="P:NServiceBus.Timeout.Core.TimeoutData.Id">
            <summary>
            Id of this timeout.
            </summary>
        </member>
        <member name="P:NServiceBus.Timeout.Core.TimeoutData.Destination">
            <summary>
            The address of the client who requested the timeout.
            </summary>
        </member>
        <member name="P:NServiceBus.Timeout.Core.TimeoutData.SagaId">
            <summary>
            The saga ID.
            </summary>
        </member>
        <member name="P:NServiceBus.Timeout.Core.TimeoutData.State">
            <summary>
            Additional state.
            </summary>
        </member>
        <member name="P:NServiceBus.Timeout.Core.TimeoutData.Time">
            <summary>
            The time at which the timeout expires.
            </summary>
        </member>
        <member name="P:NServiceBus.Timeout.Core.TimeoutData.OwningTimeoutManager">
            <summary>
            The timeout manager that owns this particular timeout.
            </summary>
        </member>
        <member name="P:NServiceBus.Timeout.Core.TimeoutData.Headers">
            <summary>
            Store the headers to preserve them across timeouts.
            </summary>
        </member>
        <member name="M:NServiceBus.Timeout.Core.TimeoutData.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="T:NServiceBus.DeliveryConstraints.DeliveryConstraintContextExtensions">
            <summary>
            Gives access to <see cref="T:NServiceBus.DeliveryConstraints.DeliveryConstraint" />s that exist in the various <see cref="T:NServiceBus.Extensibility.ContextBag" />s.
            </summary>
        </member>
        <member name="M:NServiceBus.DeliveryConstraints.DeliveryConstraintContextExtensions.AddDeliveryConstraint(NServiceBus.Extensibility.ContextBag,NServiceBus.DeliveryConstraints.DeliveryConstraint)">
            <summary>
            Adds a <see cref="T:NServiceBus.DeliveryConstraints.DeliveryConstraint" /> to a <see cref="T:NServiceBus.Extensibility.ContextBag" />.
            </summary>
        </member>
        <member name="M:NServiceBus.DeliveryConstraints.DeliveryConstraintContextExtensions.TryGetDeliveryConstraint``1(NServiceBus.Extensibility.ContextBag,``0@)">
            <summary>
            Tries to retrieves an instance of <typeparamref name="T" /> from a <see cref="T:NServiceBus.Extensibility.ContextBag" />.
            </summary>
        </member>
        <member name="M:NServiceBus.DeliveryConstraints.DeliveryConstraintContextExtensions.TryRemoveDeliveryConstraint``1(NServiceBus.Extensibility.ContextBag,``0@)">
            <summary>
            Tries to remove an instance of <typeparamref name="T" /> from a <see cref="T:NServiceBus.Extensibility.ContextBag" />.
            </summary>
        </member>
        <member name="M:NServiceBus.DeliveryConstraints.DeliveryConstraintContextExtensions.GetDeliveryConstraints(NServiceBus.Extensibility.ContextBag)">
            <summary>
            Removes a <see cref="T:NServiceBus.DeliveryConstraints.DeliveryConstraint" /> to a <see cref="T:NServiceBus.Extensibility.ContextBag" />.
            </summary>
        </member>
        <member name="M:NServiceBus.DeliveryConstraints.DeliveryConstraintContextExtensions.RemoveDeliveryConstaint(NServiceBus.Extensibility.ContextBag,NServiceBus.DeliveryConstraints.DeliveryConstraint)">
            <summary>
            Removes a <see cref="T:NServiceBus.DeliveryConstraints.DeliveryConstraint" /> to a <see cref="T:NServiceBus.Extensibility.ContextBag" />.
            </summary>
        </member>
        <member name="T:NServiceBus.DeliveryConstraints.DeliveryConstraint">
            <summary>
            Base class for delivery constraints.
            </summary>
        </member>
        <member name="T:NServiceBus.EncryptedValue">
            <summary>
            Class used to represent an encrypted value with an initialization vector.
            </summary>
        </member>
        <member name="P:NServiceBus.EncryptedValue.EncryptedBase64Value">
            <summary>
            The encrypted value represented as a Base64 string.
            </summary>
        </member>
        <member name="P:NServiceBus.EncryptedValue.Base64Iv">
            <summary>
            The initialization vector represented as a Base64 string.
            </summary>
        </member>
        <member name="T:NServiceBus.ConfigureError">
            <summary>
            Contains extension methods to <see cref="T:NServiceBus.EndpointConfiguration" />.
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureError.SendFailedMessagesTo(NServiceBus.EndpointConfiguration,System.String)">
            <summary>
            Configure error queue settings.
            </summary>
            <param name="config">The <see cref="T:NServiceBus.EndpointConfiguration" /> instance to apply the settings to.</param>
            <param name="errorQueue">The name of the error queue to use.</param>
        </member>
        <member name="T:NServiceBus.Faults.FailedMessage">
            <summary>
            Error message event data.
            </summary>
        </member>
        <member name="M:NServiceBus.Faults.FailedMessage.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Byte[],System.Exception)">
            <summary>
            Creates a new instance of <see cref="T:NServiceBus.Faults.FailedMessage" />.
            </summary>
            <param name="messageId">The id of the failed message.</param>
            <param name="headers">Message headers.</param>
            <param name="body">Message body.</param>
            <param name="exception">Exception thrown.</param>
        </member>
        <member name="M:NServiceBus.Faults.FailedMessage.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Byte[],System.Exception,System.String)">
            <summary>
            Creates a new instance of <see cref="T:NServiceBus.Faults.FailedMessage" />.
            </summary>
            <param name="messageId">The id of the failed message.</param>
            <param name="headers">Message headers.</param>
            <param name="body">Message body.</param>
            <param name="exception">Exception thrown.</param>
            <param name="errorQueue">Error queue address.</param>
        </member>
        <member name="P:NServiceBus.Faults.FailedMessage.Headers">
            <summary>
            Gets the message headers.
            </summary>
        </member>
        <member name="P:NServiceBus.Faults.FailedMessage.Body">
            <summary>
            Gets a byte array to the body content of the message.
            </summary>
        </member>
        <member name="P:NServiceBus.Faults.FailedMessage.Exception">
            <summary>
            The exception that caused this message to fail.
            </summary>
        </member>
        <member name="P:NServiceBus.Faults.FailedMessage.ErrorQueue">
            <summary>
            Error queue address to which failed message has been moved.
            </summary>
        </member>
        <member name="P:NServiceBus.Faults.FailedMessage.MessageId">
            <summary>
            The id of the failed message.
            </summary>
        </member>
        <member name="T:NServiceBus.Faults.ErrorsNotifications">
            <summary>
            Errors notifications.
            </summary>
        </member>
        <member name="E:NServiceBus.Faults.ErrorsNotifications.MessageSentToErrorQueue">
            <summary>
            Notification when a message is moved to the error queue.
            </summary>
        </member>
        <member name="E:NServiceBus.Faults.ErrorsNotifications.MessageHasFailedAnImmediateRetryAttempt">
            <summary>
            Notification when a message fails a immediate retry.
            </summary>
        </member>
        <member name="E:NServiceBus.Faults.ErrorsNotifications.MessageHasBeenSentToDelayedRetries">
            <summary>
            Notification when a message is sent to Delayed Retries queue.
            </summary>
        </member>
        <member name="T:NServiceBus.Faults.ImmediateRetryMessage">
            <summary>
            Immediate Retry event data.
            </summary>
        </member>
        <member name="M:NServiceBus.Faults.ImmediateRetryMessage.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Byte[],System.Exception,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:NServiceBus.Faults.ImmediateRetryMessage" />.
            </summary>
            <param name="messageId">The id of the failed message.</param>
            <param name="headers">Message headers.</param>
            <param name="body">Message body.</param>
            <param name="exception">Exception thrown.</param>
            <param name="retryAttempt">Number of retry attempt.</param>
        </member>
        <member name="P:NServiceBus.Faults.ImmediateRetryMessage.MessageId">
            <summary>
            Id of the failed message.
            </summary>
        </member>
        <member name="P:NServiceBus.Faults.ImmediateRetryMessage.Headers">
            <summary>
            Gets the message headers.
            </summary>
        </member>
        <member name="P:NServiceBus.Faults.ImmediateRetryMessage.Body">
            <summary>
            Gets a byte array to the body content of the message.
            </summary>
        </member>
        <member name="P:NServiceBus.Faults.ImmediateRetryMessage.Exception">
            <summary>
            The exception that caused this message to fail.
            </summary>
        </member>
        <member name="P:NServiceBus.Faults.ImmediateRetryMessage.RetryAttempt">
            <summary>
            Number of retry attempt.
            </summary>
        </member>
        <member name="T:NServiceBus.Faults.DelayedRetryMessage">
            <summary>
            Delayed Retry event data.
            </summary>
        </member>
        <member name="M:NServiceBus.Faults.DelayedRetryMessage.#ctor(System.Collections.Generic.Dictionary{System.String,System.String},System.Byte[],System.Exception,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:NServiceBus.Faults.DelayedRetryMessage" />.
            </summary>
            <param name="headers">Message headers.</param>
            <param name="body">Message body.</param>
            <param name="exception">Exception thrown.</param>
            <param name="retryAttempt">Number of retry attempt.</param>
        </member>
        <member name="P:NServiceBus.Faults.DelayedRetryMessage.Headers">
            <summary>
            Gets the message headers.
            </summary>
        </member>
        <member name="P:NServiceBus.Faults.DelayedRetryMessage.Body">
            <summary>
            Gets a byte array to the body content of the message.
            </summary>
        </member>
        <member name="P:NServiceBus.Faults.DelayedRetryMessage.Exception">
            <summary>
            The exception that caused this message to fail.
            </summary>
        </member>
        <member name="P:NServiceBus.Faults.DelayedRetryMessage.RetryAttempt">
            <summary>
            Number of retry attempt.
            </summary>
        </member>
        <member name="T:NServiceBus.Faults.FaultsHeaderKeys">
            <summary>
            Class holding keys to message headers for faults.
            </summary>
        </member>
        <member name="F:NServiceBus.Faults.FaultsHeaderKeys.FailedQ">
            <summary>
            Header key for setting/getting the queue at which the message processing failed.
            </summary>
        </member>
        <member name="T:NServiceBus.MessageProcessingOptimizationExtensions">
            <summary>
            Configuration class for durable messaging.
            </summary>
        </member>
        <member name="M:NServiceBus.MessageProcessingOptimizationExtensions.LimitMessageProcessingConcurrencyTo(NServiceBus.EndpointConfiguration,System.Int32)">
            <summary>
            Instructs the transport to limits the allowed concurrency when processing messages.
            </summary>
            <param name="config">The <see cref="T:NServiceBus.EndpointConfiguration" /> instance to apply the settings to.</param>
            <param name="maxConcurrency">The max concurrency allowed.</param>
        </member>
        <member name="T:NServiceBus.MessageMutator.MutateIncomingMessageContext">
            <summary>
            Provides ways to mutate the outgoing message instance.
            </summary>
        </member>
        <member name="M:NServiceBus.MessageMutator.MutateIncomingMessageContext.#ctor(System.Object,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initializes the context.
            </summary>
        </member>
        <member name="P:NServiceBus.MessageMutator.MutateIncomingMessageContext.Message">
            <summary>
            The current incoming message.
            </summary>
        </member>
        <member name="P:NServiceBus.MessageMutator.MutateIncomingMessageContext.Headers">
            <summary>
            The current incoming headers.
            </summary>
        </member>
        <member name="T:NServiceBus.MessageMutator.MutateIncomingTransportMessageContext">
            <summary>
            Context class for <see cref="T:NServiceBus.MessageMutator.IMutateIncomingTransportMessages" />.
            </summary>
        </member>
        <member name="M:NServiceBus.MessageMutator.MutateIncomingTransportMessageContext.#ctor(System.Byte[],System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of <see cref="T:NServiceBus.MessageMutator.MutateOutgoingTransportMessageContext" />.
            </summary>
        </member>
        <member name="P:NServiceBus.MessageMutator.MutateIncomingTransportMessageContext.Body">
            <summary>
            The body of the message.
            </summary>
        </member>
        <member name="P:NServiceBus.MessageMutator.MutateIncomingTransportMessageContext.Headers">
            <summary>
            The current incoming headers.
            </summary>
        </member>
        <member name="T:NServiceBus.MessageMutator.IMutateOutgoingTransportMessages">
            <summary>
            Provides a way to mutate the context for outgoing messages in the physical stage.
            </summary>
        </member>
        <member name="M:NServiceBus.MessageMutator.IMutateOutgoingTransportMessages.MutateOutgoing(NServiceBus.MessageMutator.MutateOutgoingTransportMessageContext)">
            <summary>
            Performs the mutation.
            </summary>
            <param name="context">Contains information about the current message and provides ways to mutate it.</param>
            <exception cref="T:System.Exception">This exception will be thrown if <code>null</code> is returned. Return a Task or mark the method as <code>async</code>.</exception>
        </member>
        <member name="T:NServiceBus.MessageMutator.MutateOutgoingMessageContext">
            <summary>
            Provides ways to mutate the outgoing message instance.
            </summary>
        </member>
        <member name="M:NServiceBus.MessageMutator.MutateOutgoingMessageContext.#ctor(System.Object,System.Collections.Generic.Dictionary{System.String,System.String},System.Object,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Initializes the context.
            </summary>
        </member>
        <member name="P:NServiceBus.MessageMutator.MutateOutgoingMessageContext.OutgoingMessage">
            <summary>
            The current outgoing message.
            </summary>
        </member>
        <member name="P:NServiceBus.MessageMutator.MutateOutgoingMessageContext.OutgoingHeaders">
            <summary>
            The current outgoing headers.
            </summary>
        </member>
        <member name="M:NServiceBus.MessageMutator.MutateOutgoingMessageContext.TryGetIncomingMessage(System.Object@)">
            <summary>
            Gets the incoming message that initiated the current send if it exists.
            </summary>
        </member>
        <member name="M:NServiceBus.MessageMutator.MutateOutgoingMessageContext.TryGetIncomingHeaders(System.Collections.Generic.IReadOnlyDictionary{System.String,System.String}@)">
            <summary>
            Gets the incoming headers that initiated the current send if it exists.
            </summary>
        </member>
        <member name="T:NServiceBus.MessageMutator.MutateOutgoingTransportMessageContext">
            <summary>
            Context class for <see cref="T:NServiceBus.MessageMutator.IMutateOutgoingTransportMessages" />.
            </summary>
        </member>
        <member name="M:NServiceBus.MessageMutator.MutateOutgoingTransportMessageContext.#ctor(System.Byte[],System.Object,System.Collections.Generic.Dictionary{System.String,System.String},System.Object,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of <see cref="T:NServiceBus.MessageMutator.MutateOutgoingTransportMessageContext" />.
            </summary>
        </member>
        <member name="P:NServiceBus.MessageMutator.MutateOutgoingTransportMessageContext.OutgoingMessage">
            <summary>
            The current outgoing message.
            </summary>
        </member>
        <member name="P:NServiceBus.MessageMutator.MutateOutgoingTransportMessageContext.OutgoingBody">
            <summary>
            The body of the message.
            </summary>
        </member>
        <member name="P:NServiceBus.MessageMutator.MutateOutgoingTransportMessageContext.OutgoingHeaders">
            <summary>
            The current outgoing headers.
            </summary>
        </member>
        <member name="M:NServiceBus.MessageMutator.MutateOutgoingTransportMessageContext.TryGetIncomingMessage(System.Object@)">
            <summary>
            Gets the incoming message that initiated the current send if it exists.
            </summary>
        </member>
        <member name="M:NServiceBus.MessageMutator.MutateOutgoingTransportMessageContext.TryGetIncomingHeaders(System.Collections.Generic.IReadOnlyDictionary{System.String,System.String}@)">
            <summary>
            Gets the incoming headers that initiated the current send if it exists.
            </summary>
        </member>
        <member name="T:NServiceBus.MessageMutator.IMutateIncomingMessages">
            <summary>
            Mutates incoming messages.
            </summary>
        </member>
        <member name="M:NServiceBus.MessageMutator.IMutateIncomingMessages.MutateIncoming(NServiceBus.MessageMutator.MutateIncomingMessageContext)">
            <summary>
            Mutates the given message right after it has been deserialized.
            </summary>
            <exception cref="T:System.Exception">This exception will be thrown if <code>null</code> is returned. Return a Task or mark the method as <code>async</code>.</exception>
        </member>
        <member name="T:NServiceBus.MessageMutator.IMutateIncomingTransportMessages">
            <summary>
            Mutates transport messages when they are received.
            Implementations are invoked before the logical messages have been deserialized.
            </summary>
        </member>
        <member name="M:NServiceBus.MessageMutator.IMutateIncomingTransportMessages.MutateIncoming(NServiceBus.MessageMutator.MutateIncomingTransportMessageContext)">
            <summary>
            Modifies various properties of the transport message.
            </summary>
            <exception cref="T:System.Exception">This exception will be thrown if <code>null</code> is returned. Return a Task or mark the method as <code>async</code>.</exception>
        </member>
        <member name="T:NServiceBus.MessageMutator.IMutateOutgoingMessages">
            <summary>
            Mutates outgoing messages.
            </summary>
        </member>
        <member name="M:NServiceBus.MessageMutator.IMutateOutgoingMessages.MutateOutgoing(NServiceBus.MessageMutator.MutateOutgoingMessageContext)">
            <summary>
            Mutates the given message just before it's serialized.
            </summary>
            <exception cref="T:System.Exception">This exception will be thrown if <code>null</code> is returned. Return a Task or mark the method as <code>async</code>.</exception>
        </member>
        <member name="T:NServiceBus.ErrorQueueSettings">
            <summary>
            Utility class used to find the configured error queue for an endpoint.
            </summary>
        </member>
        <member name="M:NServiceBus.ErrorQueueSettings.ErrorQueueAddress(NServiceBus.Settings.ReadOnlySettings)">
            <summary>
            Finds the configured error queue for an endpoint.
            The error queue can be configured in code using 'EndpointConfiguration.SendFailedMessagesTo()',
            via the 'Error' attribute of the 'MessageForwardingInCaseOfFaultConfig' configuration section,
            or using the 'HKEY_LOCAL_MACHINE\SOFTWARE\ParticularSoftware\ServiceBus\ErrorQueue' registry key.
            </summary>
            <param name="settings">The configuration settings of this endpoint.</param>
            <returns>The configured error queue of the endpoint.</returns>
            <exception cref="T:System.Exception">When the configuration for the endpoint is invalid.</exception>
        </member>
        <member name="T:NServiceBus.IDataBusProperty">
            <summary>
            The contract to implement a <see cref="T:NServiceBus.IDataBusProperty" />.
            </summary>
        </member>
        <member name="P:NServiceBus.IDataBusProperty.Key">
            <summary>
            The <see cref="T:NServiceBus.IDataBusProperty" /> key.
            </summary>
        </member>
        <member name="P:NServiceBus.IDataBusProperty.HasValue">
            <summary>
            <code>true</code> if <see cref="T:NServiceBus.IDataBusProperty" /> has a value.
            </summary>
        </member>
        <member name="M:NServiceBus.IDataBusProperty.GetValue">
            <summary>
            Gets the value of the <see cref="T:NServiceBus.IDataBusProperty" />.
            </summary>
        </member>
        <member name="M:NServiceBus.IDataBusProperty.SetValue(System.Object)">
            <summary>
            Sets the value for <see cref="T:NServiceBus.IDataBusProperty" />.
            </summary>
        </member>
        <member name="T:NServiceBus.DurableMessagesConventionExtensions">
            <summary>
            Add extensions to allow conventions for message durability to be changed.
            </summary>
        </member>
        <member name="M:NServiceBus.DurableMessagesConventionExtensions.DefiningExpressMessagesAs(NServiceBus.ConventionsBuilder,System.Func{System.Type,System.Boolean})">
            <summary>
            Sets the function to be used to evaluate whether a type is an express message or not.
            </summary>
        </member>
        <member name="T:NServiceBus.IPipelineTerminator">
            <summary>
            Marker interface for pipeline terminators.
            </summary>
        </member>
        <member name="T:NServiceBus.TimeToBeReceivedConventionExtensions">
            <summary>
            Provides the ability to specify TTBR using a convention.
            </summary>
        </member>
        <member name="M:NServiceBus.TimeToBeReceivedConventionExtensions.DefiningTimeToBeReceivedAs(NServiceBus.ConventionsBuilder,System.Func{System.Type,System.TimeSpan})">
            <summary>
            Sets the function to be used to evaluate whether a message has a time to be received.
            </summary>
        </member>
        <member name="T:NServiceBus.Performance.TimeToBeReceived.DiscardIfNotReceivedBefore">
            <summary>
            Instructs the transport to discard the message if it hasn't been received.
            within the specified timespan.
            </summary>
        </member>
        <member name="M:NServiceBus.Performance.TimeToBeReceived.DiscardIfNotReceivedBefore.#ctor(System.TimeSpan)">
            <summary>
            Initializes the constraint with a max time.
            </summary>
        </member>
        <member name="P:NServiceBus.Performance.TimeToBeReceived.DiscardIfNotReceivedBefore.MaxTime">
            <summary>
            The max time to wait before discarding the message.
            </summary>
        </member>
        <member name="T:NServiceBus.BestPracticesOptionExtensions">
            <summary>
            Provides options for disabling the best practice enforcement.
            </summary>
        </member>
        <member name="M:NServiceBus.BestPracticesOptionExtensions.DoNotEnforceBestPractices(NServiceBus.Extensibility.ExtendableOptions)">
            <summary>
            Turns off the best practice enforcement for the given message.
            </summary>
        </member>
        <member name="M:NServiceBus.BestPracticesOptionExtensions.IgnoredBestPractices(NServiceBus.Extensibility.ExtendableOptions)">
            <summary>
            Returns whether <see cref="M:NServiceBus.BestPracticesOptionExtensions.DoNotEnforceBestPractices(NServiceBus.Extensibility.ExtendableOptions)" /> has ben called or
            not.
            </summary>
            <returns><c>true</c> if best practice enforcement has ben disabled, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:NServiceBus.BestPracticesOptionExtensions.DoNotEnforceBestPractices(NServiceBus.Pipeline.IOutgoingReplyContext)">
            <summary>
            Turns off the best practice enforcement for the given context.
            </summary>
        </member>
        <member name="M:NServiceBus.BestPracticesOptionExtensions.DoNotEnforceBestPractices(NServiceBus.Pipeline.IOutgoingSendContext)">
            <summary>
            Turns off the best practice enforcement for the given context.
            </summary>
        </member>
        <member name="M:NServiceBus.BestPracticesOptionExtensions.DoNotEnforceBestPractices(NServiceBus.Pipeline.ISubscribeContext)">
            <summary>
            Turns off the best practice enforcement for the given context.
            </summary>
        </member>
        <member name="M:NServiceBus.BestPracticesOptionExtensions.DoNotEnforceBestPractices(NServiceBus.Pipeline.IOutgoingPublishContext)">
            <summary>
            Turns off the best practice enforcement for the given context.
            </summary>
        </member>
        <member name="M:NServiceBus.BestPracticesOptionExtensions.DoNotEnforceBestPractices(NServiceBus.Pipeline.IUnsubscribeContext)">
            <summary>
            Turns off the best practice enforcement for the given context.
            </summary>
        </member>
        <member name="T:NServiceBus.InMemory.Outbox.InMemoryOutboxSettingsExtensions">
            <summary>
            Contains InMemoryOutbox related settings extensions.
            </summary>
        </member>
        <member name="M:NServiceBus.InMemory.Outbox.InMemoryOutboxSettingsExtensions.TimeToKeepDeduplicationData(NServiceBus.Outbox.OutboxSettings,System.TimeSpan)">
            <summary>
            Specifies how long the outbox should keep message data in storage to be able to deduplicate.
            </summary>
            <param name="settings">The outbox settings.</param>
            <param name="time">
            Defines the timespan which indicates how long the outbox deduplication entries should be kept.
            i.e. if <code>TimeSpan.FromDays(1)</code> is used the deduplication entries are kept for no longer than one day.
            It is not possible to use a negative or zero TimeSpan value.
            </param>
        </member>
        <member name="T:NServiceBus.LogicalAddress">
            <summary>
            Represents a logical address (independent of transport).
            </summary>
        </member>
        <member name="M:NServiceBus.LogicalAddress.CreateRemoteAddress(NServiceBus.Routing.EndpointInstance)">
            <summary>
            Creates a logical address for a remote endpoint.
            </summary>
            <param name="endpointInstance">The endpoint instance that describes the remote endpoint.</param>
        </member>
        <member name="M:NServiceBus.LogicalAddress.CreateLocalAddress(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Creates a logical address for this endpoint.
            </summary>
            <param name="queueName">The name of the main input queue.</param>
            <param name="properties">The additional transport-specific properties.</param>
        </member>
        <member name="M:NServiceBus.LogicalAddress.CreateQualifiedAddress(System.String)">
            <summary>
            Creates a new logical address with the given qualifier.
            </summary>
            <param name="qualifier">The qualifier for the new address.</param>
        </member>
        <member name="M:NServiceBus.LogicalAddress.CreateIndividualizedAddress(System.String)">
            <summary>
            Creates a new individualized logical address with the specified discriminator.
            </summary>
            <param name="discriminator">The discriminator value used to individualize the address.</param>
        </member>
        <member name="P:NServiceBus.LogicalAddress.Qualifier">
            <summary>
            Returns the qualifier, or null if the address isn't qualified.
            </summary>
        </member>
        <member name="P:NServiceBus.LogicalAddress.EndpointInstance">
            <summary>
            Returns the endpoint instance.
            </summary>
        </member>
        <member name="M:NServiceBus.LogicalAddress.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="M:NServiceBus.LogicalAddress.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:NServiceBus.LogicalAddress.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current object.
            </returns>
        </member>
        <member name="M:NServiceBus.LogicalAddress.op_Equality(NServiceBus.LogicalAddress,NServiceBus.LogicalAddress)">
            <summary>
            Checks for equality.
            </summary>
        </member>
        <member name="M:NServiceBus.LogicalAddress.op_Inequality(NServiceBus.LogicalAddress,NServiceBus.LogicalAddress)">
            <summary>
            Checks for inequality.
            </summary>
        </member>
        <member name="T:NServiceBus.PublishOptions">
            <summary>
            Allows the users to control how the publish is performed.
            </summary>
        </member>
        <member name="T:NServiceBus.ReplyOptions">
            <summary>
            Exposes options relevant for replies.
            </summary>
        </member>
        <member name="T:NServiceBus.SubscribeOptions">
            <summary>
            Allows the users to control how the subscribe is performed.
            </summary>
        </member>
        <member name="T:NServiceBus.UnsubscribeOptions">
            <summary>
            Allows the users to control how the unsubscribe is performed.
            </summary>
        </member>
        <member name="T:NServiceBus.NonDurableDelivery">
            <summary>
            Instructs the transport that it's allowed to transport the message with out the need to store it durable.
            </summary>
        </member>
        <member name="T:NServiceBus.RoutingOptionExtensions">
            <summary>
            Gives users fine grained control over routing via extension methods.
            </summary>
        </member>
        <member name="M:NServiceBus.RoutingOptionExtensions.SetDestination(NServiceBus.SendOptions,System.String)">
            <summary>
            Allows a specific physical address to be used to route this message.
            </summary>
            <param name="options">Option being extended.</param>
            <param name="destination">The destination address.</param>
        </member>
        <member name="M:NServiceBus.RoutingOptionExtensions.SetDestination(NServiceBus.ReplyOptions,System.String)">
            <summary>
            Allows the target endpoint instance for this reply to set. If not used the reply will be sent to the `ReplyToAddress`
            of the incoming message.
            </summary>
            <param name="options">Option being extended.</param>
            <param name="destination">The new target address.</param>
        </member>
        <member name="M:NServiceBus.RoutingOptionExtensions.GetDestination(NServiceBus.ReplyOptions)">
            <summary>
            Returns the destination configured by <see cref="M:NServiceBus.RoutingOptionExtensions.SetDestination(NServiceBus.ReplyOptions,System.String)" />.
            </summary>
            <param name="options">Option being extended.</param>
            <returns>The specified destination address or <c>null</c> when no destination was specified.</returns>
        </member>
        <member name="M:NServiceBus.RoutingOptionExtensions.GetDestination(NServiceBus.SendOptions)">
            <summary>
            Returns the destination configured by <see cref="M:NServiceBus.RoutingOptionExtensions.SetDestination(NServiceBus.SendOptions,System.String)" />.
            </summary>
            <param name="options">Option being extended.</param>
            <returns>The specified destination address or <c>null</c> when no destination was specified.</returns>
        </member>
        <member name="M:NServiceBus.RoutingOptionExtensions.RouteToThisEndpoint(NServiceBus.SendOptions)">
            <summary>
            Routes this message to any instance of this endpoint.
            </summary>
            <param name="options">Option being extended.</param>
        </member>
        <member name="M:NServiceBus.RoutingOptionExtensions.IsRoutingToThisEndpoint(NServiceBus.SendOptions)">
            <summary>
            Returns whether the message should be routed to this endpoint.
            </summary>
            <param name="options">Option being extended.</param>
            <returns><c>true</c> when <see cref="M:NServiceBus.RoutingOptionExtensions.RouteToThisEndpoint(NServiceBus.SendOptions)" /> has been called, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:NServiceBus.RoutingOptionExtensions.RouteToThisInstance(NServiceBus.SendOptions)">
            <summary>
            Routes this message to this endpoint instance.
            </summary>
            <param name="options">Option being extended.</param>
        </member>
        <member name="M:NServiceBus.RoutingOptionExtensions.IsRoutingToThisInstance(NServiceBus.SendOptions)">
            <summary>
            Returns whether the message should be routed to this endpoint instance.
            </summary>
            <param name="options">Option being extended.</param>
            <returns><c>true</c> when <see cref="M:NServiceBus.RoutingOptionExtensions.IsRoutingToThisInstance(NServiceBus.SendOptions)" /> has been called, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:NServiceBus.RoutingOptionExtensions.RouteToSpecificInstance(NServiceBus.SendOptions,System.String)">
            <summary>
            Routes this message to a specific instance of a destination endpoint.
            </summary>
            <param name="options">Option being extended.</param>
            <param name="instanceId">ID of destination instance.</param>
        </member>
        <member name="M:NServiceBus.RoutingOptionExtensions.GetRouteToSpecificInstance(NServiceBus.SendOptions)">
            <summary>
            Returns the instance configured by <see cref="M:NServiceBus.RoutingOptionExtensions.RouteToSpecificInstance(NServiceBus.SendOptions,System.String)" /> where the message should be routed to.
            </summary>
            <param name="options">Option being extended.</param>
            <returns>The configured instance ID or <c>null</c> when no instance was configured.</returns>
        </member>
        <member name="M:NServiceBus.RoutingOptionExtensions.RouteReplyToThisInstance(NServiceBus.SendOptions)">
            <summary>
            Instructs the receiver to route the reply for this message to this instance.
            </summary>
            <param name="options">Option being extended.</param>
        </member>
        <member name="M:NServiceBus.RoutingOptionExtensions.IsRoutingReplyToThisInstance(NServiceBus.SendOptions)">
            <summary>
            Indicates whether <see cref="M:NServiceBus.RoutingOptionExtensions.RouteReplyToThisInstance(NServiceBus.SendOptions)" /> has been called on this options.
            </summary>
            <param name="options">Option being extended.</param>
        </member>
        <member name="M:NServiceBus.RoutingOptionExtensions.RouteReplyToAnyInstance(NServiceBus.SendOptions)">
            <summary>
            Instructs the receiver to route the reply for this message to any instance of this endpoint.
            </summary>
            <param name="options">Option being extended.</param>
        </member>
        <member name="M:NServiceBus.RoutingOptionExtensions.IsRoutingReplyToAnyInstance(NServiceBus.SendOptions)">
            <summary>
            Indicates whether <see cref="M:NServiceBus.RoutingOptionExtensions.RouteReplyToAnyInstance(NServiceBus.SendOptions)" /> has been called on this options.
            </summary>
            <param name="options">Option being extended.</param>
        </member>
        <member name="M:NServiceBus.RoutingOptionExtensions.RouteReplyToThisInstance(NServiceBus.ReplyOptions)">
            <summary>
            Instructs the receiver to route the reply for this message to this instance.
            </summary>
            <param name="options">Option being extended.</param>
        </member>
        <member name="M:NServiceBus.RoutingOptionExtensions.IsRoutingReplyToThisInstance(NServiceBus.ReplyOptions)">
            <summary>
            Indicates whether <see cref="M:NServiceBus.RoutingOptionExtensions.RouteReplyToThisInstance(NServiceBus.ReplyOptions)" /> has been called on this options.
            </summary>
            <param name="options">Option being extended.</param>
        </member>
        <member name="M:NServiceBus.RoutingOptionExtensions.RouteReplyToAnyInstance(NServiceBus.ReplyOptions)">
            <summary>
            Instructs the receiver to route the reply for this message to any instance of this endpoint.
            </summary>
            <param name="options">Option being extended.</param>
        </member>
        <member name="M:NServiceBus.RoutingOptionExtensions.IsRoutingReplyToAnyInstance(NServiceBus.ReplyOptions)">
            <summary>
            Indicates whether <see cref="M:NServiceBus.RoutingOptionExtensions.RouteReplyToAnyInstance(NServiceBus.ReplyOptions)" /> has been called on this options.
            </summary>
            <param name="options">Option being extended.</param>
        </member>
        <member name="M:NServiceBus.RoutingOptionExtensions.RouteReplyTo(NServiceBus.ReplyOptions,System.String)">
            <summary>
            Instructs the receiver to route the reply to specified address.
            </summary>
            <param name="options">Option being extended.</param>
            <param name="address">Reply destination.</param>
        </member>
        <member name="M:NServiceBus.RoutingOptionExtensions.GetReplyToRoute(NServiceBus.ReplyOptions)">
            <summary>
            Returns the configured route by <see cref="M:NServiceBus.RoutingOptionExtensions.RouteReplyTo(NServiceBus.ReplyOptions,System.String)" />.
            </summary>
            <param name="options">Option being extended.</param>
            <returns>The configured reply to address or <c>null</c> when no address configured.</returns>
        </member>
        <member name="M:NServiceBus.RoutingOptionExtensions.RouteReplyTo(NServiceBus.SendOptions,System.String)">
            <summary>
            Instructs the receiver to route the reply to specified address.
            </summary>
            <param name="options">Option being extended.</param>
            <param name="address">Reply destination.</param>
        </member>
        <member name="M:NServiceBus.RoutingOptionExtensions.GetReplyToRoute(NServiceBus.SendOptions)">
            <summary>
            Returns the configured route by <see cref="M:NServiceBus.RoutingOptionExtensions.RouteReplyTo(NServiceBus.SendOptions,System.String)" />.
            </summary>
            <param name="options">Option being extended.</param>
            <returns>The configured reply to address or <c>null</c> when no address configured.</returns>
        </member>
        <member name="T:NServiceBus.SendOptions">
            <summary>
            Allows the users to control how the send is performed.
            </summary>
        </member>
        <member name="T:NServiceBus.StaticHeadersConfigExtensions">
            <summary>
            Extensions to the public configuration api.
            </summary>
        </member>
        <member name="M:NServiceBus.StaticHeadersConfigExtensions.AddHeaderToAllOutgoingMessages(NServiceBus.EndpointConfiguration,System.String,System.String)">
            <summary>
            Adds a header that will be attached to all outgoing messages for this endpoint. These headers can not be changed at
            runtime. Use a outgoing message mutator
            if you need to apply headers that needs to be dynamic per message. You can also set headers explicitly for a given
            message using any of the Send/Reply or PublishOptions.
            </summary>
            <param name="config">The <see cref="T:NServiceBus.EndpointConfiguration" /> instance to apply the settings to.</param>
            <param name="key">The static header key.</param>
            <param name="value">The static header value.</param>
        </member>
        <member name="T:NServiceBus.MsmqConfigurationExtensions">
            <summary>
            Adds extensions methods to <see cref="T:NServiceBus.TransportExtensions`1" /> for configuration purposes.
            </summary>
        </member>
        <member name="M:NServiceBus.MsmqConfigurationExtensions.ApplyLabelToMessages(NServiceBus.TransportExtensions{NServiceBus.MsmqTransport},System.Func{System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.String})">
            <summary>
            Set a delegate to use for applying the <see cref="P:System.Messaging.Message.Label" /> property when sending a message.
            </summary>
            <remarks>
            This delegate will be used for all valid messages sent via MSMQ.
            This includes, not just standard messages, but also Audits, Errors and all control messages.
            In some cases it may be useful to use the <see cref="F:NServiceBus.Headers.ControlMessageHeader" /> key to determine if a message is
            a control message.
            The only exception to this rule is received messages with corrupted headers. These messages will be forwarded to the
            error queue with no label applied.
            </remarks>
        </member>
        <member name="M:NServiceBus.MsmqConfigurationExtensions.TransactionScopeOptions(NServiceBus.TransportExtensions{NServiceBus.MsmqTransport},System.Nullable{System.TimeSpan},System.Nullable{System.Transactions.IsolationLevel})">
            <summary>
            Allows to change the transaction isolation level and timeout for the `TransactionScope` used to receive messages.
            </summary>
            <remarks>
            If not specified the default transaction timeout of the machine will be used and the isolation level will be set to
            `ReadCommited`.
            </remarks>
        </member>
        <member name="M:NServiceBus.MsmqConfigurationExtensions.SetMessageDistributionStrategy(NServiceBus.RoutingSettings{NServiceBus.MsmqTransport},NServiceBus.Routing.DistributionStrategy)">
            <summary>
            Sets a distribution strategy for a given endpoint.
            </summary>
            <param name="config">Config object.</param>
            <param name="distributionStrategy">The instance of a distribution strategy.</param>
        </member>
        <member name="M:NServiceBus.MsmqConfigurationExtensions.InstanceMappingFile(NServiceBus.RoutingSettings{NServiceBus.MsmqTransport})">
            <summary>
            Returns the configuration options for the file based instance mapping file.
            </summary>
        </member>
        <member name="M:NServiceBus.MsmqConfigurationExtensions.UseDeadLetterQueueForMessagesWithTimeToReachQueue(NServiceBus.TransportExtensions{NServiceBus.MsmqTransport})">
            <summary>
            Moves expired messages using the "time to reach queue" setting to the dead letter queue instead of discarding them.
            </summary>
        </member>
        <member name="T:NServiceBus.HeaderOptionExtensions">
            <summary>
            Extensions to the options to provide ways to set message headers.
            </summary>
        </member>
        <member name="M:NServiceBus.HeaderOptionExtensions.SetHeader(NServiceBus.Extensibility.ExtendableOptions,System.String,System.String)">
            <summary>
            Allows headers to be set for the outgoing message.
            </summary>
            <param name="options">The options to extend.</param>
            <param name="key">The header key.</param>
            <param name="value">The header value.</param>
        </member>
        <member name="M:NServiceBus.HeaderOptionExtensions.GetHeaders(NServiceBus.Extensibility.ExtendableOptions)">
            <summary>
            Returns all headers set by <see cref="M:NServiceBus.HeaderOptionExtensions.SetHeader(NServiceBus.Extensibility.ExtendableOptions,System.String,System.String)" /> on the outgoing message.
            </summary>
        </member>
        <member name="T:NServiceBus.MessageIdExtensions">
            <summary>
            Extensions to the outgoing pipeline.
            </summary>
        </member>
        <member name="M:NServiceBus.MessageIdExtensions.SetMessageId(NServiceBus.Extensibility.ExtendableOptions,System.String)">
            <summary>
            Allows the user to set the message id.
            </summary>
            <param name="options">Options to extend.</param>
            <param name="messageId">The message id to use.</param>
        </member>
        <member name="M:NServiceBus.MessageIdExtensions.GetMessageId(NServiceBus.Extensibility.ExtendableOptions)">
            <summary>
            Returns the message id.
            </summary>
            <param name="options">Options to extend.</param>
            <returns>The message id.</returns>
        </member>
        <member name="T:NServiceBus.Configuration.AdvanceExtensibility.AdvanceExtensibilityExtensions">
            <summary>
            Extension methods declarations.
            </summary>
        </member>
        <member name="M:NServiceBus.Configuration.AdvanceExtensibility.AdvanceExtensibilityExtensions.GetSettings(NServiceBus.Configuration.AdvanceExtensibility.ExposeSettings)">
            <summary>
            Gives access to the <see cref="T:NServiceBus.Settings.SettingsHolder" /> for extensibility.
            </summary>
        </member>
        <member name="T:NServiceBus.Configuration.AdvanceExtensibility.ExposeSettings">
            <summary>
            Base class that exposes <see cref="T:NServiceBus.Settings.SettingsHolder" /> for extensibility.
            </summary>
        </member>
        <member name="M:NServiceBus.Configuration.AdvanceExtensibility.ExposeSettings.#ctor(NServiceBus.Settings.SettingsHolder)">
            <summary>
            Initializes a new instance of <see cref="T:NServiceBus.Configuration.AdvanceExtensibility.ExposeSettings" />.
            </summary>
        </member>
        <member name="P:NServiceBus.Configuration.AdvanceExtensibility.ExposeSettings.Settings">
            <summary>
            Get the current <see cref="T:NServiceBus.Settings.SettingsHolder" /> this <see cref="T:NServiceBus.Configuration.AdvanceExtensibility.ExposeSettings" /> wraps.
            </summary>
        </member>
        <member name="T:NServiceBus.Gateway.Deduplication.IDeduplicateMessages">
            <summary>
            Defines the api for storages that wants to provide storage for gateway deduplication.
            </summary>
        </member>
        <member name="M:NServiceBus.Gateway.Deduplication.IDeduplicateMessages.DeduplicateMessage(System.String,System.DateTime,NServiceBus.Extensibility.ContextBag)">
            <summary>
            Returns true if the message is a duplicate.
            </summary>
            <param name="clientId">The client id that defines the range of ids to check for duplicates.</param>
            <param name="timeReceived">The time received of the message to allow the storage to do cleanup.</param>
            <param name="context">The current pipeline context.</param>
        </member>
        <member name="T:NServiceBus.HostInfoConfigurationExtensions">
            <summary>
            Extension methods to configure hostid.
            </summary>
        </member>
        <member name="M:NServiceBus.HostInfoConfigurationExtensions.UniquelyIdentifyRunningInstance(NServiceBus.EndpointConfiguration)">
            <summary>
            Entry point for HostInfo related configuration.
            </summary>
            <param name="config">The <see cref="T:NServiceBus.EndpointConfiguration" /> instance to apply the settings to.</param>
        </member>
        <member name="T:NServiceBus.HostInfoSettings">
            <summary>
            Configuration class for <see cref="T:NServiceBus.Hosting.HostInformation" /> settings.
            </summary>
        </member>
        <member name="M:NServiceBus.HostInfoSettings.UsingInstalledFilePath">
            <summary>
            In this mode, the host id is derived from the installed file path and the current machine name.
            </summary>
            <remarks>
            This mode is only recommended if upgrades are deployed always to the same path.
            When using <a href="https://octopusdeploy.com/">Octopus Deploy</a> do not use this mode, instead use
            <see cref="M:NServiceBus.HostInfoSettings.UsingNames(System.String,System.String)" />.
            </remarks>
        </member>
        <member name="M:NServiceBus.HostInfoSettings.UsingCustomIdentifier(System.Guid)">
            <summary>
            In this mode, the host id is fully managed by the user.
            </summary>
            <remarks>
            This mode is only recommended if you know what you are doing.
            The id should be the same across endpoint restarts unless physical host has changed.
            </remarks>
        </member>
        <member name="M:NServiceBus.HostInfoSettings.UsingNames(System.String,System.String)">
            <summary>
            In this mode, a host id will be generated from <paramref name="instanceName" /> and <paramref name="hostName" />.
            </summary>
            <remarks>
            This mode is recommended when deploying in Azure roles or <see cref="M:NServiceBus.HostInfoSettings.UsingInstalledFilePath" /> is not appropriate.
            </remarks>
        </member>
        <member name="M:NServiceBus.HostInfoSettings.UsingCustomDisplayName(System.String)">
            <summary>
            Allows to override the display name.
            </summary>
        </member>
        <member name="T:NServiceBus.INeedInitialization">
            <summary>
            Indicate that the implementing class will specify configuration.
            </summary>
        </member>
        <member name="M:NServiceBus.INeedInitialization.Customize(NServiceBus.EndpointConfiguration)">
            <summary>
            Allows to override default settings.
            </summary>
            <param name="configuration">Endpoint configuration builder.</param>
        </member>
        <member name="T:NServiceBus.InstallConfigExtensions">
            <summary>
            Convenience methods for configuring how instances of  <see cref="T:NServiceBus.Installation.INeedToInstallSomething" />s are run.
            </summary>
        </member>
        <member name="M:NServiceBus.InstallConfigExtensions.EnableInstallers(NServiceBus.EndpointConfiguration,System.String)">
            <summary>
            Enable all <see cref="T:NServiceBus.Installation.INeedToInstallSomething" /> to run when the configuration is complete.
            </summary>
            <param name="config">The <see cref="T:NServiceBus.EndpointConfiguration" /> instance to apply the settings to.</param>
            <param name="username">The username to pass to <see cref="M:NServiceBus.Installation.INeedToInstallSomething.Install(System.String)" />.</param>
        </member>
        <member name="T:NServiceBus.Logging.DefaultFactory">
            <summary>
            The default <see cref="T:NServiceBus.Logging.LoggingFactoryDefinition" />.
            </summary>
        </member>
        <member name="M:NServiceBus.Logging.DefaultFactory.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:NServiceBus.Logging.DefaultFactory" />.
            </summary>
        </member>
        <member name="M:NServiceBus.Logging.DefaultFactory.GetLoggingFactory">
            <summary>
            <see cref="M:NServiceBus.Logging.LoggingFactoryDefinition.GetLoggingFactory" />.
            </summary>
        </member>
        <member name="M:NServiceBus.Logging.DefaultFactory.Level(NServiceBus.Logging.LogLevel)">
            <summary>
            Controls the <see cref="T:NServiceBus.Logging.LogLevel" />.
            </summary>
        </member>
        <member name="M:NServiceBus.Logging.DefaultFactory.Directory(System.String)">
            <summary>
            The directory to log files to.
            </summary>
        </member>
        <member name="T:NServiceBus.Logging.LoggingFactoryDefinition">
            <summary>
            Base class for logging definitions.
            </summary>
        </member>
        <member name="M:NServiceBus.Logging.LoggingFactoryDefinition.GetLoggingFactory">
            <summary>
            Constructs an instance of <see cref="T:NServiceBus.Logging.ILoggerFactory" /> for use by <see cref="M:NServiceBus.Logging.LogManager.Use``1" />.
            </summary>
        </member>
        <member name="T:NServiceBus.Logging.LogLevel">
            <summary>
            The allowed log levels. <seealso cref="T:NServiceBus.Logging.LogManager" />.
            </summary>
        </member>
        <member name="F:NServiceBus.Logging.LogLevel.Debug">
            <summary>
            Debug level messages.
            </summary>
        </member>
        <member name="F:NServiceBus.Logging.LogLevel.Info">
            <summary>
            Information level messages.
            </summary>
        </member>
        <member name="F:NServiceBus.Logging.LogLevel.Warn">
            <summary>
            Warning level messages.
            </summary>
        </member>
        <member name="F:NServiceBus.Logging.LogLevel.Error">
            <summary>
            Error level messages.
            </summary>
        </member>
        <member name="F:NServiceBus.Logging.LogLevel.Fatal">
            <summary>
            Fatal level messages.
            </summary>
        </member>
        <member name="T:NServiceBus.Logging.ILog">
            <summary>
            Provides logging methods and utility functions.
            </summary>
        </member>
        <member name="P:NServiceBus.Logging.ILog.IsDebugEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for the <see cref="F:NServiceBus.Logging.LogLevel.Debug" /> level.
            </summary>
        </member>
        <member name="P:NServiceBus.Logging.ILog.IsInfoEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for the <see cref="F:NServiceBus.Logging.LogLevel.Info" /> level.
            </summary>
        </member>
        <member name="P:NServiceBus.Logging.ILog.IsWarnEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for the <see cref="F:NServiceBus.Logging.LogLevel.Warn" /> level.
            </summary>
        </member>
        <member name="P:NServiceBus.Logging.ILog.IsErrorEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for the <see cref="F:NServiceBus.Logging.LogLevel.Error" /> level.
            </summary>
        </member>
        <member name="P:NServiceBus.Logging.ILog.IsFatalEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for the <see cref="F:NServiceBus.Logging.LogLevel.Fatal" /> level.
            </summary>
        </member>
        <member name="M:NServiceBus.Logging.ILog.Debug(System.String)">
            <summary>
            Writes the message at the <see cref="F:NServiceBus.Logging.LogLevel.Debug" /> level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NServiceBus.Logging.ILog.Debug(System.String,System.Exception)">
            <summary>
            Writes the message and exception at the <see cref="F:NServiceBus.Logging.LogLevel.Debug" /> level.
            </summary>
            <param name="message">A string to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NServiceBus.Logging.ILog.DebugFormat(System.String,System.Object[])">
            <summary>
            Writes the message at the <see cref="F:NServiceBus.Logging.LogLevel.Debug" /> level using the specified <paramref name="format" /> provider
            and format <paramref name="args" />.
            </summary>
            <param name="format">A string containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NServiceBus.Logging.ILog.Info(System.String)">
            <summary>
            Writes the message at the <see cref="F:NServiceBus.Logging.LogLevel.Info" /> level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NServiceBus.Logging.ILog.Info(System.String,System.Exception)">
            <summary>
            Writes the message and exception at the <see cref="F:NServiceBus.Logging.LogLevel.Info" /> level.
            </summary>
            <param name="message">A string to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NServiceBus.Logging.ILog.InfoFormat(System.String,System.Object[])">
            <summary>
            Writes the message at the <see cref="F:NServiceBus.Logging.LogLevel.Info" /> level using the specified <paramref name="format" /> provider
            and format <paramref name="args" />.
            </summary>
            <param name="format">A string containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NServiceBus.Logging.ILog.Warn(System.String)">
            <summary>
            Writes the message at the <see cref="F:NServiceBus.Logging.LogLevel.Warn" /> level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NServiceBus.Logging.ILog.Warn(System.String,System.Exception)">
            <summary>
            Writes the message and exception at the <see cref="F:NServiceBus.Logging.LogLevel.Warn" /> level.
            </summary>
            <param name="message">A string to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NServiceBus.Logging.ILog.WarnFormat(System.String,System.Object[])">
            <summary>
            Writes the message at the <see cref="F:NServiceBus.Logging.LogLevel.Warn" /> level using the specified <paramref name="format" /> provider
            and format <paramref name="args" />.
            </summary>
            <param name="format">A string containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NServiceBus.Logging.ILog.Error(System.String)">
            <summary>
            Writes the message at the <see cref="F:NServiceBus.Logging.LogLevel.Error" /> level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NServiceBus.Logging.ILog.Error(System.String,System.Exception)">
            <summary>
            Writes the message and exception at the <see cref="F:NServiceBus.Logging.LogLevel.Error" /> level.
            </summary>
            <param name="message">A string to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NServiceBus.Logging.ILog.ErrorFormat(System.String,System.Object[])">
            <summary>
            Writes the message at the <see cref="F:NServiceBus.Logging.LogLevel.Error" /> level using the specified <paramref name="format" /> provider
            and format <paramref name="args" />.
            </summary>
            <param name="format">A string containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NServiceBus.Logging.ILog.Fatal(System.String)">
            <summary>
            Writes the message at the <see cref="F:NServiceBus.Logging.LogLevel.Fatal" /> level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NServiceBus.Logging.ILog.Fatal(System.String,System.Exception)">
            <summary>
            Writes the message and exception at the <see cref="F:NServiceBus.Logging.LogLevel.Fatal" /> level.
            </summary>
            <param name="message">A string to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NServiceBus.Logging.ILog.FatalFormat(System.String,System.Object[])">
            <summary>
            Writes the message at the <see cref="F:NServiceBus.Logging.LogLevel.Fatal" /> level using the specified <paramref name="format" /> provider
            and format <paramref name="args" />.
            </summary>
            <param name="format">A string containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="T:NServiceBus.Logging.ILoggerFactory">
            <summary>
            Used by <see cref="T:NServiceBus.Logging.LogManager" /> to facilitate redirecting logging to a different library.
            </summary>
        </member>
        <member name="M:NServiceBus.Logging.ILoggerFactory.GetLogger(System.Type)">
            <summary>
            Gets a <see cref="T:NServiceBus.Logging.ILog" /> for a specific <paramref name="type" />.
            </summary>
            <param name="type">The <see cref="T:System.Type" /> to get the <see cref="T:NServiceBus.Logging.ILog" /> for.</param>
            <returns>An instance of a <see cref="T:NServiceBus.Logging.ILog" /> specifically for <paramref name="type" />.</returns>
        </member>
        <member name="M:NServiceBus.Logging.ILoggerFactory.GetLogger(System.String)">
            <summary>
            Gets a <see cref="T:NServiceBus.Logging.ILog" /> for a specific <paramref name="name" />.
            </summary>
            <param name="name">The name of the usage to get the <see cref="T:NServiceBus.Logging.ILog" /> for.</param>
            <returns>An instance of a <see cref="T:NServiceBus.Logging.ILog" /> specifically for <paramref name="name" />.</returns>
        </member>
        <member name="T:NServiceBus.Logging.LogManager">
            <summary>
            Responsible for the creation of <see cref="T:NServiceBus.Logging.ILog" /> instances and used as an extension point to redirect log event to
            an external library.
            </summary>
            <remarks>
            The default logging will be to the console and a rolling log file.
            </remarks>
        </member>
        <member name="M:NServiceBus.Logging.LogManager.Use``1">
            <summary>
            Used to inject an instance of <see cref="T:NServiceBus.Logging.ILoggerFactory" /> into <see cref="T:NServiceBus.Logging.LogManager" />.
            </summary>
        </member>
        <member name="M:NServiceBus.Logging.LogManager.UseFactory(NServiceBus.Logging.ILoggerFactory)">
            <summary>
            An instance of <see cref="T:NServiceBus.Logging.ILoggerFactory" /> that will be used to construct <see cref="T:NServiceBus.Logging.ILog" />s for static fields.
            </summary>
            <remarks>
            Replace this instance at application statup to redirect log event to the custom logging library.
            </remarks>
        </member>
        <member name="M:NServiceBus.Logging.LogManager.GetLogger``1">
            <summary>
            Construct a <see cref="T:NServiceBus.Logging.ILog" /> using <typeparamref name="T" /> as the name.
            </summary>
        </member>
        <member name="M:NServiceBus.Logging.LogManager.GetLogger(System.Type)">
            <summary>
            Construct a <see cref="T:NServiceBus.Logging.ILog" /> using <paramref name="type" /> as the name.
            </summary>
        </member>
        <member name="M:NServiceBus.Logging.LogManager.GetLogger(System.String)">
            <summary>
            Construct a <see cref="T:NServiceBus.Logging.ILog" /> for <paramref name="name" />.
            </summary>
        </member>
        <member name="M:NServiceBus.ConcreteProxyCreator.CreateTypeFrom(System.Type)">
            <summary>
            Generates the concrete implementation of the given type.
            Only properties on the given type are generated in the concrete implementation.
            </summary>
        </member>
        <member name="M:NServiceBus.ConcreteProxyCreator.AddCustomAttributeToProperty(System.Object,System.Reflection.Emit.PropertyBuilder)">
            <summary>
            Given a custom attribute and property builder, adds an instance of custom attribute
            to the property builder
            </summary>
        </member>
        <member name="M:NServiceBus.ConcreteProxyCreator.GetAllProperties(System.Type)">
            <summary>
            Returns all properties on the given type, going up the inheritance hierarchy.
            </summary>
        </member>
        <member name="T:NServiceBus.CriticalTimeMonitoringConfig">
            <summary>
            Provide configuration options for monitoring related settings.
            </summary>
        </member>
        <member name="M:NServiceBus.CriticalTimeMonitoringConfig.EnableCriticalTimePerformanceCounter(NServiceBus.EndpointConfiguration)">
            <summary>
            Enables the NServiceBus specific performance counters.
            </summary>
            <param name="config">The <see cref="T:NServiceBus.EndpointConfiguration" /> instance to apply the settings to.</param>
        </member>
        <member name="T:NServiceBus.SLAMonitoringConfig">
            <summary>
            Provide configuration options for monitoring related settings.
            </summary>
        </member>
        <member name="M:NServiceBus.SLAMonitoringConfig.EnableSLAPerformanceCounter(NServiceBus.EndpointConfiguration,System.TimeSpan)">
            <summary>
            Enables the NServiceBus specific performance counters with a specific EndpointSLA.
            </summary>
            <param name="config">The <see cref="T:NServiceBus.EndpointConfiguration" /> instance to apply the settings to.</param>
            <param name="sla">The <see cref="T:System.TimeSpan" /> to use oa the SLA. Must be greater than <see cref="F:System.TimeSpan.Zero" />.</param>
        </member>
        <member name="M:NServiceBus.SLAMonitoringConfig.EnableSLAPerformanceCounter(NServiceBus.EndpointConfiguration)">
            <summary>
            Enables the NServiceBus specific performance counters with a specific EndpointSLA.
            </summary>
            <param name="config">The <see cref="T:NServiceBus.EndpointConfiguration" /> instance to apply the settings to.</param>
        </member>
        <member name="T:NServiceBus.AddressMode">
            <summary>
            Determines how the azure location behaves.
            </summary>
        </member>
        <member name="F:NServiceBus.AddressMode.Local">
            <summary>
            Addressing behavior is confirm to local queuing policies, eg. MSMQ.
            </summary>
        </member>
        <member name="F:NServiceBus.AddressMode.Remote">
            <summary>
            Addressing behavior is confirm to remote queuing policies, eg. Azure.
            </summary>
        </member>
        <member name="T:NServiceBus.AutoSubscribeSettingsExtensions">
            <summary>
            Adds support for custom configuration of the auto subscribe feature.
            </summary>
        </member>
        <member name="M:NServiceBus.AutoSubscribeSettingsExtensions.AutoSubscribe(NServiceBus.EndpointConfiguration)">
            <summary>
            Use this method to change how auto subscribe works.
            </summary>
            <param name="config">The <see cref="T:NServiceBus.EndpointConfiguration" /> instance to apply the settings to.</param>
        </member>
        <member name="T:NServiceBus.AutomaticSubscriptions.Config.AutoSubscribeSettings">
            <summary>
            Provides fine grained control over auto subscribe.
            </summary>
        </member>
        <member name="M:NServiceBus.AutomaticSubscriptions.Config.AutoSubscribeSettings.DoNotAutoSubscribeSagas">
            <summary>
            Turns off auto subscriptions for sagas. Sagas where not auto subscribed by default before v4.
            </summary>
        </member>
        <member name="T:NServiceBus.ContentTypes">
            <summary>
            Contains message body content type definitions.
            </summary>
        </member>
        <member name="F:NServiceBus.ContentTypes.Json">
            <summary>
            Indicates that the content type is "application/json".
            </summary>
        </member>
        <member name="F:NServiceBus.ContentTypes.Xml">
            <summary>
            Indicates that the content type is "text/xml".
            </summary>
        </member>
        <member name="T:NServiceBus.DataBusProperty`1">
            <summary>
            Default implementation for <see cref="T:NServiceBus.IDataBusProperty" />.
            </summary>
            <typeparam name="T">Type of data to store in <see cref="T:NServiceBus.IDataBusProperty" />.</typeparam>
        </member>
        <member name="M:NServiceBus.DataBusProperty`1.#ctor(`0)">
            <summary>
            initializes a <see cref="T:NServiceBus.DataBusProperty`1" /> with the <paramref name="value" />.
            </summary>
            <param name="value">The value to initialize with.</param>
        </member>
        <member name="M:NServiceBus.DataBusProperty`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            For serialization purposes.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data. </param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization. </param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="P:NServiceBus.DataBusProperty`1.Value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="P:NServiceBus.DataBusProperty`1.Key">
            <summary>
            The <see cref="T:NServiceBus.IDataBusProperty" /> key.
            </summary>
        </member>
        <member name="P:NServiceBus.DataBusProperty`1.HasValue">
            <summary>
            <code>true</code> if <see cref="T:NServiceBus.IDataBusProperty" /> has a value.
            </summary>
        </member>
        <member name="M:NServiceBus.DataBusProperty`1.SetValue(System.Object)">
            <summary>
            Sets the value for <see cref="T:NServiceBus.IDataBusProperty" />.
            </summary>
            <param name="valueToSet">The value to set.</param>
        </member>
        <member name="M:NServiceBus.DataBusProperty`1.GetValue">
            <summary>
            Gets the value of the <see cref="T:NServiceBus.IDataBusProperty" />.
            </summary>
            <returns>The value.</returns>
        </member>
        <member name="M:NServiceBus.DataBusProperty`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data. </param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization. </param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="T:NServiceBus.ExpressAttribute">
            <summary>
            Attribute to indicate that the message should not be written to disk.
            This will make the message vulnerable to server crashes or restarts.
            </summary>
        </member>
        <member name="T:NServiceBus.EndpointConfigurationExtensions">
            <summary>
            Extension methods declarations.
            </summary>
        </member>
        <member name="M:NServiceBus.EndpointConfigurationExtensions.EnableFeature``1(NServiceBus.EndpointConfiguration)">
            <summary>
            Enables the given feature.
            </summary>
            <param name="config">The <see cref="T:NServiceBus.EndpointConfiguration" /> instance to apply the settings to.</param>
        </member>
        <member name="M:NServiceBus.EndpointConfigurationExtensions.EnableFeature(NServiceBus.EndpointConfiguration,System.Type)">
            <summary>
            Enables the given feature.
            </summary>
            <param name="config">The <see cref="T:NServiceBus.EndpointConfiguration" /> instance to apply the settings to.</param>
            <param name="featureType">The feature to enable.</param>
        </member>
        <member name="M:NServiceBus.EndpointConfigurationExtensions.DisableFeature``1(NServiceBus.EndpointConfiguration)">
            <summary>
            Disables the given feature.
            </summary>
            <param name="config">The <see cref="T:NServiceBus.EndpointConfiguration" /> instance to apply the settings to.</param>
        </member>
        <member name="M:NServiceBus.EndpointConfigurationExtensions.DisableFeature(NServiceBus.EndpointConfiguration,System.Type)">
            <summary>
            Enables the given feature.
            </summary>
            <param name="config">The <see cref="T:NServiceBus.EndpointConfiguration" /> instance to apply the settings to.</param>
            <param name="featureType">The feature to disable.</param>
        </member>
        <member name="T:NServiceBus.Headers">
            <summary>
            Static class containing headers used by NServiceBus.
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.HttpFrom">
            <summary>
            Header for retrieving from which Http endpoint the message arrived.
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.HttpTo">
            <summary>
            Header for specifying to which Http endpoint the message should be delivered.
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.RouteTo">
            <summary>
            Header for specifying to which queue behind the http gateway should the message be delivered.
            This header is considered an applicative header.
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.DestinationSites">
            <summary>
            Header for specifying to which sites the gateway should send the message. For multiple
            sites a comma separated list can be used
            This header is considered an applicative header.
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.OriginatingSite">
            <summary>
            Header for specifying the key for the site where this message originated.
            This header is considered an applicative header.
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.SagaId">
            <summary>
            Header containing the id of the saga instance the sent the message
            This header is considered an applicative header.
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.MessageId">
            <summary>
            Header containing a stable message id for a message.
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.CorrelationId">
            <summary>
            Header containing a correlation id for a message.
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.ReplyToAddress">
            <summary>
            Header containing the ReplyToAddress for a message.
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.HeaderName">
            <summary>
            Prefix included on the wire when sending applicative headers.
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.NServiceBusVersion">
            <summary>
            Header telling the NServiceBus Version (beginning NServiceBus V3.0.1).
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.ReturnMessageErrorCodeHeader">
            <summary>
            Used in a header when doing a callback (session.return).
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.ControlMessageHeader">
            <summary>
            Header that tells if this transport message is a control message.
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.SagaType">
            <summary>
            Type of the saga that this message is targeted for.
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.OriginatingSagaId">
            <summary>
            Id of the saga that sent this message.
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.OriginatingSagaType">
            <summary>
            Type of the saga that sent this message.
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.DelayedRetries">
            <summary>
            The number of Delayed Retries that have been performed for this message.
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.DelayedRetriesTimestamp">
            <summary>
            The time the last Delayed Retry has been performed for this message.
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.ImmediateRetries">
            <summary>
            The number of Immediate Retries that have been performed for this message.
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.ProcessingStarted">
            <summary>
            The time processing of this message started.
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.ProcessingEnded">
            <summary>
            The time processing of this message ended.
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.TimeSent">
            <summary>
            The time this message was sent from the client.
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.RelatedTo">
            <summary>
            Id of the message that caused this message to be sent.
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.EnclosedMessageTypes">
            <summary>
            Header entry key indicating the types of messages contained.
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.ContentType">
            <summary>
            Header entry key indicating format of the payload.
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.SubscriptionMessageType">
            <summary>
            Header entry key for the given message type that is being subscribed to, when message intent is subscribe or
            unsubscribe.
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.SubscriberTransportAddress">
            <summary>
            Header entry key for the transport address of the subscribing endpoint.
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.SubscriberEndpoint">
            <summary>
            Header entry key for the logical name of the subscribing endpoint.
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.IsSagaTimeoutMessage">
            <summary>
            True if this message is a saga timeout.
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.IsDeferredMessage">
            <summary>
            True if this is a deferred message.
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.OriginatingEndpoint">
            <summary>
            Name of the endpoint where the given message originated.
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.OriginatingMachine">
            <summary>
            Machine name of the endpoint where the given message originated.
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.OriginatingHostId">
            <summary>
            HostId of the endpoint where the given message originated.
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.ProcessingEndpoint">
            <summary>
            Name of the endpoint where the given message was processed (success or failure).
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.ProcessingMachine">
            <summary>
            Machine name of the endpoint where the given message was processed (success or failure).
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.HostDisplayName">
            <summary>
            The display name of the host where the given message was processed (success or failure), eg the MachineName.
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.HostId">
            <summary>
            HostId of the endpoint where the given message was processed (success or failure).
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.HasLicenseExpired">
            <summary>
            HostId of the endpoint where the given message was processed (success or failure).
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.OriginatingAddress">
            <summary>
            The original reply to address for successfully processed messages.
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.ConversationId">
            <summary>
            The id of the message conversation that this message is part of.
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.MessageIntent">
            <summary>
            The intent of the current message.
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.RijndaelKeyIdentifier">
            <summary>
            The identifier to lookup the key to decrypt the encrypted data.
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.TimeToBeReceived">
            <summary>
            The time to be received for this message when it was sent the first time.
            When moved to error and audit this header will be preserved to the original TTBR
            of the message can be known.
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.NonDurableMessage">
            <summary>
            Indicates that the message was sent as a non-durable message.
            </summary>
        </member>
        <member name="T:NServiceBus.Hosting.Helpers.SkippedFile">
            <summary>
            Contains information about a file that was skipped during scanning along with a text describing
            the reason why the file was skipped.
            </summary>
        </member>
        <member name="P:NServiceBus.Hosting.Helpers.SkippedFile.FilePath">
            <summary>
            The full path to the file that was skipped.
            </summary>
        </member>
        <member name="P:NServiceBus.Hosting.Helpers.SkippedFile.SkipReason">
            <summary>
            Description of the reason why this file was skipped.
            </summary>
        </member>
        <member name="T:NServiceBus.Hosting.Helpers.AssemblyScanner">
            <summary>
            Helpers for assembly scanning operations.
            </summary>
        </member>
        <member name="M:NServiceBus.Hosting.Helpers.AssemblyScanner.#ctor">
            <summary>
            Creates a new scanner that will scan the base directory of the current appdomain.
            </summary>
        </member>
        <member name="M:NServiceBus.Hosting.Helpers.AssemblyScanner.#ctor(System.String)">
            <summary>
            Creates a scanner for the given directory.
            </summary>
        </member>
        <member name="P:NServiceBus.Hosting.Helpers.AssemblyScanner.ThrowExceptions">
            <summary>
            Determines if the scanner should throw exceptions or not.
            </summary>
        </member>
        <member name="M:NServiceBus.Hosting.Helpers.AssemblyScanner.GetScannableAssemblies">
            <summary>
            Traverses the specified base directory including all sub-directories, generating a list of assemblies that can be
            scanned for handlers, a list of skipped files, and a list of errors that occurred while scanning.
            Scanned files may be skipped when they're either not a .NET assembly, or if a reflection-only load of the .NET
            assembly reveals that it does not reference NServiceBus.
            </summary>
        </member>
        <member name="T:NServiceBus.Hosting.Helpers.AssemblyScannerResults">
            <summary>
            Holds <see cref="M:NServiceBus.Hosting.Helpers.AssemblyScanner.GetScannableAssemblies" /> results.
            Contains list of errors and list of scannable assemblies.
            </summary>
        </member>
        <member name="M:NServiceBus.Hosting.Helpers.AssemblyScannerResults.#ctor">
            <summary>
            Constructor to initialize AssemblyScannerResults.
            </summary>
        </member>
        <member name="P:NServiceBus.Hosting.Helpers.AssemblyScannerResults.Assemblies">
            <summary>
            List of successfully found and loaded assemblies.
            </summary>
        </member>
        <member name="P:NServiceBus.Hosting.Helpers.AssemblyScannerResults.SkippedFiles">
            <summary>
            List of files that were skipped while scanning because they were a) explicitly excluded
            by the user, b) not a .NET DLL, or c) not referencing NSB and thus not capable of implementing
            <see cref="T:NServiceBus.IHandleMessages`1" />.
            </summary>
        </member>
        <member name="P:NServiceBus.Hosting.Helpers.AssemblyScannerResults.ErrorsThrownDuringScanning">
            <summary>
            True if errors where encountered during assembly scanning.
            </summary>
        </member>
        <member name="P:NServiceBus.Hosting.Helpers.AssemblyScannerResults.Types">
            <summary>
            List of types.
            </summary>
        </member>
        <member name="T:NServiceBus.Hosting.HostInformation">
            <summary>
            Provides information about the process hosting this endpoint.
            </summary>
        </member>
        <member name="M:NServiceBus.Hosting.HostInformation.#ctor(System.Guid,System.String)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="hostId">The id of the host.</param>
            <param name="displayName">The display name of the host.</param>
        </member>
        <member name="M:NServiceBus.Hosting.HostInformation.#ctor(System.Guid,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Creates a new instance.
            </summary>
            <param name="hostId">The id of the host.</param>
            <param name="displayName">The display name of the host.</param>
            <param name="properties">A set of properties for the host. This might vary from host to host.</param>
        </member>
        <member name="P:NServiceBus.Hosting.HostInformation.HostId">
            <summary>
            The unique identifier for this host.
            </summary>
        </member>
        <member name="P:NServiceBus.Hosting.HostInformation.DisplayName">
            <summary>
            The display name of this host.
            </summary>
        </member>
        <member name="P:NServiceBus.Hosting.HostInformation.Properties">
            <summary>
            A set of properties for the host. This might vary from host to host.
            </summary>
        </member>
        <member name="T:NServiceBus.ICommand">
            <summary>
            Marker interface to indicate that a class is a command message.
            </summary>
        </member>
        <member name="T:NServiceBus.CombGuid">
            <summary>
            Generates a Guid using http://www.informit.com/articles/article.asp?p=25862
            The Comb algorithm is designed to make the use of Guids as Primary Keys, Foreign Keys, and Indexes nearly as efficient
            as ints.
            </summary>
            <remarks>Source: https://github.com/nhibernate/nhibernate-core/blob/4.0.4.GA/src/NHibernate/Id/GuidCombGenerator.cs</remarks>
        </member>
        <member name="M:NServiceBus.CombGuid.Generate">
            <summary>
            Generate a new <see cref="T:System.Guid" /> using the comb algorithm.
            </summary>
        </member>
        <member name="T:NServiceBus.IEvent">
            <summary>
            Marker interface to indicate that a class is a event message.
            </summary>
        </member>
        <member name="T:NServiceBus.IMessage">
            <summary>
            Marker interface to indicate that a class is a message suitable
            for transmission and handling by an NServiceBus.
            </summary>
        </member>
        <member name="T:NServiceBus.IMessageCreator">
            <summary>
            The abstraction for creating interface-based messages.
            </summary>
        </member>
        <member name="M:NServiceBus.IMessageCreator.CreateInstance``1">
            <summary>
            Creates an instance of the message type T.
            </summary>
            <typeparam name="T">The type of message interface to instantiate.</typeparam>
            <returns>A message object that implements the interface T.</returns>
        </member>
        <member name="M:NServiceBus.IMessageCreator.CreateInstance``1(System.Action{``0})">
            <summary>
            Creates an instance of the message type T and fills it with data.
            </summary>
            <typeparam name="T">The type of message interface to instantiate.</typeparam>
            <param name="action">An action to set various properties of the instantiated object.</param>
            <returns>A message object that implements the interface T.</returns>
        </member>
        <member name="M:NServiceBus.IMessageCreator.CreateInstance(System.Type)">
            <summary>
            Creates an instance of the given message type.
            </summary>
            <param name="messageType">The type of message to instantiate.</param>
            <returns>A message object that implements the given interface.</returns>
        </member>
        <member name="T:NServiceBus.PersistenceExtensions`2">
            <summary>
            This class provides implementers of persisters with an extension mechanism for custom settings for specific storage
            type via extension methods.
            </summary>
            <typeparam name="T">The persister definition eg <see cref="T:NServiceBus.InMemoryPersistence" />, etc.</typeparam>
            <typeparam name="S">The <see cref="T:NServiceBus.Persistence.StorageType" />storage type.</typeparam>
        </member>
        <member name="M:NServiceBus.PersistenceExtensions`2.#ctor(NServiceBus.Settings.SettingsHolder)">
            <summary>
            Initializes a new instance of <see cref="T:NServiceBus.PersistenceExtensions" />.
            </summary>
        </member>
        <member name="T:NServiceBus.PersistenceExtensions`1">
            <summary>
            This class provides implementers of persisters with an extension mechanism for custom settings via extension
            methods.
            </summary>
            <typeparam name="T">The persister definition eg <see cref="N:NServiceBus.InMemory" />, <see cref="T:NServiceBus.MsmqTransport" />, etc.</typeparam>
        </member>
        <member name="M:NServiceBus.PersistenceExtensions`1.#ctor(NServiceBus.Settings.SettingsHolder)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:NServiceBus.PersistenceExtensions`1.#ctor(NServiceBus.Settings.SettingsHolder,System.Type)">
            <summary>
            Constructor for a specific <see cref="T:NServiceBus.Persistence.StorageType" />.
            </summary>
        </member>
        <member name="M:NServiceBus.PersistenceExtensions`1.For(NServiceBus.Persistence.Storage[])">
            <summary>
            Defines the list of specific storage needs this persistence should provide.
            </summary>
            <param name="specificStorages">The list of storage needs.</param>
        </member>
        <member name="T:NServiceBus.PersistenceExtensions">
            <summary>
            This class provides implementers of persisters with an extension mechanism for custom settings via extension
            methods.
            </summary>
        </member>
        <member name="M:NServiceBus.PersistenceExtensions.#ctor(System.Type,NServiceBus.Settings.SettingsHolder,System.Type)">
            <summary>
            Initializes a new instance of <see cref="T:NServiceBus.PersistenceExtensions" />.
            </summary>
        </member>
        <member name="M:NServiceBus.PersistenceExtensions.For(NServiceBus.Persistence.Storage[])">
            <summary>
            Defines the list of specific storage needs this persistence should provide.
            </summary>
            <param name="specificStorages">The list of storage needs.</param>
        </member>
        <member name="T:NServiceBus.SerializationConfigExtensions">
            <summary>
            Provides configuration options for serialization.
            </summary>
        </member>
        <member name="M:NServiceBus.SerializationConfigExtensions.UseSerialization``1(NServiceBus.EndpointConfiguration)">
            <summary>
            Configures the given serializer to be used.
            </summary>
            <typeparam name="T">The serializer definition eg <see cref="T:NServiceBus.JsonSerializer" />, <see cref="T:NServiceBus.XmlSerializer" />, etc.</typeparam>
            <param name="config">The <see cref="T:NServiceBus.EndpointConfiguration" /> instance to apply the settings to.</param>
        </member>
        <member name="M:NServiceBus.SerializationConfigExtensions.UseSerialization``1(NServiceBus.EndpointConfiguration,``0)">
            <summary>
            Configures the given serializer to be used.
            </summary>
            <typeparam name="T">The serializer definition eg <see cref="T:NServiceBus.JsonSerializer" />, <see cref="T:NServiceBus.XmlSerializer" />, etc.</typeparam>
            <param name="config">The <see cref="T:NServiceBus.EndpointConfiguration" /> instance to apply the settings to.</param>
            <param name="serializationDefinition">An instance of serialization definition.</param>
        </member>
        <member name="M:NServiceBus.SerializationConfigExtensions.AddDeserializer``1(NServiceBus.EndpointConfiguration)">
            <summary>
            Configures additional deserializers to be considered when processing messages. Can be called multiple times.
            </summary>
            <typeparam name="T">The serializer definition eg <see cref="T:NServiceBus.JsonSerializer" />, <see cref="T:NServiceBus.XmlSerializer" />, etc.</typeparam>
            <param name="config">The <see cref="T:NServiceBus.EndpointConfiguration" /> instance to apply the settings to.</param>
        </member>
        <member name="M:NServiceBus.SerializationConfigExtensions.AddDeserializer``1(NServiceBus.EndpointConfiguration,``0)">
            <summary>
            Configures additional deserializers to be considered when processing messages. Can be called multiple times.
            </summary>
            <typeparam name="T">The serializer definition eg <see cref="T:NServiceBus.JsonSerializer" />, <see cref="T:NServiceBus.XmlSerializer" />, etc.</typeparam>
            <param name="serializationDefinition">An instance of serialization definition.</param>
            <param name="config">The <see cref="T:NServiceBus.EndpointConfiguration" /> instance to apply the settings to.</param>
        </member>
        <member name="T:NServiceBus.Serialization.SerializationDefinition">
            <summary>
            Implemented by serializers to provide their capabilities.
            </summary>
        </member>
        <member name="M:NServiceBus.Serialization.SerializationDefinition.Configure(NServiceBus.Settings.ReadOnlySettings)">
            <summary>
            Provides a factory method for building a message serializer.
            </summary>
        </member>
        <member name="T:NServiceBus.Serialization.SerializationExtensions`1">
            <summary>
            This class provides implementers of serializers with an extension mechanism for custom settings via extension methods.
            </summary>
            <typeparam name="T">The serializer definition eg <see cref="T:NServiceBus.JsonSerializer" />, <see cref="T:NServiceBus.XmlSerializer" />, etc.</typeparam>
        </member>
        <member name="M:NServiceBus.Serialization.SerializationExtensions`1.#ctor(NServiceBus.Settings.SettingsHolder)">
            <summary>
            Initializes a new instance of <see cref="T:NServiceBus.Serialization.SerializationExtensions`1" />.
            </summary>
        </member>
        <member name="T:NServiceBus.Serialization.IMessageSerializer">
            <summary>
            Interface used for serializing and deserializing messages.
            </summary>
        </member>
        <member name="P:NServiceBus.Serialization.IMessageSerializer.ContentType">
            <summary>
            Gets the content type into which this serializer serializes the content to.
            </summary>
        </member>
        <member name="M:NServiceBus.Serialization.IMessageSerializer.Serialize(System.Object,System.IO.Stream)">
            <summary>
            Serializes the given set of messages into the given stream.
            </summary>
            <param name="message">Message to serialize.</param>
            <param name="stream">Stream for <paramref name="message" /> to be serialized into.</param>
        </member>
        <member name="M:NServiceBus.Serialization.IMessageSerializer.Deserialize(System.IO.Stream,System.Collections.Generic.IList{System.Type})">
            <summary>
            Deserializes from the given stream a set of messages.
            </summary>
            <param name="stream">Stream that contains messages.</param>
            <param name="messageTypes">
            The list of message types to deserialize. If null the types must be inferred from the
            serialized data.
            </param>
            <returns>Deserialized messages.</returns>
        </member>
        <member name="T:NServiceBus.JsonSerializer">
            <summary>
            Defines the capabilities of the JSON serializer.
            </summary>
        </member>
        <member name="M:NServiceBus.JsonSerializer.Configure(NServiceBus.Settings.ReadOnlySettings)">
            <summary>
            Provides a factory method for building a message serializer.
            </summary>
        </member>
        <member name="T:NServiceBus.XmlSerializer">
            <summary>
            Defines the capabilities of the XML serializer.
            </summary>
        </member>
        <member name="M:NServiceBus.XmlSerializer.Configure(NServiceBus.Settings.ReadOnlySettings)">
            <summary>
            Provides a factory method for building a message serializer.
            </summary>
        </member>
        <member name="T:NServiceBus.XmlSerializationExtensions">
            <summary>
            Custom extensions for the <see cref="T:NServiceBus.XmlSerializer" /> serializer.
            </summary>
        </member>
        <member name="M:NServiceBus.XmlSerializationExtensions.DontWrapRawXml(NServiceBus.Serialization.SerializationExtensions{NServiceBus.XmlSerializer})">
            <summary>
            Tells the serializer to not wrap properties which have either XDocument or XElement with a "PropertyName" element.
            By default the xml serializer serializes the following message.
            </summary>
            <code>
            interface MyMessage { XDocument Property { get; set; } }
            </code>
            into the following structure
            <code>
            <MyMessage>
            <Property>
            ... Content of the XDocument
            </Property>
            </MyMessage>
            </code>
            This flag allows to omit the property tag wrapping. Which results to
            <code>
            <MyMessage>
            ... Content of the XDocument
            </MyMessage>
            </code>
            When this feature is enable the root element of the XDocument must match the name of the property. The following would not work and lead to deserialization error:
            <code>
            <MyMessage>
            <Root>
            ...
            </Root>
            </MyMessage>
            </code>
        </member>
        <member name="M:NServiceBus.XmlSerializationExtensions.Namespace(NServiceBus.Serialization.SerializationExtensions{NServiceBus.XmlSerializer},System.String)">
            <summary>
            Configures the serializer to use a custom namespace. (http://tempuri.net) is the default.
            <para>If the provided namespace ends with trailing forward slashes, those will be removed on the fly.</para>
            </summary>
            <param name="config">The <see cref="T:NServiceBus.Serialization.SerializationExtensions`1" /> to add a namespace to.</param>
            <param name="namespaceToUse">
            Namespace to use for interop scenarios.
            Note that this namespace is not validate or used for any logic inside NServiceBus.
            It is only for scenarios where a transport (or other infrastructure) requires message xml contents to have a specific
            namespace.
            </param>
        </member>
        <member name="M:NServiceBus.XmlSerializationExtensions.SanitizeInput(NServiceBus.Serialization.SerializationExtensions{NServiceBus.XmlSerializer})">
            <summary>
            Tells the serializer to sanitize the input data from illegal characters.
            </summary>
        </member>
        <member name="T:NServiceBus.DurableMessagesConfig">
            <summary>
            Configuration class for durable messaging.
            </summary>
        </member>
        <member name="M:NServiceBus.DurableMessagesConfig.EnableDurableMessages(NServiceBus.EndpointConfiguration)">
            <summary>
            Configures messages to be guaranteed to be delivered in the event of a computer failure or network problem.
            </summary>
            <param name="config">The <see cref="T:NServiceBus.EndpointConfiguration" /> instance to apply the settings to.</param>
        </member>
        <member name="M:NServiceBus.DurableMessagesConfig.DisableDurableMessages(NServiceBus.EndpointConfiguration)">
            <summary>
            Configures messages that are not guaranteed to be delivered in the event of a computer failure or network problem.
            </summary>
            <param name="config">The <see cref="T:NServiceBus.EndpointConfiguration" /> instance to apply the settings to.</param>
        </member>
        <member name="M:NServiceBus.DurableMessagesConfig.DurableMessagesEnabled(NServiceBus.Settings.ReadOnlySettings)">
            <summary>
            Returns whether durable messages are on or off.
            </summary>
        </member>
        <member name="M:NServiceBus.DurableMessagesConfig.DurableMessagesEnabled(NServiceBus.Configure)">
            <summary>
            Returns whether durable messages are on or off.
            </summary>
        </member>
        <member name="T:NServiceBus.ConfigurationTimeoutExtensions">
            <summary>
            Extension methods declarations.
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigurationTimeoutExtensions.TimeToWaitBeforeTriggeringCriticalErrorOnTimeoutOutages(NServiceBus.EndpointConfiguration,System.TimeSpan)">
            <summary>
            A critical error is raised when timeout retrieval fails.
            By default we wait for 2 seconds for the storage to come back.
            This method allows to change the default and extend the wait time.
            </summary>
            <param name="config">The <see cref="T:NServiceBus.EndpointConfiguration" /> instance to apply the settings to.</param>
            <param name="timeToWait">Time to wait before raising a critical error.</param>
        </member>
        <member name="T:NServiceBus.MessageDeserializationException">
            <summary>
            Wraps the <see cref="T:System.Exception" /> that occurs when the contents of a <see cref="T:NServiceBus.TransportMessage" /> is deserialized
            to a list of <see cref="T:NServiceBus.Pipeline.LogicalMessage" />s.
            </summary>
        </member>
        <member name="M:NServiceBus.MessageDeserializationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:NServiceBus.MessageDeserializationException" />.
            </summary>
        </member>
        <member name="M:NServiceBus.MessageDeserializationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of <see cref="T:NServiceBus.MessageDeserializationException" />.
            </summary>
            <param name="innerException"> The exception that is the cause of the current exception.</param>
            <param name="transportMessageId">The id of the <see cref="T:NServiceBus.TransportMessage" /> that failed to deserialize.</param>
        </member>
        <member name="M:NServiceBus.MessageDeserializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            <see cref="M:System.Runtime.Serialization.SerializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />.
            </summary>
        </member>
        <member name="T:NServiceBus.UnitOfWorkSettings">
            <summary>
            Configuration class for Unit Of Work settings.
            </summary>
        </member>
        <member name="M:NServiceBus.UnitOfWorkSettings.WrapHandlersInATransactionScope(System.Nullable{System.TimeSpan},System.Nullable{System.Transactions.IsolationLevel})">
            <summary>
            Wraps <see cref="T:NServiceBus.IHandleMessages`1">handlers</see> in a <see cref="T:System.Transactions.TransactionScope" /> to make sure all storage
            operations becomes part of the same unit of work.
            </summary>
        </member>
        <member name="T:NServiceBus.UnitOfWorkSettingsExtensions">
            <summary>
            Provides configuration options for unit of work behavior.
            </summary>
        </member>
        <member name="M:NServiceBus.UnitOfWorkSettingsExtensions.UnitOfWork(NServiceBus.EndpointConfiguration)">
            <summary>
            Entry point for unit of work related configuration.
            </summary>
            <param name="config">The <see cref="T:NServiceBus.EndpointConfiguration" /> instance to apply the settings to.</param>
        </member>
        <member name="T:NServiceBus.MessageQueueExtensions">
            <summary>
            Reads the Access Control Entries (ACE) from an MSMQ queue.
            </summary>
            <remarks>
            There is no managed API for reading the queue permissions, this has to be done via P/Invoke. by calling
            <c>MQGetQueueSecurity</c> API.
            See http://stackoverflow.com/questions/10177255/how-to-get-the-current-permissions-for-an-msmq-private-queue
            </remarks>
        </member>
        <member name="T:NServiceBus.TransportExtensions`1">
            <summary>
            This class provides implementers of transports with an extension mechanism for custom settings via extension methods.
            </summary>
            <typeparam name="T">The transport definition eg <see cref="T:NServiceBus.MsmqTransport" />, etc.</typeparam>
        </member>
        <member name="M:NServiceBus.TransportExtensions`1.#ctor(NServiceBus.Settings.SettingsHolder)">
            <summary>
            Initializes a new instance of <see cref="T:NServiceBus.TransportExtensions`1" />.
            </summary>
        </member>
        <member name="M:NServiceBus.TransportExtensions`1.ConnectionString(System.String)">
            <summary>
            Configures the transport to use the given string as the connection string.
            </summary>
        </member>
        <member name="M:NServiceBus.TransportExtensions`1.ConnectionStringName(System.String)">
            <summary>
            Configures the transport to use the connection string with the given name.
            </summary>
        </member>
        <member name="M:NServiceBus.TransportExtensions`1.ConnectionString(System.Func{System.String})">
            <summary>
            Configures the transport to use the given func as the connection string.
            </summary>
        </member>
        <member name="M:NServiceBus.TransportExtensions`1.Transactions(NServiceBus.TransportTransactionMode)">
            <summary>
            Configures the transport to use a specific transaction mode.
            </summary>
        </member>
        <member name="T:NServiceBus.TransportExtensions">
            <summary>
            This class provides implementers of transports with an extension mechanism for custom settings via extension methods.
            </summary>
        </member>
        <member name="M:NServiceBus.TransportExtensions.#ctor(NServiceBus.Settings.SettingsHolder)">
            <summary>
            Initializes a new instance of <see cref="T:NServiceBus.TransportExtensions" />.
            </summary>
        </member>
        <member name="M:NServiceBus.TransportExtensions.ConnectionString(System.String)">
            <summary>
            Configures the transport to use the given string as the connection string.
            </summary>
        </member>
        <member name="M:NServiceBus.TransportExtensions.ConnectionStringName(System.String)">
            <summary>
            Configures the transport to use the connection string with the given name.
            </summary>
        </member>
        <member name="M:NServiceBus.TransportExtensions.ConnectionString(System.Func{System.String})">
            <summary>
            Configures the transport to use the given func as the connection string.
            </summary>
        </member>
        <member name="M:NServiceBus.TransportExtensions.Transactions(NServiceBus.TransportTransactionMode)">
            <summary>
            Configures the transport to use a explicit transaction mode.
            </summary>
        </member>
        <member name="T:NServiceBus.ConfigureTransportConnectionString">
            <summary>
            Allows you to read which transport connectionstring has been set.
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureTransportConnectionString.TransportConnectionString(NServiceBus.Configure)">
            <summary>
            Gets the transport connectionstring.
            </summary>
        </member>
        <member name="T:NServiceBus.IStartableEndpoint">
            <summary>
            Represents an endpoint in the start-up phase.
            </summary>
        </member>
        <member name="M:NServiceBus.IStartableEndpoint.Start">
            <summary>
            Starts the endpoint and returns a reference to it.
            </summary>
            <returns>A reference to the endpoint.</returns>
        </member>
        <member name="T:NServiceBus.Conventions">
            <summary>
            Message convention definitions.
            </summary>
        </member>
        <member name="M:NServiceBus.Conventions.IsMessageType(System.Type)">
            <summary>
            Returns true if the given type is a message type.
            </summary>
        </member>
        <member name="M:NServiceBus.Conventions.IsInSystemConventionList(System.Type)">
            <summary>
            Returns true is message is a system message type.
            </summary>
        </member>
        <member name="M:NServiceBus.Conventions.AddSystemMessagesConventions(System.Func{System.Type,System.Boolean})">
            <summary>
            Add system message convention.
            </summary>
            <param name="definesMessageType">Function to define system message convention.</param>
        </member>
        <member name="M:NServiceBus.Conventions.IsCommandType(System.Type)">
            <summary>
            Returns true if the given type is a command type.
            </summary>
        </member>
        <member name="M:NServiceBus.Conventions.IsEncryptedProperty(System.Reflection.PropertyInfo)">
            <summary>
            Returns true if the given property should be encrypted.
            </summary>
        </member>
        <member name="M:NServiceBus.Conventions.IsDataBusProperty(System.Reflection.PropertyInfo)">
            <summary>
            Returns true if the given property should be send via the DataBus.
            </summary>
        </member>
        <member name="M:NServiceBus.Conventions.IsEventType(System.Type)">
            <summary>
            Returns true if the given type is a event type.
            </summary>
        </member>
        <member name="T:NServiceBus.MessageIntentEnum">
            <summary>
            Enumeration defining different kinds of message intent like Send and Publish.
            </summary>
        </member>
        <member name="F:NServiceBus.MessageIntentEnum.Send">
            <summary>
            Regular point-to-point send.
            </summary>
        </member>
        <member name="F:NServiceBus.MessageIntentEnum.Publish">
            <summary>
            Publish, not a regular point-to-point send.
            </summary>
        </member>
        <member name="F:NServiceBus.MessageIntentEnum.Subscribe">
            <summary>
            Subscribe.
            </summary>
        </member>
        <member name="F:NServiceBus.MessageIntentEnum.Unsubscribe">
            <summary>
            Unsubscribe.
            </summary>
        </member>
        <member name="F:NServiceBus.MessageIntentEnum.Reply">
            <summary>
            Indicates that this message is a reply.
            </summary>
        </member>
        <member name="T:NServiceBus.OutboxConfigExtensions">
            <summary>
            Config methods for the outbox.
            </summary>
        </member>
        <member name="M:NServiceBus.OutboxConfigExtensions.EnableOutbox(NServiceBus.EndpointConfiguration)">
            <summary>
            Enables the outbox feature.
            </summary>
            <param name="config">The <see cref="T:NServiceBus.EndpointConfiguration" /> instance to apply the settings to.</param>
        </member>
        <member name="T:NServiceBus.InMemoryPersistence">
            <summary>
            Used to enable InMemory persistence.
            </summary>
        </member>
        <member name="T:NServiceBus.PersistenceConfig">
            <summary>
            Enables users to select persistence by calling .UsePersistence().
            </summary>
        </member>
        <member name="M:NServiceBus.PersistenceConfig.UsePersistence``1(NServiceBus.EndpointConfiguration)">
            <summary>
            Configures the given persistence to be used.
            </summary>
            <typeparam name="T">The persistence definition eg <see cref="T:NServiceBus.InMemoryPersistence" />, NHibernate etc.</typeparam>
            <param name="config">The <see cref="T:NServiceBus.EndpointConfiguration" /> instance to apply the settings to.</param>
        </member>
        <member name="M:NServiceBus.PersistenceConfig.UsePersistence``2(NServiceBus.EndpointConfiguration)">
            <summary>
            Configures the given persistence to be used for a specific storage type.
            </summary>
            <typeparam name="T">The persistence definition eg <see cref="T:NServiceBus.InMemoryPersistence" />, NHibernate etc.</typeparam>
            <typeparam name="S">The <see cref="T:NServiceBus.Persistence.StorageType" />storage type.</typeparam>
            <param name="config">The <see cref="T:NServiceBus.EndpointConfiguration" /> instance to apply the settings to.</param>
        </member>
        <member name="M:NServiceBus.PersistenceConfig.UsePersistence(NServiceBus.EndpointConfiguration,System.Type)">
            <summary>
            Configures the given persistence to be used.
            </summary>
            <param name="config">The <see cref="T:NServiceBus.EndpointConfiguration" /> instance to apply the settings to.</param>
            <param name="definitionType">The persistence definition eg <see cref="T:NServiceBus.InMemoryPersistence" />, NHibernate etc.</param>
        </member>
        <member name="T:NServiceBus.ContainSagaData">
            <summary>
            Base class to make defining saga data easier.
            </summary>
        </member>
        <member name="P:NServiceBus.ContainSagaData.Id">
            <summary>
            The saga id.
            </summary>
        </member>
        <member name="P:NServiceBus.ContainSagaData.Originator">
            <summary>
            The address io the endpoint that started the saga.
            </summary>
        </member>
        <member name="P:NServiceBus.ContainSagaData.OriginalMessageId">
            <summary>
            The id of the message that started the saga.
            </summary>
        </member>
        <member name="T:NServiceBus.IAmStartedByMessages`1">
            <summary>
            Use this interface to signify that when a message of the given type is
            received, if a saga cannot be found by an <see cref="T:NServiceBus.Sagas.IFindSagas`1" />
            the saga will be created.
            </summary>
        </member>
        <member name="T:NServiceBus.IConfigureHowToFindSagaWithMessage">
            <summary>
            Implementation provided by the infrastructure - don't implement this
            or register implementations of it in the container unless you intend
            to substantially change the way sagas work.
            </summary>
        </member>
        <member name="M:NServiceBus.IConfigureHowToFindSagaWithMessage.ConfigureMapping``2(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``1,System.Object}})">
            <summary>
            Specify that when the infrastructure is handling a message
            of the given type, which message property should be matched to
            which saga entity property in the persistent saga store.
            </summary>
        </member>
        <member name="T:NServiceBus.IContainSagaData">
            <summary>
            The saga data that will be persisted.
            </summary>
        </member>
        <member name="P:NServiceBus.IContainSagaData.Id">
            <summary>
            Gets/sets the Id of the process. Do NOT generate this value in saga code.
            The value of the Id will be generated automatically to provide the
            best performance for saving in a database.
            </summary>
            <remarks>
            The reason Guid is used for process Id is that messages containing this Id need
            to be sent by the process even before it is persisted.
            </remarks>
        </member>
        <member name="P:NServiceBus.IContainSagaData.Originator">
            <summary>
            Contains the return address of the endpoint that caused the process to run.
            </summary>
        </member>
        <member name="P:NServiceBus.IContainSagaData.OriginalMessageId">
            <summary>
            Contains the Id of the message which caused the saga to start.
            This is needed so that when we reply to the Originator, any
            registered callbacks will be fired correctly.
            </summary>
        </member>
        <member name="T:NServiceBus.IHandleTimeouts`1">
            <summary>
            Tells the infrastructure that the user wants to handle a timeout of <typeparamref name="T" />.
            </summary>
        </member>
        <member name="M:NServiceBus.IHandleTimeouts`1.Timeout(`0,NServiceBus.IMessageHandlerContext)">
            <summary>
            Called when the timeout has expired.
            </summary>
            <exception cref="T:System.Exception">This exception will be thrown if <code>null</code> is returned. Return a Task or mark the method as <code>async</code>.</exception>
        </member>
        <member name="T:NServiceBus.Saga">
            <summary>
            This class is used to define sagas containing data and handling a message.
            To handle more message types, implement <see cref="T:NServiceBus.IHandleMessages`1" />
            for the relevant types.
            To signify that the receipt of a message should start this saga,
            implement <see cref="T:NServiceBus.IAmStartedByMessages`1" /> for the relevant message type.
            </summary>
        </member>
        <member name="P:NServiceBus.Saga.Entity">
            <summary>
            The saga's typed data.
            </summary>
        </member>
        <member name="P:NServiceBus.Saga.Completed">
            <summary>
            Indicates that the saga is complete.
            In order to set this value, use the <see cref="M:NServiceBus.Saga.MarkAsComplete" /> method.
            </summary>
        </member>
        <member name="M:NServiceBus.Saga.ConfigureHowToFindSaga(NServiceBus.IConfigureHowToFindSagaWithMessage)">
            <summary>
            Override this method in order to configure how this saga's data should be found.
            </summary>
        </member>
        <member name="M:NServiceBus.Saga.RequestTimeout``1(NServiceBus.IMessageHandlerContext,System.DateTime)">
            <summary>
            Request for a timeout to occur at the given <see cref="T:System.DateTime" />.
            </summary>
            <param name="context">The context which is used to send the timeout.</param>
            <param name="at"><see cref="T:System.DateTime" /> to send timeout <typeparamref name="TTimeoutMessageType" />.</param>
        </member>
        <member name="M:NServiceBus.Saga.RequestTimeout``1(NServiceBus.IMessageHandlerContext,System.DateTime,``0)">
            <summary>
            Request for a timeout to occur at the given <see cref="T:System.DateTime" />.
            </summary>
            <param name="context">The context which is used to send the timeout.</param>
            <param name="at"><see cref="T:System.DateTime" /> to send timeout <paramref name="timeoutMessage" />.</param>
            <param name="timeoutMessage">The message to send after <paramref name="at" /> is reached.</param>
        </member>
        <member name="M:NServiceBus.Saga.RequestTimeout``1(NServiceBus.IMessageHandlerContext,System.TimeSpan)">
            <summary>
            Request for a timeout to occur within the give <see cref="T:System.TimeSpan" />.
            </summary>
            <param name="context">The context which is used to send the timeout.</param>
            <param name="within">Given <see cref="T:System.TimeSpan" /> to delay timeout message by.</param>
        </member>
        <member name="M:NServiceBus.Saga.RequestTimeout``1(NServiceBus.IMessageHandlerContext,System.TimeSpan,``0)">
            <summary>
            Request for a timeout to occur within the given <see cref="T:System.TimeSpan" />.
            </summary>
            <param name="context">The context which is used to send the timeout.</param>
            <param name="within">Given <see cref="T:System.TimeSpan" /> to delay timeout message by.</param>
            <param name="timeoutMessage">The message to send after <paramref name="within" /> expires.</param>
        </member>
        <member name="M:NServiceBus.Saga.ReplyToOriginator(NServiceBus.IMessageHandlerContext,System.Object)">
            <summary>
            Sends the <paramref name="message" /> using the bus to the endpoint that caused this saga to start.
            </summary>
        </member>
        <member name="M:NServiceBus.Saga.MarkAsComplete">
            <summary>
            Marks the saga as complete.
            This may result in the sagas state being deleted by the persister.
            </summary>
        </member>
        <member name="T:NServiceBus.SagaPropertyMapper`1">
            <summary>
            A helper class that proved syntactical sugar as part of <see cref="M:NServiceBus.Saga.ConfigureHowToFindSaga(NServiceBus.IConfigureHowToFindSagaWithMessage)" />.
            </summary>
            <typeparam name="TSagaData">A type that implements <see cref="T:NServiceBus.IContainSagaData" />.</typeparam>
        </member>
        <member name="M:NServiceBus.SagaPropertyMapper`1.ConfigureMapping``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Specify how to map between <typeparamref name="TSagaData" /> and <typeparamref name="TMessage" />.
            </summary>
            <typeparam name="TMessage">The message type to map to.</typeparam>
            <param name="messageProperty">An <see cref="T:System.Linq.Expressions.Expression`1" /> that represents the message.</param>
            <returns>
            A <see cref="T:NServiceBus.ToSagaExpression`2" /> that provides the fluent chained
            <see cref="M:NServiceBus.ToSagaExpression`2.ToSaga(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})" /> to link <paramref name="messageProperty" /> with
            <typeparamref name="TSagaData" />.
            </returns>
        </member>
        <member name="T:NServiceBus.Saga`1">
            <summary>
            This class is used to define sagas containing data and handling a message.
            To handle more message types, implement <see cref="T:NServiceBus.IHandleMessages`1" />
            for the relevant types.
            To signify that the receipt of a message should start this saga,
            implement <see cref="T:NServiceBus.IAmStartedByMessages`1" /> for the relevant message type.
            </summary>
            <typeparam name="TSagaData">A type that implements <see cref="T:NServiceBus.IContainSagaData" />.</typeparam>
        </member>
        <member name="P:NServiceBus.Saga`1.Data">
            <summary>
            The saga's strongly typed data. Wraps <see cref="P:NServiceBus.Saga.Entity" />.
            </summary>
        </member>
        <member name="M:NServiceBus.Saga`1.ConfigureHowToFindSaga(NServiceBus.IConfigureHowToFindSagaWithMessage)">
            <summary>
            Override this method in order to configure how this saga's data should be found.
            </summary>
            <remarks>
            Override <see cref="M:NServiceBus.Saga.ConfigureHowToFindSaga(NServiceBus.IConfigureHowToFindSagaWithMessage)" /> and forwards it to the generic version
            <see cref="M:NServiceBus.Saga`1.ConfigureHowToFindSaga(NServiceBus.SagaPropertyMapper{`0})" />.
            </remarks>
        </member>
        <member name="M:NServiceBus.Saga`1.ConfigureHowToFindSaga(NServiceBus.SagaPropertyMapper{`0})">
            <summary>
            A generic version of <see cref="M:NServiceBus.Saga`1.ConfigureHowToFindSaga(NServiceBus.IConfigureHowToFindSagaWithMessage)" /> wraps
            <see cref="T:NServiceBus.IConfigureHowToFindSagaWithMessage" /> in a generic helper class (
            <see cref="T:NServiceBus.SagaPropertyMapper`1" />) to provide mappings specific to <typeparamref name="TSagaData" />.
            </summary>
            <param name="mapper">
            The <see cref="T:NServiceBus.SagaPropertyMapper`1" /> that wraps the
            <see cref="T:NServiceBus.IConfigureHowToFindSagaWithMessage" />.
            </param>
        </member>
        <member name="T:NServiceBus.ToSagaExpression`2">
            <summary>
            Allows a more fluent way to map sagas.
            </summary>
        </member>
        <member name="M:NServiceBus.ToSagaExpression`2.#ctor(NServiceBus.IConfigureHowToFindSagaWithMessage,System.Linq.Expressions.Expression{System.Func{`1,System.Object}})">
            <summary>
            Initializes a new instance of <see cref="T:NServiceBus.ToSagaExpression`2" />.
            </summary>
        </member>
        <member name="M:NServiceBus.ToSagaExpression`2.ToSaga(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Defines the property on the saga data to which the message property should be mapped.
            </summary>
            <param name="sagaEntityProperty">The property to map.</param>
        </member>
        <member name="T:NServiceBus.SettingsExtensions">
            <summary>
            Provides extensions to the settings holder.
            </summary>
        </member>
        <member name="M:NServiceBus.SettingsExtensions.GetConfigSection``1(NServiceBus.Settings.ReadOnlySettings)">
            <summary>
            Returns the requested config section using the current configuration source.
            </summary>
        </member>
        <member name="M:NServiceBus.SettingsExtensions.GetAvailableTypes(NServiceBus.Settings.ReadOnlySettings)">
            <summary>
            Gets the list of types available to this endpoint.
            </summary>
        </member>
        <member name="M:NServiceBus.SettingsExtensions.EndpointName(NServiceBus.Settings.ReadOnlySettings)">
            <summary>
            Returns the name of this endpoint.
            </summary>
        </member>
        <member name="M:NServiceBus.SettingsExtensions.LogicalAddress(NServiceBus.Settings.ReadOnlySettings)">
            <summary>
            Returns the logical address of this endpoint.
            </summary>
        </member>
        <member name="M:NServiceBus.SettingsExtensions.LocalAddress(NServiceBus.Settings.ReadOnlySettings)">
            <summary>
            Returns the shared queue name of this endpoint.
            </summary>
        </member>
        <member name="M:NServiceBus.SettingsExtensions.InstanceSpecificQueue(NServiceBus.Settings.ReadOnlySettings)">
            <summary>
            Returns the instance-specific queue name of this endpoint.
            </summary>
        </member>
        <member name="T:NServiceBus.Settings.ReadOnlySettings">
            <summary>
            Settings for readonly.
            </summary>
        </member>
        <member name="M:NServiceBus.Settings.ReadOnlySettings.Get``1">
            <summary>
            Gets the setting value.
            </summary>
            <typeparam name="T">The <typeparamref name="T" /> to locate in the <see cref="T:NServiceBus.Settings.ReadOnlySettings" />.</typeparam>
            <returns>The setting value.</returns>
        </member>
        <member name="M:NServiceBus.Settings.ReadOnlySettings.Get``1(System.String)">
            <summary>
            Gets the setting value.
            </summary>
            <typeparam name="T">The type of the setting.</typeparam>
            <param name="key">The key of the setting to get.</param>
            <returns>The setting value.</returns>
        </member>
        <member name="M:NServiceBus.Settings.ReadOnlySettings.TryGet``1(``0@)">
            <summary>
            Safely get the settings value, returning false if the settings key was not found.
            </summary>
            <typeparam name="T">The type to get, fullname will be used as key.</typeparam>
            <param name="val">The value if present.</param>
        </member>
        <member name="M:NServiceBus.Settings.ReadOnlySettings.TryGet``1(System.String,``0@)">
            <summary>
            Safely get the settings value, returning false if the settings key was not found.
            </summary>
            <typeparam name="T">The type of the setting.</typeparam>
            <param name="key">The key of the setting to get.</param>
            <param name="val">The setting value.</param>
            <returns>True if found, false otherwise</returns>
        </member>
        <member name="M:NServiceBus.Settings.ReadOnlySettings.Get(System.String)">
            <summary>
            Gets the setting value.
            </summary>
        </member>
        <member name="M:NServiceBus.Settings.ReadOnlySettings.GetOrDefault``1">
            <summary>
            Gets the setting or default based on the typename.
            </summary>
            <typeparam name="T">The setting to get.</typeparam>
            <returns>The actual value.</returns>
        </member>
        <member name="M:NServiceBus.Settings.ReadOnlySettings.GetOrDefault``1(System.String)">
            <summary>
            Gets the setting value or the <code>default(T).</code>.
            </summary>
            <typeparam name="T">The value of the setting.</typeparam>
            <param name="key">The key of the setting to get.</param>
            <returns>The setting value.</returns>
        </member>
        <member name="M:NServiceBus.Settings.ReadOnlySettings.HasSetting(System.String)">
            <summary>
            Determines whether the <see cref="T:NServiceBus.Settings.ReadOnlySettings" /> contains the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:NServiceBus.Settings.ReadOnlySettings" />.</param>
            <returns>true if the <see cref="T:NServiceBus.Settings.ReadOnlySettings" /> contains an element with the specified key; otherwise, false.</returns>
        </member>
        <member name="M:NServiceBus.Settings.ReadOnlySettings.HasSetting``1">
            <summary>
            Determines whether the <see cref="T:NServiceBus.Settings.ReadOnlySettings" /> contains the specified <typeparamref name="T" />.
            </summary>
            <typeparam name="T">The <typeparamref name="T" /> to locate in the <see cref="T:NServiceBus.Settings.ReadOnlySettings" />.</typeparam>
            <returns>true if the <see cref="T:NServiceBus.Settings.ReadOnlySettings" /> contains an element with the specified key; otherwise, false.</returns>
        </member>
        <member name="M:NServiceBus.Settings.ReadOnlySettings.HasExplicitValue(System.String)">
            <summary>
            Determines whether the <see cref="T:NServiceBus.Settings.ReadOnlySettings" /> contains a specific value for the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:NServiceBus.Settings.ReadOnlySettings" />.</param>
            <returns>
            true if the <see cref="T:NServiceBus.Settings.ReadOnlySettings" /> contains an explicit value with the specified key; otherwise,
            false.
            </returns>
        </member>
        <member name="M:NServiceBus.Settings.ReadOnlySettings.HasExplicitValue``1">
            <summary>
            Determines whether the <see cref="T:NServiceBus.Settings.ReadOnlySettings" /> contains a specific value for the specified
            <typeparamref name="T" />.
            </summary>
            <typeparam name="T">The <typeparamref name="T" /> to locate in the <see cref="T:NServiceBus.Settings.ReadOnlySettings" />.</typeparam>
            <returns>true if the <see cref="T:NServiceBus.Settings.ReadOnlySettings" /> contains an element with the specified key; otherwise, false.</returns>
        </member>
        <member name="T:NServiceBus.Settings.SettingsHolder">
            <summary>
            Setting container.
            </summary>
        </member>
        <member name="M:NServiceBus.Settings.SettingsHolder.Get``1(System.String)">
            <summary>
            Gets the given setting by key.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="key">The key.</param>
        </member>
        <member name="M:NServiceBus.Settings.SettingsHolder.TryGet``1(``0@)">
            <summary>
            Tries to get the given value, key is the type fullname.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="val">The returned value if present.</param>
            <returns>True if found.</returns>
        </member>
        <member name="M:NServiceBus.Settings.SettingsHolder.TryGet``1(System.String,``0@)">
            <summary>
            Tries to get the given value by key.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="key">The key.</param>
            <param name="val">Value if found.</param>
            <returns>True if key is found.</returns>
        </member>
        <member name="M:NServiceBus.Settings.SettingsHolder.Get``1">
            <summary>
            Gets the given value, key is type fullname.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <returns>The value if found, throws if not.</returns>
        </member>
        <member name="M:NServiceBus.Settings.SettingsHolder.Get(System.String)">
            <summary>
            Gets the given value by key.
            </summary>
            <param name="key">The key.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:NServiceBus.Settings.SettingsHolder.GetOrDefault``1">
            <summary>
            Gets the setting or default based on the typename.
            </summary>
            <typeparam name="T">The setting to get.</typeparam>
            <returns>The actual value.</returns>
        </member>
        <member name="M:NServiceBus.Settings.SettingsHolder.GetOrDefault``1(System.String)">
            <summary>
            Gets the value or its default.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="key">The key.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:NServiceBus.Settings.SettingsHolder.HasSetting(System.String)">
            <summary>
            True if there is a default or explicit value for the given key.
            </summary>
            <param name="key">The Key.</param>
            <returns>True if found.</returns>
        </member>
        <member name="M:NServiceBus.Settings.SettingsHolder.HasSetting``1">
            <summary>
            True if there is a setting for the given type.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <returns>True if found.</returns>
        </member>
        <member name="M:NServiceBus.Settings.SettingsHolder.HasExplicitValue(System.String)">
            <summary>
            True if there is an explicit value for the given key.
            </summary>
            <param name="key">The Key.</param>
            <returns>True if found.</returns>
        </member>
        <member name="M:NServiceBus.Settings.SettingsHolder.HasExplicitValue``1">
            <summary>
            True if there is an explicit value for the given type.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <returns>True if found.</returns>
        </member>
        <member name="M:NServiceBus.Settings.SettingsHolder.GetOrCreate``1">
            <summary>
            Gets the requested value, a new one will be created and added if needed.
            </summary>
        </member>
        <member name="M:NServiceBus.Settings.SettingsHolder.Set(System.String,System.Object)">
            <summary>
            Sets the setting value.
            </summary>
            <param name="key">The key to use to store the setting.</param>
            <param name="value">The setting value.</param>
        </member>
        <member name="M:NServiceBus.Settings.SettingsHolder.Set``1(System.Object)">
            <summary>
            Sets the value.
            </summary>
            <typeparam name="T">The type to use as a key for storing the setting.</typeparam>
            <param name="value">The setting value.</param>
        </member>
        <member name="M:NServiceBus.Settings.SettingsHolder.Set``1(System.Action)">
            <summary>
            Sets the given value, key is type fullname.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="value">Action to store.</param>
        </member>
        <member name="M:NServiceBus.Settings.SettingsHolder.SetDefault``1(System.Object)">
            <summary>
            Sets the default setting value.
            </summary>
            <typeparam name="T">The type to use as a key for storing the setting.</typeparam>
            <param name="value">The setting value.</param>
        </member>
        <member name="M:NServiceBus.Settings.SettingsHolder.SetDefault``1(System.Action)">
            <summary>
            Sets the default value for the given setting.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="value">The value to store as default.</param>
        </member>
        <member name="M:NServiceBus.Settings.SettingsHolder.SetDefault(System.String,System.Object)">
            <summary>
            Set the default value for the given key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:NServiceBus.Settings.SettingsHolder.PreventChanges">
            <summary>
            Locks the settings to prevent further modifications.
            </summary>
        </member>
        <member name="M:NServiceBus.Settings.SettingsHolder.Clear">
            <summary>
            Clears the settings holder default values and overrides, if a value is disposable the dispose method will be called.
            </summary>
        </member>
        <member name="T:NServiceBus.Support.RuntimeEnvironment">
            <summary>
            Abstracts the runtime environment.
            </summary>
        </member>
        <member name="P:NServiceBus.Support.RuntimeEnvironment.MachineName">
            <summary>
            Returns the machine name where this endpoint is currently running.
            </summary>
        </member>
        <member name="P:NServiceBus.Support.RuntimeEnvironment.MachineNameAction">
            <summary>
            Get the machine name, allows for overrides.
            </summary>
        </member>
        <member name="T:NServiceBus.TimeToBeReceivedAttribute">
            <summary>
            Attribute to indicate that a message has a period of time in which to be received.
            </summary>
        </member>
        <member name="M:NServiceBus.TimeToBeReceivedAttribute.#ctor(System.String)">
            <summary>
            Sets the time to be received.
            </summary>
            <param name="timeSpan">A timeSpan that can be interpreted by <see cref="M:System.TimeSpan.Parse(System.String)" />.</param>
        </member>
        <member name="P:NServiceBus.TimeToBeReceivedAttribute.TimeToBeReceived">
            <summary>
            Gets the maximum time in which a message must be received.
            </summary>
            <remarks>
            If the interval specified by the <see cref="P:NServiceBus.TimeToBeReceivedAttribute.TimeToBeReceived" /> property expires before the message
            is received by the destination of the message the message will automatically be canceled.
            </remarks>
        </member>
        <member name="M:NServiceBus.Receiving.Setup(NServiceBus.Features.FeatureConfigurationContext)">
            <summary>
            <see cref="M:NServiceBus.Features.Feature.Setup(NServiceBus.Features.FeatureConfigurationContext)" />.
            </summary>
        </member>
        <member name="T:NServiceBus.ConfigureCriticalErrorAction">
            <summary>
            Allow override critical error action.
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureCriticalErrorAction.DefineCriticalErrorAction(NServiceBus.EndpointConfiguration,System.Func{NServiceBus.ICriticalErrorContext,System.Threading.Tasks.Task})">
            <summary>
            Sets the function to be used when critical error occurs.
            </summary>
            <param name="endpointConfiguration">The <see cref="T:NServiceBus.EndpointConfiguration" /> to extend.</param>
            <param name="onCriticalError">Assigns the action to perform on critical error.</param>
        </member>
        <member name="T:NServiceBus.ConfigureFileShareDataBus">
            <summary>
            Contains extension methods to <see cref="T:NServiceBus.EndpointConfiguration" /> for the file share data bus.
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureFileShareDataBus.BasePath(NServiceBus.DataBus.DataBusExtensions{NServiceBus.FileShareDataBus},System.String)">
            <summary>
            The location to which to write/read serialized properties for the databus.
            </summary>
            <param name="config">The configuration object.</param>
            <param name="basePath">The location to which to write/read serialized properties for the databus.</param>
            <returns>The configuration.</returns>
        </member>
        <member name="M:NServiceBus.JsonSerializerConfigurationExtensions.Encoding(NServiceBus.Serialization.SerializationExtensions{NServiceBus.JsonSerializer},System.Text.Encoding)">
            <summary>
            Configures the encoding of JSON stream.
            </summary>
            <param name="config">The configuration object.</param>
            <param name="encoding">Encoding to use for serialization and deserialization.</param>
        </member>
        <member name="T:NServiceBus.ConfigureLicenseExtensions">
            <summary>
            Contains extension methods to configure license.
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureLicenseExtensions.License(NServiceBus.EndpointConfiguration,System.String)">
            <summary>
            Allows user to specify the license string.
            </summary>
            <param name="config">The <see cref="T:NServiceBus.EndpointConfiguration" /> instance to apply the settings to.</param>
            <param name="licenseText">The license text.</param>
        </member>
        <member name="M:NServiceBus.ConfigureLicenseExtensions.LicensePath(NServiceBus.EndpointConfiguration,System.String)">
            <summary>
            Allows user to specify the path for the license file.
            </summary>
            <param name="config">The <see cref="T:NServiceBus.EndpointConfiguration" /> instance to apply the settings to.</param>
            <param name="licenseFile">A relative or absolute path to the license file.</param>
        </member>
        <member name="T:NServiceBus.ConfigureQueueCreation">
            <summary>
            Contains extension methods for <see cref="T:NServiceBus.EndpointConfiguration" /> that expose Queue creation settings.
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureQueueCreation.DoNotCreateQueues(NServiceBus.EndpointConfiguration)">
            <summary>
            If queues configured do not exist, will cause them not to be created on startup.
            </summary>
            <param name="config">The <see cref="T:NServiceBus.EndpointConfiguration" /> instance to apply the settings to.</param>
        </member>
        <member name="M:NServiceBus.ConfigureQueueCreation.CreateQueues(NServiceBus.Configure)">
            <summary>
            Gets whether or not queues should be created.
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureQueueCreation.CreateQueues(NServiceBus.Settings.ReadOnlySettings)">
            <summary>
            Gets whether or not queues should be created.
            </summary>
        </member>
        <member name="T:NServiceBus.ConfigurePurging">
            <summary>
            Configures purging.
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigurePurging.PurgeOnStartup(NServiceBus.EndpointConfiguration,System.Boolean)">
            <summary>
            Requests that the incoming queue be purged of all messages when the bus is started.
            All messages in this queue will be deleted if this is true.
            Setting this to true may make sense for certain smart-client applications,
            but rarely for server applications.
            </summary>
            <param name="config">The <see cref="T:NServiceBus.EndpointConfiguration" /> instance to apply the settings to.</param>
            <param name="value">True to purge all message on startup; otherwise False.</param>
        </member>
        <member name="M:NServiceBus.ConfigurePurging.PurgeOnStartup(NServiceBus.Configure)">
            <summary>
            Retrieves whether to purge the queues at startup or not.
            </summary>
        </member>
        <member name="T:NServiceBus.ConfigureRijndaelEncryptionService">
            <summary>
            Contains extension methods to NServiceBus.Configure.
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureRijndaelEncryptionService.RijndaelEncryptionService(NServiceBus.EndpointConfiguration)">
            <summary>
            Use 256 bit AES encryption based on the Rijndael cipher.
            </summary>
            <param name="config">The <see cref="T:NServiceBus.EndpointConfiguration" /> instance to apply the settings to.</param>
        </member>
        <member name="M:NServiceBus.ConfigureRijndaelEncryptionService.RijndaelEncryptionService(NServiceBus.EndpointConfiguration,System.String,System.Byte[],System.Collections.Generic.IList{System.Byte[]})">
            <summary>
            Use 256 bit AES encryption based on the Rijndael cipher.
            </summary>
            <param name="config">The <see cref="T:NServiceBus.EndpointConfiguration" /> instance to apply the settings to.</param>
            <param name="encryptionKeyIdentifier">Encryption key identifier.</param>
            <param name="encryptionKey">Encryption Key.</param>
            <param name="decryptionKeys">A list of decryption keys.</param>
        </member>
        <member name="M:NServiceBus.ConfigureRijndaelEncryptionService.RijndaelEncryptionService(NServiceBus.EndpointConfiguration,System.String,System.Collections.Generic.IDictionary{System.String,System.Byte[]},System.Collections.Generic.IList{System.Byte[]})">
            <summary>
            Use 256 bit AES encryption based on the Rijndael cipher.
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureRijndaelEncryptionService.RegisterEncryptionService(NServiceBus.EndpointConfiguration,System.Func{NServiceBus.IEncryptionService})">
            <summary>
            Register a custom <see cref="T:NServiceBus.IEncryptionService" /> to be used for message encryption.
            </summary>
            <param name="config">The <see cref="T:NServiceBus.EndpointConfiguration" /> instance to apply the settings to.</param>
            <param name="func">
            A delegate that constructs the instance of <see cref="T:NServiceBus.IEncryptionService" /> to use for all
            encryption.
            </param>
        </member>
        <member name="T:NServiceBus.MsmqTransport">
            <summary>
            Transport definition for MSMQ.
            </summary>
        </member>
        <member name="P:NServiceBus.MsmqTransport.ExampleConnectionStringForErrorMessage">
            <summary>
            <see cref="P:NServiceBus.Transport.TransportDefinition.ExampleConnectionStringForErrorMessage" />.
            </summary>
        </member>
        <member name="P:NServiceBus.MsmqTransport.RequiresConnectionString">
            <summary>
            <see cref="P:NServiceBus.Transport.TransportDefinition.RequiresConnectionString" />.
            </summary>
        </member>
        <member name="M:NServiceBus.MsmqTransport.Initialize(NServiceBus.Settings.SettingsHolder,System.String)">
            <summary>
            Initializes the transport infrastructure for msmq.
            </summary>
            <param name="settings">The settings.</param>
            <param name="connectionString">The connection string.</param>
            <returns>the transport infrastructure for msmq.</returns>
        </member>
        <member name="T:NServiceBus.DateTimeExtensions">
            <summary>
            Common date time extensions.
            </summary>
        </member>
        <member name="M:NServiceBus.DateTimeExtensions.ToWireFormattedString(System.DateTime)">
            <summary>
            Converts the <see cref="T:System.DateTime" /> to a <see cref="T:System.String" /> suitable for transport over the wire.
            </summary>
        </member>
        <member name="M:NServiceBus.DateTimeExtensions.ToUtcDateTime(System.String)">
            <summary>
            Converts a wire formatted <see cref="T:System.String" /> from <see cref="M:NServiceBus.DateTimeExtensions.ToWireFormattedString(System.DateTime)" /> to a UTC
            <see cref="T:System.DateTime" />.
            </summary>
        </member>
        <member name="T:NServiceBus.DependencyLifecycle">
            <summary>
            Represent the various lifecycles available for components configured in the container.
            </summary>
        </member>
        <member name="F:NServiceBus.DependencyLifecycle.SingleInstance">
            <summary>
            The same instance will be returned each time.
            </summary>
        </member>
        <member name="F:NServiceBus.DependencyLifecycle.InstancePerUnitOfWork">
            <summary>
            The instance will be singleton for the duration of the unit of work. In practice this means
            the processing of a single transport message.
            </summary>
        </member>
        <member name="F:NServiceBus.DependencyLifecycle.InstancePerCall">
            <summary>
            A new instance will be returned for each call.
            </summary>
        </member>
        <member name="T:NServiceBus.IEncryptionService">
            <summary>
            Abstraction for encryption capabilities.
            </summary>
        </member>
        <member name="M:NServiceBus.IEncryptionService.Encrypt(System.String,NServiceBus.Pipeline.IOutgoingLogicalMessageContext)">
            <summary>
            Encrypts the given value returning an EncryptedValue.
            </summary>
        </member>
        <member name="M:NServiceBus.IEncryptionService.Decrypt(NServiceBus.EncryptedValue,NServiceBus.Pipeline.IIncomingLogicalMessageContext)">
            <summary>
            Decrypts the given EncryptedValue object returning the source string.
            </summary>
        </member>
        <member name="T:NServiceBus.Installation.INeedToInstallSomething">
            <summary>
            Interface invoked by the infrastructure when going to install an endpoint.
            </summary>
        </member>
        <member name="M:NServiceBus.Installation.INeedToInstallSomething.Install(System.String)">
            <summary>
            Performs the installation providing permission for the given user.
            </summary>
            <param name="identity">The user for whom permissions will be given.</param>
        </member>
        <member name="T:NServiceBus.IWantToRunBeforeConfigurationIsFinalized">
            <summary>
            Indicates that this class contains logic that needs to run just before
            configuration is finalized.
            </summary>
        </member>
        <member name="M:NServiceBus.IWantToRunBeforeConfigurationIsFinalized.Run(NServiceBus.Settings.SettingsHolder)">
            <summary>
            Invoked before configuration is finalized and locked.
            </summary>
        </member>
        <member name="T:NServiceBus.MessageInterfaces.IMessageMapper">
            <summary>
            Enables looking up interfaced mapped to generated concrete types.
            and vice versa.
            </summary>
        </member>
        <member name="M:NServiceBus.MessageInterfaces.IMessageMapper.Initialize(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Initializes the mapper with the given types to be scanned.
            </summary>
        </member>
        <member name="M:NServiceBus.MessageInterfaces.IMessageMapper.GetMappedTypeFor(System.Type)">
            <summary>
            If the given type is an interface, returns the generated concrete type.
            If the given type is concrete, returns the interface it was generated from.
            </summary>
        </member>
        <member name="M:NServiceBus.MessageInterfaces.IMessageMapper.GetMappedTypeFor(System.String)">
            <summary>
            Looks up the type mapped for the given name.
            </summary>
        </member>
        <member name="T:NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper">
            <summary>
            Uses reflection to map between interfaces and their generated concrete implementations.
            </summary>
        </member>
        <member name="M:NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper" />.
            </summary>
        </member>
        <member name="M:NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper.Initialize(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Scans the given types generating concrete classes for interfaces.
            </summary>
        </member>
        <member name="M:NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper.GetMappedTypeFor(System.Type)">
            <summary>
            If the given type is concrete, returns the interface it was generated to support.
            If the given type is an interface, returns the concrete class generated to implement it.
            </summary>
        </member>
        <member name="M:NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper.GetMappedTypeFor(System.String)">
            <summary>
            Returns the type mapped to the given name.
            </summary>
        </member>
        <member name="M:NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper.CreateInstance``1(System.Action{``0})">
            <summary>
            Calls the generic CreateInstance and performs the given action on the result.
            </summary>
        </member>
        <member name="M:NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper.CreateInstance``1">
            <summary>
            Calls the <see cref="M:NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper.CreateInstance(System.Type)" /> and returns its result cast to <typeparamref name="T" />.
            </summary>
        </member>
        <member name="M:NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper.CreateInstance(System.Type)">
            <summary>
            If the given type is an interface, finds its generated concrete implementation, instantiates it, and returns the
            result.
            </summary>
        </member>
        <member name="M:NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper.InitType(System.Type)">
            <summary>
            Generates a concrete implementation of the given type if it is an interface.
            </summary>
        </member>
        <member name="T:NServiceBus.ObjectBuilder.Common.IContainer">
            <summary>
            Abstraction of a container.
            </summary>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.Common.IContainer.Build(System.Type)">
            <summary>
            Returns an instantiation of the given type.
            </summary>
            <param name="typeToBuild">The <see cref="T:System.Type" /> to build.</param>
            <returns>The component instance.</returns>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.Common.IContainer.BuildChildContainer">
            <summary>
            Returns a child instance of the container to facilitate deterministic disposal
            of all resources built by the child container.
            </summary>
            <returns>Returns a new child container.</returns>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.Common.IContainer.BuildAll(System.Type)">
            <summary>
            Returns a list of objects instantiated because their type is compatible
            with the given type.
            </summary>
            <param name="typeToBuild">Type to be build.</param>
            <returns>Enumeration of all types that implement <paramref name="typeToBuild" />.</returns>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.Common.IContainer.Configure(System.Type,NServiceBus.DependencyLifecycle)">
            <summary>
            Configures the call model of the given component type.
            </summary>
            <param name="component">Type to be configured.</param>
            <param name="dependencyLifecycle">The desired lifecycle for this type.</param>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.Common.IContainer.Configure``1(System.Func{``0},NServiceBus.DependencyLifecycle)">
            <summary>
            Configures the call model of the given component type using a <see cref="T:System.Func`1" />.
            </summary>
            <typeparam name="T">Type to be configured.</typeparam>
            <param name="component"><see cref="T:System.Func`1" /> to use to configure.</param>
            <param name="dependencyLifecycle">The desired lifecycle for this type.</param>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.Common.IContainer.RegisterSingleton(System.Type,System.Object)">
            <summary>
            Registers the given instance as the singleton that will be returned for the given type.
            </summary>
            <param name="lookupType">The interface type.</param>
            <param name="instance">The implementation instance.</param>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.Common.IContainer.HasComponent(System.Type)">
            <summary>
            Indicates if a component of the given type has been configured.
            </summary>
            <param name="componentType">Component type to check.</param>
            <returns><c>true</c> if the <paramref name="componentType" /> is registered in the container or <c>false</c> otherwise.</returns>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.Common.IContainer.Release(System.Object)">
            <summary>
            Releases a component instance.
            </summary>
            <param name="instance">The component instance to release.</param>
        </member>
        <member name="T:NServiceBus.ObjectBuilder.IBuilder">
            <summary>
            Used to instantiate types, so that all configured dependencies
            and property values are set.
            An abstraction on top of dependency injection frameworks.
            </summary>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.IBuilder.Build(System.Type)">
            <summary>
            Returns an instantiation of the given type.
            </summary>
            <param name="typeToBuild">The <see cref="T:System.Type" /> to build.</param>
            <returns>The component instance.</returns>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.IBuilder.CreateChildBuilder">
            <summary>
            Returns a child instance of the container to facilitate deterministic disposal
            of all resources built by the child container.
            </summary>
            <returns>Returns a new child container.</returns>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.IBuilder.Build``1">
            <summary>
            Creates an instance of the given type, injecting it with all defined dependencies.
            </summary>
            <typeparam name="T">Type to be resolved.</typeparam>
            <returns>Instance of <typeparamref name="T" />.</returns>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.IBuilder.BuildAll``1">
            <summary>
            For each type that is compatible with T, an instance is created with all dependencies injected, and yielded to the
            caller.
            </summary>
            <typeparam name="T">Type to be resolved.</typeparam>
            <returns>Instances of <typeparamref name="T" />.</returns>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.IBuilder.BuildAll(System.Type)">
            <summary>
            For each type that is compatible with the given type, an instance is created with all dependencies injected.
            </summary>
            <param name="typeToBuild">The <see cref="T:System.Type" /> to build.</param>
            <returns>The component instances.</returns>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.IBuilder.Release(System.Object)">
            <summary>
            Releases a component instance.
            </summary>
            <param name="instance">The component instance to release.</param>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.IBuilder.BuildAndDispatch(System.Type,System.Action{System.Object})">
            <summary>
            Builds an instance of the defined type injecting it with all defined dependencies
            and invokes the given action on the instance.
            </summary>
            <param name="typeToBuild">The <see cref="T:System.Type" /> to build.</param>
            <param name="action">The callback to call.</param>
        </member>
        <member name="T:NServiceBus.ObjectBuilder.IConfigureComponents">
            <summary>
            Used to configure components in the container.
            Should primarily be used at startup/initialization time.
            </summary>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.IConfigureComponents.ConfigureComponent(System.Type,NServiceBus.DependencyLifecycle)">
            <summary>
            Configures the given type. Can be used to configure all kinds of properties.
            </summary>
            <param name="concreteComponent">The concrete implementation of the component.</param>
            <param name="dependencyLifecycle">Defines lifecycle semantics for the given type.</param>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.IConfigureComponents.ConfigureComponent``1(NServiceBus.DependencyLifecycle)">
            <summary>
            Configures the given type, allowing to fluently configure properties.
            </summary>
            <param name="dependencyLifecycle">Defines lifecycle semantics for the given type.</param>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.IConfigureComponents.ConfigureComponent``1(System.Func{``0},NServiceBus.DependencyLifecycle)">
            <summary>
            Configures the given type, allowing to fluently configure properties.
            </summary>
            <typeparam name="T">Type to configure.</typeparam>
            <param name="componentFactory">Factory method that returns the given type.</param>
            <param name="dependencyLifecycle">Defines lifecycle semantics for the given type.</param>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.IConfigureComponents.ConfigureComponent``1(System.Func{NServiceBus.ObjectBuilder.IBuilder,``0},NServiceBus.DependencyLifecycle)">
            <summary>
            Configures the given type, allowing to fluently configure properties.
            </summary>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.IConfigureComponents.RegisterSingleton(System.Type,System.Object)">
            <summary>
            Registers the given instance as the singleton that will be returned
            for the given type.
            </summary>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.IConfigureComponents.RegisterSingleton``1(``0)">
            <summary>
            Registers the given instance as the singleton that will be returned
            for the given type.
            </summary>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.IConfigureComponents.HasComponent``1">
            <summary>
            Indicates if a component of the given type has been configured.
            </summary>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.IConfigureComponents.HasComponent(System.Type)">
            <summary>
            Indicates if a component of the given type has been configured.
            </summary>
        </member>
        <member name="T:NServiceBus.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:NServiceBus.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:NServiceBus.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:NServiceBus.Properties.Resources.form_icon">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:NServiceBus.Properties.Resources.logo">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="T:NServiceBus.InMemorySagaPersister.CorrelationId">
            <summary>
            This correlation id is cheap to create as type and the propertyName are not allocated (they are stored in the saga
            metadata).
            The only thing that is allocated is the correlationId itself and the propertyValue, which again, is allocated anyway
            by the saga behavior.
            </summary>
        </member>
        <member name="T:NServiceBus.ScheduleExtensions">
            <summary>
            Extends the context with scheduling capabilities.
            </summary>
        </member>
        <member name="M:NServiceBus.ScheduleExtensions.ScheduleEvery(NServiceBus.IMessageSession,System.TimeSpan,System.Action)">
            <summary>
            Schedules a task to be executed repeatedly in a given interval.
            </summary>
            <param name="session">The session which allows you to perform message operation.</param>
            <param name="timeSpan">The interval to repeatedly execute the <paramref name="task" />.</param>
            <param name="task">The <see cref="T:System.Action" /> to execute.</param>
        </member>
        <member name="M:NServiceBus.ScheduleExtensions.ScheduleEvery(NServiceBus.IMessageSession,System.TimeSpan,System.String,System.Action)">
            <summary>
            Schedules a task to be executed repeatedly in a given interval.
            </summary>
            <param name="session">The session which allows you to perform message operation.</param>
            <param name="timeSpan">The interval to repeatedly execute the <paramref name="task" />.</param>
            <param name="task">The <see cref="T:System.Action" /> to execute.</param>
            <param name="name">The name to use used for logging inside the new <see cref="T:System.Threading.Thread" />.</param>
        </member>
        <member name="M:NServiceBus.ScheduleExtensions.ScheduleEvery(NServiceBus.IMessageSession,System.TimeSpan,System.Func{NServiceBus.IPipelineContext,System.Threading.Tasks.Task})">
            <summary>
            Schedules a task to be executed repeatedly in a given interval.
            </summary>
            <param name="session">The session which allows you to perform message operation.</param>
            <param name="timeSpan">The interval to repeatedly execute the <paramref name="task" />.</param>
            <param name="task">The async function to execute.</param>
        </member>
        <member name="M:NServiceBus.ScheduleExtensions.ScheduleEvery(NServiceBus.IMessageSession,System.TimeSpan,System.String,System.Func{NServiceBus.IPipelineContext,System.Threading.Tasks.Task})">
            <summary>
            Schedules a task to be executed repeatedly in a given interval.
            </summary>
            <param name="session">The session which allows you to perform message operation.</param>
            <param name="timeSpan">The interval to repeatedly execute the <paramref name="task" />.</param>
            <param name="task">The async function to execute.</param>
            <param name="name">The name to used for logging the task being executed.</param>
        </member>
        <member name="T:NServiceBus.ScheduledTask">
            <summary>
            An <see cref="T:NServiceBus.IMessage"/> that is used by <see cref="M:NServiceBus.ScheduleExtensions.ScheduleEvery(NServiceBus.IMessageSession,System.TimeSpan,System.Func{NServiceBus.IPipelineContext,System.Threading.Tasks.Task})"/> and <see cref="M:NServiceBus.ScheduleExtensions.ScheduleEvery(NServiceBus.IMessageSession,System.TimeSpan,System.String,System.Func{NServiceBus.IPipelineContext,System.Threading.Tasks.Task})"/>.
            </summary>
            <remarks>Allow implementations of <see cref="T:NServiceBus.Serialization.IMessageSerializer"/> to serialize and deserialize instances.</remarks>
        </member>
        <member name="P:NServiceBus.ScheduledTask.TaskId">
            <summary>
            The unique identifier.
            </summary>
        </member>
        <member name="P:NServiceBus.ScheduledTask.Name">
            <summary>
            The name to used for logging the task being executed.
            </summary>
        </member>
        <member name="P:NServiceBus.ScheduledTask.Every">
            <summary>
            The interval to repeatedly execute.
            </summary>
        </member>
        <member name="M:NServiceBus.JsonMessageSerializer.#ctor(NServiceBus.MessageInterfaces.IMessageMapper,System.Text.Encoding)">
            <summary>
            Initializes a new instance of <see cref="T:NServiceBus.JsonMessageSerializer" />.
            </summary>
        </member>
        <member name="M:NServiceBus.JsonMessageSerializer.#ctor(NServiceBus.MessageInterfaces.IMessageMapper)">
            <summary>
            Initializes a new instance of <see cref="T:NServiceBus.JsonMessageSerializer" />.
            </summary>
        </member>
        <member name="P:NServiceBus.JsonMessageSerializer.Encoding">
            <summary>
            Gets or sets the stream encoding.
            </summary>
        </member>
        <member name="M:NServiceBus.JsonMessageSerializer.Serialize(System.Object,System.IO.Stream)">
            <summary>
            Serializes the given set of messages into the given stream.
            </summary>
            <param name="message">Message to serialize.</param>
            <param name="stream">Stream for <paramref name="message" /> to be serialized into.</param>
        </member>
        <member name="M:NServiceBus.JsonMessageSerializer.Deserialize(System.IO.Stream,System.Collections.Generic.IList{System.Type})">
            <summary>
            Deserializes from the given stream a set of messages.
            </summary>
            <param name="stream">Stream that contains messages.</param>
            <param name="messageTypes">
            The list of message types to deserialize. If null the types must be inferred from the
            serialized data.
            </param>
            <returns>Deserialized messages.</returns>
        </member>
        <member name="P:NServiceBus.JsonMessageSerializer.ContentType">
            <summary>
            Gets the content type into which this serializer serializes the content to.
            </summary>
        </member>
        <member name="M:NServiceBus.JsonMessageSerializer.DeserializeObject(System.String,System.Type)">
            <summary>
            Non strongly typed deserialization.
            </summary>
        </member>
        <member name="M:NServiceBus.JsonMessageSerializer.SerializeObject(System.Object)">
            <summary>
            Serializes the given object to a json string.
            </summary>
            <param name="value">The actual object.</param>
            <returns>The json string.</returns>
        </member>
        <member name="M:NServiceBus.XmlMessageSerializer.#ctor(NServiceBus.MessageInterfaces.IMessageMapper,NServiceBus.Conventions)">
            <summary>
            Initializes an instance of a <see cref="T:NServiceBus.XmlMessageSerializer" />.
            </summary>
            <param name="mapper">Message Mapper.</param>
            <param name="conventions">The endpoint conventions.</param>
        </member>
        <member name="P:NServiceBus.XmlMessageSerializer.Namespace">
            <summary>
            The namespace to place in outgoing XML.
            <para>If the provided namespace ends with trailing forward slashes, those will be removed on the fly.</para>
            </summary>
        </member>
        <member name="P:NServiceBus.XmlMessageSerializer.SanitizeInput">
            <summary>
            If true, then the serializer will use a sanitizing stream to skip invalid characters from the stream before parsing.
            </summary>
        </member>
        <member name="P:NServiceBus.XmlMessageSerializer.SkipWrappingRawXml">
            <summary>
            Removes the wrapping of properties containing XDocument or XElement with property name as root element.
            </summary>
        </member>
        <member name="M:NServiceBus.XmlMessageSerializer.Deserialize(System.IO.Stream,System.Collections.Generic.IList{System.Type})">
            <summary>
            Deserializes from the given stream a set of messages.
            </summary>
            <param name="stream">Stream that contains messages.</param>
            <param name="messageTypesToDeserialize">
            The list of message types to deserialize. If null the types must be inferred
            from the serialized data.
            </param>
            <returns>Deserialized messages.</returns>
        </member>
        <member name="P:NServiceBus.XmlMessageSerializer.ContentType">
            <summary>
            Gets the content type into which this serializer serializes the content to.
            </summary>
        </member>
        <member name="M:NServiceBus.XmlMessageSerializer.Serialize(System.Object,System.IO.Stream)">
            <summary>
            Serializes the given messages to the given stream.
            </summary>
        </member>
        <member name="M:NServiceBus.XmlMessageSerializer.InitType(System.Type)">
            <summary>
            Scans the given type storing maps to fields and properties to save on reflection at runtime.
            </summary>
        </member>
        <member name="M:NServiceBus.XmlMessageSerializer.Initialize(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Initialized the serializer with the given message types.
            </summary>
        </member>
        <member name="M:NServiceBus.XmlSanitizingStream.IsLegalXmlChar(System.Int32)">
            <summary>
            Get whether an integer represents a legal XML 1.0 character. See the
            specification at w3.org for these characters.
            </summary>
        </member>
        <member name="F:NServiceBus.LicenseExpiredForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:NServiceBus.LicenseExpiredForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:NServiceBus.LicenseExpiredForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:NServiceBus.LoadMessageHandlersExtensions">
            <summary>
            Provides configuration options to tune handler ordering.
            </summary>
        </member>
        <member name="M:NServiceBus.LoadMessageHandlersExtensions.LoadMessageHandlers``1(NServiceBus.EndpointConfiguration)">
            <summary>
            Loads all message handler assemblies in the runtime directory
            and specifies that handlers in the given assembly should run
            before all others.
            Use First{T} to indicate the type to load from.
            </summary>
            <param name="config">The <see cref="T:NServiceBus.EndpointConfiguration" /> instance to apply the settings to.</param>
        </member>
        <member name="M:NServiceBus.LoadMessageHandlersExtensions.LoadMessageHandlers``1(NServiceBus.EndpointConfiguration,NServiceBus.First{``0})">
            <summary>
            Loads all message handler assemblies in the runtime directory
            and specifies that the handlers in the given 'order' are to
            run before all others and in the order specified.
            </summary>
        </member>
        <member name="M:NServiceBus.LoadMessageHandlersExtensions.ExecuteTheseHandlersFirst(NServiceBus.EndpointConfiguration,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Loads all message handler assemblies in the runtime directory
            and specifies that the handlers in the given 'order' are to
            run before all others and in the order specified.
            </summary>
            <param name="config">The <see cref="T:NServiceBus.EndpointConfiguration" /> instance to apply the settings to.</param>
            <param name="handlerTypes">The handler types to execute first.</param>
        </member>
        <member name="M:NServiceBus.LoadMessageHandlersExtensions.ExecuteTheseHandlersFirst(NServiceBus.EndpointConfiguration,System.Type[])">
            <summary>
            Loads all message handler assemblies in the runtime directory
            and specifies that the handlers in the given 'order' are to
            run before all others and in the order specified.
            </summary>
            <param name="config">The <see cref="T:NServiceBus.EndpointConfiguration" /> instance to apply the settings to.</param>
            <param name="handlerTypes">The handler types to execute first.</param>
        </member>
        <member name="T:NServiceBus.UseTransportExtensions">
            <summary>
            Extension methods to configure transport.
            </summary>
        </member>
        <member name="M:NServiceBus.UseTransportExtensions.UseTransport``1(NServiceBus.EndpointConfiguration)">
            <summary>
            Configures NServiceBus to use the given transport.
            </summary>
        </member>
        <member name="M:NServiceBus.UseTransportExtensions.UseTransport(NServiceBus.EndpointConfiguration,System.Type)">
            <summary>
            Configures NServiceBus to use the given transport.
            </summary>
        </member>
        <member name="T:NServiceBus.UnitOfWork.IManageUnitsOfWork">
            <summary>
            Interface used by NServiceBus to manage units of work as a part of the
            message processing pipeline.
            </summary>
        </member>
        <member name="M:NServiceBus.UnitOfWork.IManageUnitsOfWork.Begin">
            <summary>
            Called before all message handlers and modules.
            </summary>
            <exception cref="T:System.Exception">This exception will be thrown if <code>null</code> is returned. Return a Task or mark the method as <code>async</code>.</exception>
        </member>
        <member name="M:NServiceBus.UnitOfWork.IManageUnitsOfWork.End(System.Exception)">
            <summary>
            Called after all message handlers and modules, if an error has occurred the exception will be passed.
            </summary>
            <exception cref="T:System.Exception">This exception will be thrown if <code>null</code> is returned. Return a Task or mark the method as <code>async</code>.</exception>
        </member>
        <member name="T:NServiceBus.FileVersionRetriever">
            <summary>
            Helper class to retrieve File version.
            </summary>
        </member>
        <member name="M:NServiceBus.FileVersionRetriever.GetFileVersion(System.Type)">
            <summary>
            Retrieves a semver compliant version from a <see cref="T:System.Type" />.
            </summary>
            <param name="type"><see cref="T:System.Type" /> to retrieve version from.</param>
            <returns>SemVer compliant version.</returns>
        </member>
        <member name="M:NServiceBus.TypeExtensionMethods.IsSimpleType(System.Type)">
            <summary>
            Returns true if the type can be serialized as is.
            </summary>
        </member>
        <member name="M:NServiceBus.TypeExtensionMethods.SerializationFriendlyName(System.Type)">
            <summary>
            Takes the name of the given type and makes it friendly for serialization
            by removing problematic characters.
            </summary>
        </member>
        <member name="T:NServiceBus.WireEncryptedString">
            <summary>
            A string whose value will be encrypted when sent over the wire.
            </summary>
        </member>
        <member name="M:NServiceBus.WireEncryptedString.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:NServiceBus.WireEncryptedString" />.
            </summary>
        </member>
        <member name="M:NServiceBus.WireEncryptedString.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of <see cref="T:NServiceBus.WireEncryptedString" />.
            </summary>
        </member>
        <member name="P:NServiceBus.WireEncryptedString.Value">
            <summary>
            The unencrypted string.
            </summary>
        </member>
        <member name="P:NServiceBus.WireEncryptedString.EncryptedValue">
            <summary>
            The encrypted value of this string.
            </summary>
        </member>
        <member name="P:NServiceBus.WireEncryptedString.EncryptedBase64Value">
            <summary>
            Only kept for backwards compatibility reasons.
            </summary>
        </member>
        <member name="P:NServiceBus.WireEncryptedString.Base64Iv">
            <summary>
            Only kept for backwards compatibility reasons.
            </summary>
        </member>
        <member name="M:NServiceBus.WireEncryptedString.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Method for making default XML serialization work properly for this type.
            </summary>
        </member>
        <member name="M:NServiceBus.WireEncryptedString.op_Implicit(NServiceBus.WireEncryptedString)~System.String">
            <summary>
            Gets the string value from the WireEncryptedString.
            </summary>
        </member>
        <member name="M:NServiceBus.WireEncryptedString.op_Implicit(System.String)~NServiceBus.WireEncryptedString">
            <summary>
            Creates a new WireEncryptedString from the given string.
            </summary>
        </member>
        <member name="M:NServiceBus.SecondLevelRetries.Config.SecondLevelRetriesSettings.CustomRetryPolicy(System.Func{NServiceBus.TransportMessage,System.TimeSpan})">
            <summary>
            Register a custom retry policy.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.CanBeNullAttribute">
            <summary>
            Indicates that the value of the marked element could be <c>null</c> sometimes,
            so the check for <c>null</c> is necessary before its usage.
            </summary>
            <example><code>
            [CanBeNull] object Test() => null;
            
            void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.NotNullAttribute">
            <summary>
            Indicates that the value of the marked element could never be <c>null</c>.
            </summary>
            <example><code>
            [NotNull] object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.ItemNotNullAttribute">
            <summary>
            Can be appplied to symbols of types derived from IEnumerable as well as to symbols of Task
            and Lazy classes to indicate that the value of a collection item, of the Task.Result property
            or of the Lazy.Value property can never be null.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.ItemCanBeNullAttribute">
            <summary>
            Can be appplied to symbols of types derived from IEnumerable as well as to symbols of Task
            and Lazy classes to indicate that the value of a collection item, of the Task.Result property
            or of the Lazy.Value property can be null.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.StringFormatMethodAttribute">
            <summary>
            Indicates that the marked method builds string by format pattern and (optional) arguments.
            Parameter, which contains format string, should be given in constructor. The format string
            should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>-like form.
            </summary>
            <example><code>
            [StringFormatMethod("message")]
            void ShowError(string message, params object[] args) { /* do something */ }
            
            void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code></example>
        </member>
        <member name="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <param name="formatParameterName">
            Specifies which parameter of an annotated method should be treated as format-string
            </param>
        </member>
        <member name="T:JetBrains.Annotations.ValueProviderAttribute">
            <summary>
            For a parameter that is expected to be one of the limited set of values.
            Specify fields of which type should be used as values for this parameter.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one
            of the parameters of the caller function. For example, ReSharper annotates
            the parameter of <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <example><code>
            void Foo(string param) {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.NotifyPropertyChangedInvocatorAttribute">
             <summary>
             Indicates that the method is contained in a type that implements
             <c>System.ComponentModel.INotifyPropertyChanged</c> interface and this method
             is used to notify that some property value changed.
             </summary>
             <remarks>
             The method should be non-static and conform to one of the supported signatures:
             <list>
             <item><c>NotifyChanged(string)</c></item>
             <item><c>NotifyChanged(params string[])</c></item>
             <item><c>NotifyChanged{T}(Expression{Func{T}})</c></item>
             <item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item>
             <item><c>SetProperty{T}(ref T, T, string)</c></item>
             </list>
             </remarks>
             <example><code>
             public class Foo : INotifyPropertyChanged {
               public event PropertyChangedEventHandler PropertyChanged;
             
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName) { ... }
            
               string _name;
             
               public string Name {
                 get { return _name; }
                 set { _name = value; NotifyChanged("LastName"); /* Warning */ }
               }
             }
             </code>
             Examples of generated notifications:
             <list>
             <item><c>NotifyChanged("Property")</c></item>
             <item><c>NotifyChanged(() =&gt; Property)</c></item>
             <item><c>NotifyChanged((VM x) =&gt; x.Property)</c></item>
             <item><c>SetProperty(ref myField, value, "Property")</c></item>
             </list>
             </example>
        </member>
        <member name="T:JetBrains.Annotations.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output.
            </summary>
            <syntax>
            <p>Function Definition Table syntax:</p>
            <list>
            <item>FDT      ::= FDTRow [;FDTRow]*</item>
            <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
            <item>Input    ::= ParameterName: Value [, Input]*</item>
            <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
            <item>Value    ::= true | false | null | notnull | canbenull</item>
            </list>
            If method has single input parameter, it's name could be omitted.<br/>
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same)
            for method output means that the methos doesn't return normally.<br/>
            <c>canbenull</c> annotation is only applicable for output parameters.<br/>
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row,
            or use single attribute with rows separated by semicolon.<br/>
            </syntax>
            <examples><list>
            <item><code>
            [ContractAnnotation("=> halt")]
            public void TerminationMethod()
            </code></item>
            <item><code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code></item>
            <item><code>
            [ContractAnnotation("s:null => true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code></item>
            <item><code>
            // A method that returns null if the parameter is null,
            // and not null if the parameter is not null
            [ContractAnnotation("null => null; notnull => notnull")]
            public object Transform(object data) 
            </code></item>
            <item><code>
            [ContractAnnotation("s:null=>false; =>true,result:notnull; =>false, result:null")]
            public bool TryParse(string s, out Person result)
            </code></item>
            </list></examples>
        </member>
        <member name="T:JetBrains.Annotations.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not.
            </summary>
            <example><code>
            [LocalizationRequiredAttribute(true)]
            class Foo {
              string str = "my string"; // Warning: Localizable string
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of the marked type (or its derivatives)
            cannot be compared using '==' or '!=' operators and <c>Equals()</c>
            should be used instead. However, using '==' or '!=' for comparison
            with <c>null</c> is always permitted.
            </summary>
            <example><code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            
            class UsesNoEquality {
              void Test() {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
                if (ca1 != null) { // OK
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.BaseTypeRequiredAttribute">
            <summary>
            When applied to a target attribute, specifies a requirement for any type marked
            with the target attribute to implement or inherit specific type or types.
            </summary>
            <example><code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            class ComponentAttribute : Attribute { }
            
            [Component] // ComponentAttribute requires implementing IComponent interface
            class MyComponent : IComponent { }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly (e.g. via reflection, in external library),
            so this symbol will not be marked as unused (as well as by other usage inspections).
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper to not mark symbols marked with such attributes
            as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Access">
            <summary>Only entity marked with attribute considered used.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Assign">
            <summary>Indicates implicit assignment to a member.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type.</summary>
        </member>
        <member name="T:JetBrains.Annotations.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly when marked
            with <see cref="T:JetBrains.Annotations.MeansImplicitUseAttribute"/> or <see cref="T:JetBrains.Annotations.UsedImplicitlyAttribute"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.Members">
            <summary>Members of entity marked with attribute are considered used.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>Entity marked with attribute and all its members considered used.</summary>
        </member>
        <member name="T:JetBrains.Annotations.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API
            which should not be removed and so is treated as used.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled when the invoked method is on stack.
            If the parameter is a delegate, indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated while the method is executed.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.PureAttribute">
            <summary>
            Indicates that a method does not make any observable state changes.
            The same as <c>System.Diagnostics.Contracts.PureAttribute</c>.
            </summary>
            <example><code>
            [Pure] int Multiply(int x, int y) => x * y;
            
            void M() {
              Multiply(123, 42); // Waring: Return value of pure method is not used
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.MustUseReturnValueAttribute">
            <summary>
            Indicates that the return value of method invocation must be used.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.ProvidesContextAttribute">
            <summary>
            Indicates the type member or parameter of some type, that should be used instead of all other ways
            to get the value that type. This annotation is useful when you have some "context" value evaluated
            and stored somewhere, meaning that all other ways to get this value must be consolidated with existing one.
            </summary>
            <example><code>
            class Foo {
              [ProvidesContext] IBarService _barService = ...;
            
              void ProcessNode(INode node) {
                DoSomething(node, node.GetGlobalServices().Bar);
                //              ^ Warning: use value of '_barService' field
              }
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.PathReferenceAttribute">
            <summary>
            Indicates that a parameter is a path to a file or a folder within a web project.
            Path can be relative or absolute, starting from web root (~).
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.SourceTemplateAttribute">
            <summary>
            An extension method marked with this attribute is processed by ReSharper code completion
            as a 'Source Template'. When extension method is completed over some expression, it's source code
            is automatically expanded like a template at call site.
            </summary>
            <remarks>
            Template method body can contain valid source code and/or special comments starting with '$'.
            Text inside these comments is added as source code when the template is applied. Template parameters
            can be used either as additional method parameters or as identifiers wrapped in two '$' signs.
            Use the <see cref="T:JetBrains.Annotations.MacroAttribute"/> attribute to specify macros for parameters.
            </remarks>
            <example>
            In this example, the 'forEach' method is a source template available over all values
            of enumerable types, producing ordinary C# 'foreach' statement and placing caret inside block:
            <code>
            [SourceTemplate]
            public static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; xs) {
              foreach (var x in xs) {
                 //$ $END$
              }
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.MacroAttribute">
            <summary>
            Allows specifying a macro for a parameter of a <see cref="T:JetBrains.Annotations.SourceTemplateAttribute">source template</see>.
            </summary>
            <remarks>
            You can apply the attribute on the whole method or on any of its additional parameters. The macro expression
            is defined in the <see cref="P:JetBrains.Annotations.MacroAttribute.Expression"/> property. When applied on a method, the target
            template parameter is defined in the <see cref="P:JetBrains.Annotations.MacroAttribute.Target"/> property. To apply the macro silently
            for the parameter, set the <see cref="P:JetBrains.Annotations.MacroAttribute.Editable"/> property value = -1.
            </remarks>
            <example>
            Applying the attribute on a source template method:
            <code>
            [SourceTemplate, Macro(Target = "item", Expression = "suggestVariableName()")]
            public static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; collection) {
              foreach (var item in collection) {
                //$ $END$
              }
            }
            </code>
            Applying the attribute on a template method parameter:
            <code>
            [SourceTemplate]
            public static void something(this Entity x, [Macro(Expression = "guid()", Editable = -1)] string newguid) {
              /*$ var $x$Id = "$newguid$" + x.ToString();
              x.DoSomething($x$Id); */
            }
            </code>
            </example>
        </member>
        <member name="P:JetBrains.Annotations.MacroAttribute.Expression">
            <summary>
            Allows specifying a macro that will be executed for a <see cref="T:JetBrains.Annotations.SourceTemplateAttribute">source template</see>
            parameter when the template is expanded.
            </summary>
        </member>
        <member name="P:JetBrains.Annotations.MacroAttribute.Editable">
            <summary>
            Allows specifying which occurrence of the target parameter becomes editable when the template is deployed.
            </summary>
            <remarks>
            If the target parameter is used several times in the template, only one occurrence becomes editable;
            other occurrences are changed synchronously. To specify the zero-based index of the editable occurrence,
            use values >= 0. To make the parameter non-editable when the template is expanded, use -1.
            </remarks>>
        </member>
        <member name="P:JetBrains.Annotations.MacroAttribute.Target">
            <summary>
            Identifies the target parameter of a <see cref="T:JetBrains.Annotations.SourceTemplateAttribute">source template</see> if the
            <see cref="T:JetBrains.Annotations.MacroAttribute"/> is applied on a template method.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcActionAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC action. If applied to a method, the MVC action name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcAreaAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC area.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcControllerAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is
            an MVC controller. If applied to a method, the MVC controller name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcMasterAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC Master. Use this attribute
            for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcModelTypeAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC model type. Use this attribute
            for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, Object)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcPartialViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is an MVC
            partial view. If applied to a method, the MVC partial view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcSuppressViewErrorAttribute">
            <summary>
            ASP.NET MVC attribute. Allows disabling inspections for MVC views within a class or a method.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcDisplayTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcEditorTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC editor template.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC template.
            Use this attribute for custom wrappers similar to
            <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component. If applied to a method, the MVC view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(Object)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewComponentAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component name.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewComponentViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component view. If applied to a method, the MVC view component view name is default.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcActionSelectorAttribute">
            <summary>
            ASP.NET MVC attribute. When applied to a parameter of an attribute,
            indicates that this parameter is an MVC action name.
            </summary>
            <example><code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl) {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.RazorSectionAttribute">
            <summary>
            Razor attribute. Indicates that a parameter or a method is a Razor section.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.CollectionAccessAttribute">
            <summary>
            Indicates how method, constructor invocation or property access
            over collection type affects content of the collection.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.None">
            <summary>Method does not use or modify content of the collection.</summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.Read">
            <summary>Method only reads content of the collection but does not modify it.</summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.ModifyExistingContent">
            <summary>Method can change content of the collection but does not add new elements.</summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.UpdatedContent">
            <summary>Method can add new elements to the collection.</summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionMethodAttribute">
            <summary>
            Indicates that the marked method is assertion method, i.e. it halts control flow if
            one of the conditions is satisfied. To set the condition, mark one of the parameters with 
            <see cref="T:JetBrains.Annotations.AssertionConditionAttribute"/> attribute.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionAttribute">
            <summary>
            Indicates the condition parameter of the assertion method. The method itself should be
            marked by <see cref="T:JetBrains.Annotations.AssertionMethodAttribute"/> attribute. The mandatory argument of
            the attribute is the assertion type.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionType">
            <summary>
            Specifies assertion type. If the assertion method argument satisfies the condition,
            then the execution continues. Otherwise, execution is assumed to be halted.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_TRUE">
            <summary>Marked parameter should be evaluated to true.</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_FALSE">
            <summary>Marked parameter should be evaluated to false.</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NULL">
            <summary>Marked parameter should be evaluated to null value.</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NOT_NULL">
            <summary>Marked parameter should be evaluated to not null value.</summary>
        </member>
        <member name="T:JetBrains.Annotations.LinqTunnelAttribute">
            <summary>
            Indicates that method is pure LINQ method, with postponed enumeration (like Enumerable.Select,
            .Where). This annotation allows inference of [InstantHandle] annotation for parameters
            of delegate type by analyzing LINQ method chains.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.NoEnumerationAttribute">
            <summary>
            Indicates that IEnumerable, passed as parameter, is not enumerated.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.RegexPatternAttribute">
            <summary>
            Indicates that parameter is regular expression pattern.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.XamlItemsControlAttribute">
            <summary>
            XAML attribute. Indicates the type that has <c>ItemsSource</c> property and should be treated
            as <c>ItemsControl</c>-derived type, to enable inner items <c>DataContext</c> type resolve.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.XamlItemBindingOfItemsControlAttribute">
            <summary>
            XAML attribute. Indicates the property of some <c>BindingBase</c>-derived type, that
            is used to bind some item of <c>ItemsControl</c>-derived type. This annotation will
            enable the <c>DataContext</c> type resolve for XAML bindings for such properties.
            </summary>
            <remarks>
            Property should have the tree ancestor of the <c>ItemsControl</c> type or
            marked with the <see cref="T:JetBrains.Annotations.XamlItemsControlAttribute"/> attribute.
            </remarks>
        </member>
        <member name="T:JetBrains.Annotations.NoReorder">
            <summary>
            Prevents the Member Reordering feature from tossing members of the marked class.
            </summary>
            <remarks>
            The attribute must be mentioned in your member reordering patterns
            </remarks>
        </member>
    </members>
</doc>
