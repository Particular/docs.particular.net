// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CreateOrder.proto
#pragma warning disable 1591, 0612, 3021

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable PartialMethodWithSinglePart
/// <summary>Holder for reflection information generated from CreateOrder.proto</summary>
public static partial class CreateOrderReflection {

  /// <summary>File descriptor for CreateOrder.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static CreateOrderReflection() {
    var descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChFDcmVhdGVPcmRlci5wcm90byJSCgtDcmVhdGVPcmRlchIPCgdPcmRlcklk",
          "GAEgASgFEhIKCkN1c3RvbWVySWQYAiABKAUSHgoKT3JkZXJJdGVtcxgDIAMo",
          "CzIKLk9yZGVySXRlbSItCglPcmRlckl0ZW0SDgoGSXRlbUlkGAEgASgFEhAK",
          "CFF1YW50aXR5GAIgASgFYgZwcm90bzM="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::CreateOrder), global::CreateOrder.Parser, new[]{ "OrderId", "CustomerId", "OrderItems" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::OrderItem), global::OrderItem.Parser, new[]{ "ItemId", "Quantity" }, null, null, null)
        }));
  }

}
public sealed partial class CreateOrder : pb::IMessage<CreateOrder> {
  private static readonly pb::MessageParser<CreateOrder> _parser = new pb::MessageParser<CreateOrder>(() => new CreateOrder());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CreateOrder> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CreateOrderReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CreateOrder() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CreateOrder(CreateOrder other) : this() {
    orderId_ = other.orderId_;
    customerId_ = other.customerId_;
    orderItems_ = other.orderItems_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CreateOrder Clone() {
    return new CreateOrder(this);
  }

  /// <summary>Field number for the "OrderId" field.</summary>
  public const int OrderIdFieldNumber = 1;
  private int orderId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OrderId {
    get { return orderId_; }
    set {
      orderId_ = value;
    }
  }

  /// <summary>Field number for the "CustomerId" field.</summary>
  public const int CustomerIdFieldNumber = 2;
  private int customerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CustomerId {
    get { return customerId_; }
    set {
      customerId_ = value;
    }
  }

  /// <summary>Field number for the "OrderItems" field.</summary>
  public const int OrderItemsFieldNumber = 3;
  private static readonly pb::FieldCodec<global::OrderItem> _repeated_orderItems_codec
      = pb::FieldCodec.ForMessage(26, global::OrderItem.Parser);
  private readonly pbc::RepeatedField<global::OrderItem> orderItems_ = new pbc::RepeatedField<global::OrderItem>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::OrderItem> OrderItems {
    get { return orderItems_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CreateOrder);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CreateOrder other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (OrderId != other.OrderId) return false;
    if (CustomerId != other.CustomerId) return false;
    if(!orderItems_.Equals(other.orderItems_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    var hash = 1;
    if (OrderId != 0) hash ^= OrderId.GetHashCode();
    if (CustomerId != 0) hash ^= CustomerId.GetHashCode();
    hash ^= orderItems_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (OrderId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(OrderId);
    }
    if (CustomerId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(CustomerId);
    }
    orderItems_.WriteTo(output, _repeated_orderItems_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    var size = 0;
    if (OrderId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OrderId);
    }
    if (CustomerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CustomerId);
    }
    size += orderItems_.CalculateSize(_repeated_orderItems_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CreateOrder other) {
    if (other == null) {
      return;
    }
    if (other.OrderId != 0) {
      OrderId = other.OrderId;
    }
    if (other.CustomerId != 0) {
      CustomerId = other.CustomerId;
    }
    orderItems_.Add(other.orderItems_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          OrderId = input.ReadInt32();
          break;
        }
        case 16: {
          CustomerId = input.ReadInt32();
          break;
        }
        case 26: {
          orderItems_.AddEntriesFrom(input, _repeated_orderItems_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class OrderItem : pb::IMessage<OrderItem> {
  private static readonly pb::MessageParser<OrderItem> _parser = new pb::MessageParser<OrderItem>(() => new OrderItem());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<OrderItem> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CreateOrderReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OrderItem() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OrderItem(OrderItem other) : this() {
    itemId_ = other.itemId_;
    quantity_ = other.quantity_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OrderItem Clone() {
    return new OrderItem(this);
  }

  /// <summary>Field number for the "ItemId" field.</summary>
  public const int ItemIdFieldNumber = 1;
  private int itemId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ItemId {
    get { return itemId_; }
    set {
      itemId_ = value;
    }
  }

  /// <summary>Field number for the "Quantity" field.</summary>
  public const int QuantityFieldNumber = 2;
  private int quantity_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Quantity {
    get { return quantity_; }
    set {
      quantity_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as OrderItem);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(OrderItem other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ItemId != other.ItemId) return false;
    if (Quantity != other.Quantity) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    var hash = 1;
    if (ItemId != 0) hash ^= ItemId.GetHashCode();
    if (Quantity != 0) hash ^= Quantity.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ItemId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ItemId);
    }
    if (Quantity != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Quantity);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    var size = 0;
    if (ItemId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
    }
    if (Quantity != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Quantity);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(OrderItem other) {
    if (other == null) {
      return;
    }
    if (other.ItemId != 0) {
      ItemId = other.ItemId;
    }
    if (other.Quantity != 0) {
      Quantity = other.Quantity;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          ItemId = input.ReadInt32();
          break;
        }
        case 16: {
          Quantity = input.ReadInt32();
          break;
        }
      }
    }
  }

}
